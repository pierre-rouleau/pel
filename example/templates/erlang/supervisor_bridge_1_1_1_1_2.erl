%%% ------------------------------------------------------------------------------------------------
%%% File      : supervisor_bridge_1_1_1_1_2.erl
%%% Purpose   : Testing the template.
%%% Created   : Sunday, May 23 2021.
%%% Author    : Pierre Rouleau <prouleau001@gmail.com>
%%% Time-stamp: <2021-05-23 02:40:30, updated by Pierre Rouleau>

%%% Copyright (C) 2021  Pierre Rouleau
%%%
%%% Permission is hereby granted, free of charge, to any person obtaining a copy
%%% of this software and associated documentation files (the "Software"), to deal
%%% in the Software without restriction, including without limitation the rights
%%% to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
%%% copies of the Software, and to permit persons to whom the Software is
%%% furnished to do so, subject to the following conditions:
%%% The above copyright notice and this permission notice shall be included in
%%% all copies or substantial portions of the Software.
%%%
%%% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
%%% IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
%%% FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
%%% AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
%%% LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
%%% OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
%%% THE SOFTWARE.

%%% ------------------------------------------------------------------------------------------------
%%% Module Description: Testing the template.
%%%
%%% [
%   This text inside the square brackets is normally NOT generated by the template!
%   It is here only to show the value of the user-options used to generate the content.
%   This file was generated by the test function: pel--erlang-all-sk-file-header
%   This file was generated with the following user-options values:
%   - pel-erlang-skel-use-separators        : t
%   - pel-erlang-skel-use-secondary-separators : t
%   - pel-erlang-skel-insert-file-timestamp          : t
%   - pel-erlang-skel-with-license          : t
%   - pel-erlang-skel-with-edoc         : in-function-only
%    ]
%%% ================================================================================================
-module(supervisor_bridge_1_1_1_1_2).

-behaviour(supervisor_bridge).

%% supervisor_bridge_1_1_1_1_2 API
-export([start_link/0]).

%% supervisor_bridge callbacks
-export([init/1, terminate/2]).

-define(SERVER, ?MODULE).

-record(state, {}).

%%% ================================================================================================
%%% supervisor_bridge_1_1_1_1_2 API
%%% ================================================================================================


%% -------------------------------------------------------------------------------------------------
%% @doc Start the supervisor bridge.
%% -------------------------------------------------------------------------------------------------

-spec start_link() -> {ok, Pid :: pid()} |
          {error, {already_started, Pid :: pid()}} |
          {error, term()} |
          ignore.
start_link() ->
    supervisor_bridge:start_link({local, ?SERVER}, ?MODULE, []).

%%% ================================================================================================
%%% supervisor_bridge callbacks
%%% ================================================================================================


%% -------------------------------------------------------------------------------------------------
%% @private
%% @doc Initialize the supervisor bridge.
%%      Create a supervisor_bridge process, linked to the calling process,
%%      which calls Module:init/1 to start the subsystem. To ensure a
%%      synchronized start-up procedure, this function does not return
%%      until Module:init/1 has returned.
%% @end
%% -------------------------------------------------------------------------------------------------

-spec init(Args :: term()) -> {ok, Pid :: pid(), State :: term()} |
          {error, Error :: term()} |
          ignore.
init([]) ->
    case 'AModule':start_link() of
        {ok, Pid} ->
            {ok, Pid, #state{}};
        Error ->
            Error
    end.

%% -------------------------------------------------------------------------------------------------
%% @private
%% @doc Terminate.
%%      Called by the supervisor_bridge when it is about to terminate.
%%      It should be the opposite of Module:init/1 and stop
%%      the subsystem and do any necessary cleaning up.
%%      The return value is ignored.
%% @end
%% -------------------------------------------------------------------------------------------------

-spec terminate(Reason :: shutdown | term(), State :: term()) -> any().
terminate(_Reason, _State) ->
    'AModule':stop(),
    ok.

%%% ================================================================================================
%%% supervisor_bridge_1_1_1_1_2 Internal functions
%%% ================================================================================================


%%% ------------------------------------------------------------------------------------------------
