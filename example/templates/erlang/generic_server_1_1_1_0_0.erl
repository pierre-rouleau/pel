%%% ------------------------------------------------------------------------------------------------
%%% File      : generic_server_1_1_1_0_0.erl
%%% Purpose   : Testing the template.
%%% Created   : Sunday, May 23 2021.
%%% Author    : Pierre Rouleau <prouleau001@gmail.com>
%%% Time-stamp: <2021-05-23 02:41:58, updated by Pierre Rouleau>
%%% ------------------------------------------------------------------------------------------------
%%% Module Description: Testing the template.
%%%
%%% [
%   This text inside the square brackets is normally NOT generated by the template!
%   It is here only to show the value of the user-options used to generate the content.
%   This file was generated by the test function: pel--erlang-all-sk-file-header
%   This file was generated with the following user-options values:
%   - pel-erlang-skel-use-separators        : t
%   - pel-erlang-skel-use-secondary-separators : t
%   - pel-erlang-skel-insert-file-timestamp          : t
%   - pel-erlang-skel-with-license          : nil
%   - pel-erlang-skel-with-edoc         : nil
%    ]
%%% ================================================================================================
-module(generic_server_1_1_1_0_0).

-behaviour(gen_server).

%% generic_server_1_1_1_0_0 API
-export([start_link/0]).

%% gen_server callbacks
-export([init/1, handle_call/3, handle_cast/2, handle_info/2,
         terminate/2, code_change/3, format_status/2]).

-define(SERVER, ?MODULE).

-record(state, {}).

%%% ================================================================================================
%%% generic_server_1_1_1_0_0 API
%%% ================================================================================================


%% -------------------------------------------------------------------------------------------------
%% Function: Start the server.
%% -------------------------------------------------------------------------------------------------

-spec start_link() -> {ok, Pid :: pid()} |
          {error, Error :: {already_started, pid()}} |
          {error, Error :: term()} |
          ignore.
start_link() ->
    gen_server:start_link({local, ?SERVER}, ?MODULE, [], []).

%%% ================================================================================================
%%% gen_server callbacks
%%% ================================================================================================


%% -------------------------------------------------------------------------------------------------
%% Private function: Initialize the server.
%% -------------------------------------------------------------------------------------------------

-spec init(Args :: term()) -> {ok, State :: term()} |
          {ok, State :: term(), Timeout :: timeout()} |
          {ok, State :: term(), hibernate} |
          {stop, Reason :: term()} |
          ignore.
init([]) ->
    process_flag(trap_exit, true),
    {ok, #state{}}.

%% -------------------------------------------------------------------------------------------------
%% Private function: Handle call messages.
%% -------------------------------------------------------------------------------------------------

-spec handle_call(Request :: term(), From :: {pid(), term()}, State :: term()) ->
          {reply, Reply :: term(), NewState :: term()} |
          {reply, Reply :: term(), NewState :: term(), Timeout :: timeout()} |
          {reply, Reply :: term(), NewState :: term(), hibernate} |
          {noreply, NewState :: term()} |
          {noreply, NewState :: term(), Timeout :: timeout()} |
          {noreply, NewState :: term(), hibernate} |
          {stop, Reason :: term(), Reply :: term(), NewState :: term()} |
          {stop, Reason :: term(), NewState :: term()}.
handle_call(_Request, _From, State) ->
    Reply = ok,
    {reply, Reply, State}.

%% -------------------------------------------------------------------------------------------------
%% Private function: Handle cast messages.
%% -------------------------------------------------------------------------------------------------

-spec handle_cast(Request :: term(), State :: term()) ->
          {noreply, NewState :: term()} |
          {noreply, NewState :: term(), Timeout :: timeout()} |
          {noreply, NewState :: term(), hibernate} |
          {stop, Reason :: term(), NewState :: term()}.
handle_cast(_Request, State) ->
    {noreply, State}.

%% -------------------------------------------------------------------------------------------------
%% Private function: Handle all non call/cast messages.
%% -------------------------------------------------------------------------------------------------

-spec handle_info(Info :: timeout() | term(), State :: term()) ->
          {noreply, NewState :: term()} |
          {noreply, NewState :: term(), Timeout :: timeout()} |
          {noreply, NewState :: term(), hibernate} |
          {stop, Reason :: normal | term(), NewState :: term()}.
handle_info(_Info, State) ->
    {noreply, State}.

%% -------------------------------------------------------------------------------------------------
%% Private function: Terminate.
%%
%% Called by a gen_server when it is about to terminate.
%% It should be the opposite of Module:init/1 and do any
%% necessary cleaning up.
%% When it returns, the gen_server terminates with Reason.
%% The return value is ignored.
%% -------------------------------------------------------------------------------------------------

-spec terminate(Reason :: normal | shutdown | {shutdown, term()} | term(),
                State :: term()) -> any().
terminate(_Reason, _State) ->
    ok.

%% -------------------------------------------------------------------------------------------------
%% Private function: Convert process state when code is changed.
%% -------------------------------------------------------------------------------------------------

-spec code_change(OldVsn :: term() | {down, term()},
                  State :: term(),
                  Extra :: term()) -> {ok, NewState :: term()} |
          {error, Reason :: term()}.
code_change(_OldVsn, State, _Extra) ->
    {ok, State}.

%% -------------------------------------------------------------------------------------------------
%% Private function: Handle status change request.
%%
%% Called for changing the form and appearance of gen_server
%% server status when it is returned from sys:get_status/1,2
%% or when it appears in termination error logs.
%% -------------------------------------------------------------------------------------------------

-spec format_status(Opt :: normal | terminate,
                    Status :: list()) -> Status :: term().
format_status(_Opt, Status) ->
    Status.

%%% ================================================================================================
%%% generic_server_1_1_1_0_0 Internal functions
%%% ================================================================================================


%%% ------------------------------------------------------------------------------------------------
