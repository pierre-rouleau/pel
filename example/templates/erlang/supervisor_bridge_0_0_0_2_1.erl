%%% File      : supervisor_bridge_0_0_0_2_1.erl
%%% Purpose   : Testing the template.
%%% Created   : Sunday, May 23 2021.
%%% @author: Pierre Rouleau <prouleau001@gmail.com>
%%% @copyright Â© 2021, Pierre Rouleau
%%% License   : MIT
%%% ------------------------------------------------------------------------------------------------
%%% @doc Testing the template.
%%%      [
%   This text inside the square brackets is normally NOT generated by the template!
%   It is here only to show the value of the user-options used to generate the content.
%   This file was generated by the test function: pel--erlang-all-sk-file-header
%   This file was generated with the following user-options values:
%   - pel-erlang-skel-use-separators        : nil
%   - pel-erlang-skel-use-secondary-separators : nil
%   - pel-erlang-skel-insert-file-timestamp          : nil
%   - pel-erlang-skel-with-license          : "MIT"
%   - pel-erlang-skel-with-edoc         : t
%    ]
%%% @end
%%% ================================================================================================
-module(supervisor_bridge_0_0_0_2_1).

-behaviour(supervisor_bridge).

%% supervisor_bridge_0_0_0_2_1 API
-export([start_link/0]).

%% supervisor_bridge callbacks
-export([init/1, terminate/2]).

-define(SERVER, ?MODULE).

-record(state, {}).

%%% supervisor_bridge_0_0_0_2_1 API
%%% ===============================


%% @doc Start the supervisor bridge.

-spec start_link() -> {ok, Pid :: pid()} |
          {error, {already_started, Pid :: pid()}} |
          {error, term()} |
          ignore.
start_link() ->
    supervisor_bridge:start_link({local, ?SERVER}, ?MODULE, []).

%%% supervisor_bridge callbacks
%%% ===========================


%% @private
%% @doc Initialize the supervisor bridge.
%%      Create a supervisor_bridge process, linked to the calling process,
%%      which calls Module:init/1 to start the subsystem. To ensure a
%%      synchronized start-up procedure, this function does not return
%%      until Module:init/1 has returned.
%% @end

-spec init(Args :: term()) -> {ok, Pid :: pid(), State :: term()} |
          {error, Error :: term()} |
          ignore.
init([]) ->
    case 'AModule':start_link() of
        {ok, Pid} ->
            {ok, Pid, #state{}};
        Error ->
            Error
    end.

%% @private
%% @doc Terminate.
%%      Called by the supervisor_bridge when it is about to terminate.
%%      It should be the opposite of Module:init/1 and stop
%%      the subsystem and do any necessary cleaning up.
%%      The return value is ignored.
%% @end

-spec terminate(Reason :: shutdown | term(), State :: term()) -> any().
terminate(_Reason, _State) ->
    'AModule':stop(),
    ok.

%%% supervisor_bridge_0_0_0_2_1 Internal functions
%%% ==============================================


%%% ------------------------------------------------------------------------------------------------
