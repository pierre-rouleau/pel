;; -*-no-byte-compile: t; -*-
;;
;; Emacs Customization
;; ===================
;;
;; This file holds customization for Emacs running in terminal mode with
;; several packages already selected.
;;
;; CAUTION:
;;          This assumes that PEL source code is located in ~/projects/pel
;;
;; NOTES:
;; You may want to set the following user-options to identify yourself:
;;
;; - `user-mail-address'
;; - `pel-author-abbrev'
;; - `pel-author-name'
;;
;; ---------------------------------------------------------------------------

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(Man-switches "")
 '(ansi-color-faces-vector
   [default default default italic underline success warning error])
 '(ansi-color-names-vector
   ["#212526" "#ff4b4b" "#b4fa70" "#fce94f" "#729fcf" "#e090d7" "#8cc4ff" "#eeeeec"])
 '(bookmark-default-file "~/emacs_bookmarks")
 '(bookmark-save-flag 1)
 '(bs-default-sort-name "by name")
 '(c-default-style
   (quote
    ((d-mode . "bsd")
     (c-mode . "bsd")
     (c++-mode . "bsd")
     (java-mode . "java")
     (awk-mode . "awk")
     (other . "gnu"))))
 '(centi-assign-key [f5])
 '(clm/log-all t)
 '(column-number-mode t)
 '(command-log-mode-window-size 60)
 '(comment-empty-lines t)
 '(confirm-nonexistent-file-or-buffer nil)
 '(desktop-registry-registry (quote (("pel" . "~/projects/pel"))))
 '(ediff-split-window-function (quote split-window-horizontally))
 '(editorconfig-mode-lighter " 🎛 ")
 '(fill-column 78)
 '(global-command-log-mode t)
 '(hl-line-sticky-flag nil)
 '(ido-cr+-allow-list nil)
 '(ido-cr+-function-whitelist nil)
 '(ido-create-new-buffer (quote always))
 '(ido-enable-flex-matching t)
 '(ido-grid-mode-max-rows 15)
 '(ido-grid-mode-order t)
 '(ido-grid-mode-start-collapsed t)
 '(iedit-toggle-key-default nil t)
 '(imenu-max-item-length nil)
 '(imenu-max-items 75)
 '(imenu-use-popup-menu t)
 '(lispy-visit-method (quote projectile))
 '(lsp-keymap-prefix "<M-f9>")
 '(makefile-electric-keys t)
 '(markdown-preview-eww-waiting-idling-second 0.5)
 '(mc/match-cursor-style nil)
 '(package-selected-packages
   (quote
    (debbugs ido-grid-mode swiper avy gitconfig-mode gitattributes-mode highlight-indentation ztree bm company cwl-mode v-mode yasnippet ivy racket-mode geiser-racket geiser-guile geiser-gambit geiser-chicken geiser-chibi geiser-chez geiser macrostep-geiser nim-mode merlin tuareg caml caml-mode haskell-mode indent-tools smartparens smart-shift treemacs-magit lsp-treemacs treemacs-projectile lsp-ivy treemacs ido-grid osx-plist origami helm-lsp lsp-origami lsp-ui lsp-mode delight dired-git-info dired-hide-dotfiles projectile-speedbar bison-mode gitignore-mode helpful markdown-preview-mode iflipb deadgrep vmd-mode markdown-toc impatient-showdown markdown-mode idomenu sly nix-mode flycheck-plantuml elisp-lint key-seq eopengrok helm-xref ivy-xref rtags-xref gxref dumb-jump desktop+ magit xr auto-highlight-symbol helm-cscope xcscope ggtags windresize monky nhexl-mode relint visual-regexp-steroids visual-regexp pcre2el regex-tool anzu multiple-cursors elmacro lice rainbow-mode ag ripgrep plantuml-mode neotree keycast bind-key free-keys ascii-table expand-region graphviz-dot-mode yaml-mode adoc-mode cargo racer flycheck-rust rust-mode hy-mode lfe-mode clojure-snippets cider clojure-mode suggest eros highlight-defined macrostep rainbow-delimiters julia-snail go-mode forth-mode exunit alchemist elixir-mode erlang d-mode flycheck yasnippet-snippets easy-escape smart-dash fill-column-indicator projectile rg key-chord lispy iedit hydra ace-window flx-ido counsel-osx-app counsel ivy-avy smex ido-vertical-mode ido-completing-read+ helm goto-last-change undo-tree dired-narrow imenu-anywhere ace-link hgignore-mode popup which-key)))
 '(pel-activate-f9-for-greek t)
 '(pel-auto-mode-alist
   (quote
    (("SConstruct" python-mode)
     ("SConscript" python-mode)
     ("/bin/[^.]+\\'" shell-script-mode)
     ("Cask" emacs-lisp-mode)
     ("\\.gdot\\'" graphviz-dot-mode)
     ("\\.sexp\\'" lisp-mode))))
 '(pel-bind-keys-for-regexp t)
 '(pel-browser-used (quote firefox))
 '(pel-c++-class-has-doc-block t)
 '(pel-c++-indentation 4)
 '(pel-c++-skel-use-include-guards (quote with-uuid))
 '(pel-c++-skel-with-license "MIT")
 '(pel-c++-tab-width 4)
 '(pel-c-bracket-style "bsd")
 '(pel-c-function-define-style (quote man-style))
 '(pel-c-function-name-on-first-column t)
 '(pel-c-indentation 3)
 '(pel-c-skel-comment-with-2stars t)
 '(pel-c-skel-function-define-style (quote man-style))
 '(pel-c-skel-function-name-on-first-column t)
 '(pel-c-skel-insert-file-timestamp t)
 '(pel-c-skel-insert-module-sections t)
 '(pel-c-skel-module-header-block-style nil)
 '(pel-c-skel-use-include-guards (quote with-uuid))
 '(pel-c-skel-with-license "MIT")
 '(pel-c-tab-width 8)
 '(pel-clisp-ide (quote sly))
 '(pel-clisp-skel-insert-file-timestamp t)
 '(pel-clisp-skel-with-license t)
 '(pel-cursor-type-when-mark (quote bar))
 '(pel-elisp-activates-minor-modes (quote (show-paren-mode)))
 '(pel-elisp-skel-insert-file-timestamp t)
 '(pel-elisp-skel-with-license t)
 '(pel-elisp-user-specified-targets (quote (defcustom defgroup)))
 '(pel-elisp-user-specified-targets2 (quote ("(interactive")))
 '(pel-erlang-activates-minor-modes (quote (smart-dash-mode)))
 '(pel-erlang-man-parent-rootdir (quote (in-envvar . "PEL_ERLANG_MAN_PARENT_DIR")))
 '(pel-erlang-shell-prevent-echo t)
 '(pel-erlang-skel-insert-file-timestamp t)
 '(pel-erlang-skel-use-end-separators nil)
 '(pel-erlang-skel-use-secondary-separators t)
 '(pel-erlang-skel-with-edoc nil)
 '(pel-erlang-skel-with-license "MIT")
 '(pel-go-tab-width 4)
 '(pel-goto-symbol-completion-function (quote ivy))
 '(pel-goto-symbol-completion-method (quote ido))
 '(pel-imenu-index-follows-order-p t)
 '(pel-indent-tools-key-bound (quote globally))
 '(pel-initial-completion-mode (quote ido))
 '(pel-initial-goto-symbol-UI (quote ivy))
 '(pel-initial-ido-flx-state t)
 '(pel-initial-ido-geometry (quote ido-grid))
 '(pel-initial-search-tool (quote anzu))
 '(pel-kbmacro-prompts nil)
 '(pel-key-chords
   (quote
    ((global "" key-chord "<>" "<>")
     (global "" key-chord "[]" "[]")
     (c-mode "cc-mode" key-chord "{}" "{

}")
     (c++-mode "cc-mode" key-chord "{}" "{

}")
     (global "" key-chord "yu" pel-kc-windmove-up)
     (global "" key-chord "bn" pel-kc-windmove-down)
     (global "" key-chord "	q" pel-kc-indent-rigidly)
     (flyspell-mode "flyspell" key-chord "4r" pel-kc-correct-word-before-point)
     (flyspell-prog-mode "flyspell" key-chord "4r" pel-kc-correct-word-before-point)
     (global "" key-chord "6y" pel-kc-open-at-point)
     (global "" key-chord "6u" pel-kc-browse-filename-at-point)
     (global "" key-chord "7u" pel-kc-browse-url-at-point)
     (global "" key-chord ".;" pel-kc-search-word-from-top))))
 '(pel-mac-voice-name "")
 '(pel-modes-activating-abbrev-mode (quote (emacs-lisp-mode vc-git-log-edit-mode rst-mode)))
 '(pel-modes-activating-align-on-M-RET (quote (c-mode python-mode)))
 '(pel-modes-activating-auto-fill-mode (quote (emacs-lisp-mode rst-mode)))
 '(pel-modes-activating-cscope (quote (c-mode)))
 '(pel-modes-activating-dumb-jump (quote (python-mode)))
 '(pel-modes-activating-lispy
   (quote
    (emacs-lisp-mode racket-mode lfe-mode gerbil-mode scheme-mode lisp-mode arc-mode hy-mode)))
 '(pel-modes-activating-superword-mode
   (quote
    (c-mode c++-mode d-mode erlang-mode elixir-mode python-mode emacs-lisp-mode lisp-mode makefile-mode)))
 '(pel-prompt-accept-y-n t)
 '(pel-rst-activates-minor-modes (quote (auto-fill-mode)))
 '(pel-rst-adornment-style (quote CRiSPer))
 '(pel-rst-skel-with-license (quote only-copyright))
 '(pel-shell-sourced-script-file-name-prefix "\\`envfor-")
 '(pel-smart-shift-keybinding (quote f9))
 '(pel-spell-check-tool "aspell")
 '(pel-startup-xref-front-end (quote xref))
 '(pel-use-ac-geiser nil)
 '(pel-use-ace-link t)
 '(pel-use-ace-window t)
 '(pel-use-ag t)
 '(pel-use-alchemist t)
 '(pel-use-anzu t)
 '(pel-use-applescript t)
 '(pel-use-arc t)
 '(pel-use-ascii-table t)
 '(pel-use-asciidoc t)
 '(pel-use-auto-complete t)
 '(pel-use-auto-highlight-symbol t)
 '(pel-use-avy t)
 '(pel-use-bind-key t)
 '(pel-use-bison-mode t)
 '(pel-use-bm t)
 '(pel-use-c t)
 '(pel-use-c++ t)
 '(pel-use-c-eldoc t)
 '(pel-use-caml-mode t)
 '(pel-use-cargo t)
 '(pel-use-cc-vars t)
 '(pel-use-centimacro t)
 '(pel-use-cexp t)
 '(pel-use-chez t)
 '(pel-use-chibi t)
 '(pel-use-chicken t)
 '(pel-use-cider t)
 '(pel-use-clojure t)
 '(pel-use-clojure-snippets t)
 '(pel-use-command-log-mode t)
 '(pel-use-common-lisp t)
 '(pel-use-company t)
 '(pel-use-counsel t)
 '(pel-use-counsel-osx-app t)
 '(pel-use-cwl-mode t)
 '(pel-use-d t)
 '(pel-use-d-ac-dcd nil)
 '(pel-use-d-company-dcd nil)
 '(pel-use-deadgrep t)
 '(pel-use-debbugs t)
 '(pel-use-delight t)
 '(pel-use-desktop (quote with-desktop+))
 '(pel-use-dired-git-info t)
 '(pel-use-dired-hide-dotfiles (quote hide-dot-files-by-default))
 '(pel-use-dired-narrow t)
 '(pel-use-dired-x t)
 '(pel-use-dumb-jump t)
 '(pel-use-easy-escape t)
 '(pel-use-editor-config nil)
 '(pel-use-edts nil)
 '(pel-use-elixir t)
 '(pel-use-elixir-exunit t)
 '(pel-use-elmacro t)
 '(pel-use-elpy nil)
 '(pel-use-emacros t)
 '(pel-use-emacs-ls-emulation t)
 '(pel-use-emacs-racer t)
 '(pel-use-eopengrok t)
 '(pel-use-erlang t)
 '(pel-use-erlang-flycheck nil)
 '(pel-use-erlang-flymake t)
 '(pel-use-erlang-ls t)
 '(pel-use-erlang-start t)
 '(pel-use-erlang-syntax-check (quote with-flymake))
 '(pel-use-eros t)
 '(pel-use-esup t)
 '(pel-use-expand-region t)
 '(pel-use-ffap t)
 '(pel-use-fill-column-indicator t)
 '(pel-use-find-file-in-project t)
 '(pel-use-flimenu nil)
 '(pel-use-flx t)
 '(pel-use-flycheck-plantuml t)
 '(pel-use-flycheck-rust t)
 '(pel-use-forth t)
 '(pel-use-framemove t)
 '(pel-use-free-keys t)
 '(pel-use-gambit nil)
 '(pel-use-geiser nil)
 '(pel-use-geiser-chez t)
 '(pel-use-geiser-chibi t)
 '(pel-use-geiser-chicken t)
 '(pel-use-geiser-gambit t)
 '(pel-use-geiser-guile t)
 '(pel-use-geiser-racket t)
 '(pel-use-gerbil nil)
 '(pel-use-ggtags t)
 '(pel-use-gitignore-mode t)
 '(pel-use-gleam t)
 '(pel-use-gleam-mode t)
 '(pel-use-go t)
 '(pel-use-goflymake (quote with-flycheck))
 '(pel-use-goto-last-change t)
 '(pel-use-graphviz-dot t)
 '(pel-use-guile t)
 '(pel-use-gxref t)
 '(pel-use-haskell t)
 '(pel-use-haskell-mode t)
 '(pel-use-helm t)
 '(pel-use-helm-cscope t)
 '(pel-use-helm-lsp t)
 '(pel-use-helm-xref t)
 '(pel-use-helpful t)
 '(pel-use-helpful-with-counsel t)
 '(pel-use-hgignore-mode t)
 '(pel-use-hide-comnt t)
 '(pel-use-highlight-defined t)
 '(pel-use-highlight-indentation t)
 '(pel-use-hippie-expand t)
 '(pel-use-hy t)
 '(pel-use-hydra t)
 '(pel-use-ido t)
 '(pel-use-ido-grid t)
 '(pel-use-ido-grid-mode t)
 '(pel-use-ido-ubiquitous t)
 '(pel-use-ido-vertical-mode t)
 '(pel-use-idomenu t)
 '(pel-use-iedit t)
 '(pel-use-iflipb t)
 '(pel-use-imenu+ t)
 '(pel-use-imenu-anywhere (quote ido))
 '(pel-use-imenu-extra nil)
 '(pel-use-impatient-showdown t)
 '(pel-use-indent-tools t)
 '(pel-use-ivy t)
 '(pel-use-ivy-xref t)
 '(pel-use-julia t)
 '(pel-use-key-chord (quote use-from-start))
 '(pel-use-key-seq t)
 '(pel-use-keycast t)
 '(pel-use-lfe t)
 '(pel-use-lice t)
 '(pel-use-lispy t)
 '(pel-use-lsp-ivy t)
 '(pel-use-lsp-treemacs t)
 '(pel-use-macrostep t)
 '(pel-use-macrostep-geiser t)
 '(pel-use-magit t)
 '(pel-use-markdown t)
 '(pel-use-markdown-preview-mode t)
 '(pel-use-markdown-toc t)
 '(pel-use-merlin t)
 '(pel-use-monky t)
 '(pel-use-multiple-cursors t)
 '(pel-use-neotree t)
 '(pel-use-netrexx t)
 '(pel-use-nhexl-mode t)
 '(pel-use-nim t)
 '(pel-use-nix-mode t)
 '(pel-use-ocaml t)
 '(pel-use-org-mode t)
 '(pel-use-osx-plist t)
 '(pel-use-pcre2el t)
 '(pel-use-pel-elisp-defun-navigation t)
 '(pel-use-perl t)
 '(pel-use-plantuml t)
 '(pel-use-popup-imenu t)
 '(pel-use-popup-kill-ring t)
 '(pel-use-popup-switcher t)
 '(pel-use-projectile t)
 '(pel-use-projectile-speedbar t)
 '(pel-use-python t)
 '(pel-use-quack t)
 '(pel-use-racket t)
 '(pel-use-rainbow-delimiters t)
 '(pel-use-rainbow-mode t)
 '(pel-use-re-builder t)
 '(pel-use-recentf t)
 '(pel-use-regex-tool t)
 '(pel-use-relint t)
 '(pel-use-rexx t)
 '(pel-use-ripgrep t)
 '(pel-use-rst-mode t)
 '(pel-use-rtags t)
 '(pel-use-rtags-xref t)
 '(pel-use-ruby t)
 '(pel-use-rust t)
 '(pel-use-rust-mode t)
 '(pel-use-scheme t)
 '(pel-use-sh t)
 '(pel-use-slime nil)
 '(pel-use-sly t)
 '(pel-use-smart-dash t)
 '(pel-use-smart-shift t)
 '(pel-use-smartparens t)
 '(pel-use-smex t)
 '(pel-use-smooth-scrolling nil)
 '(pel-use-speedbar nil)
 '(pel-use-suggest t)
 '(pel-use-swiper t)
 '(pel-use-treemacs t)
 '(pel-use-treemacs-magit t)
 '(pel-use-treemacs-projectile t)
 '(pel-use-tuareg t)
 '(pel-use-tup t)
 '(pel-use-undo-tree t)
 '(pel-use-uniquify t)
 '(pel-use-v (quote v-mode))
 '(pel-use-visual-regexp t)
 '(pel-use-visual-regexp-steroids t)
 '(pel-use-vline t)
 '(pel-use-vmd-mode t)
 '(pel-use-vterm t)
 '(pel-use-which-key t)
 '(pel-use-windmove t)
 '(pel-use-windresize t)
 '(pel-use-winner t)
 '(pel-use-xcscope t)
 '(pel-use-xr t)
 '(pel-use-yaml-mode t)
 '(pel-use-yasnippet t)
 '(pel-use-yasnippet-snippets t)
 '(pel-use-ztree t)
 '(pel-ztree-dir-filter-list (quote ("^.*.pyc" "^.*.elc" "^#.*#" "^.*~$")))
 '(pel-ztree-dir-move-focus t)
 '(popup-imenu-force-position nil)
 '(popup-imenu-max-items 50)
 '(popup-imenu-position (quote center))
 '(popup-imenu-style (quote flat))
 '(projectile-tags-command "ctags -Re -f \"%s\" %s \"%s\"")
 '(projectile-tags-file-name "TAGS-PROJECTILE")
 '(psw-highlight-previous-buffer t)
 '(psw-mark-modified-buffers t)
 '(psw-popup-menu-max-length 50)
 '(py-cc-tab-is-py-indent-region-for-terminal t)
 '(py-electric-colon-active-p t)
 '(py-separator-char 47)
 '(reb-re-syntax (quote string))
 '(regex-tool-backend (quote emacs))
 '(semantic-complete-inline-analyzer-displayor-class (quote semantic-displayor-tooltip))
 '(send-mail-function (quote mailclient-send-it))
 '(speedbar-tag-hierarchy-method nil)
 '(sr-speedbar-right-side nil)
 '(tags-add-tables nil)
 '(tags-table-list nil)
 '(time-stamp-format "%:y-%02m-%02d %02H:%02M:%02S, updated by %U")
 '(tramp-mode t)
 '(truncate-lines t)
 '(undo-tree-mode-lighter " ⎌𐂷 ")
 '(vr/engine (quote pcre2el))
 '(vterm-max-scrollback 10000)
 '(vterm-shell "/usr/local/bin/bash")
 '(woman-fill-column 80)
 '(woman-fill-frame t)
 '(woman-use-topic-at-point t))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-forward :height 3.0))))
 '(bm-persistent-face ((t (:background "color-152" :foreground "black"))))
 '(command-log-command ((t (:foreground "color-25"))))
 '(highlight-defined-macro-name-face ((t (:inherit highlight-defined-function-name-face :foreground "MediumPurple1" :strike-through nil :underline t))))
 '(highlight-defined-special-form-name-face ((t (:inherit highlight-defined-builtin-function-name-face :foreground "sienna1" :slant italic))))
 '(ido-grid-match-1 ((t (:background "color-255" :weight bold))))
 '(mode-line ((t (:background "#eeeeee" :foreground "black" :box (:line-width -1 :style released-button)))))
 '(mode-line-inactive ((t (:inherit mode-line :background "white" :foreground "grey20" :box (:line-width -1 :color "grey75") :weight light))))
 '(pel-cursor-overwrite-mode-color ((t (:background "red2"))))
 '(rainbow-delimiters-base-error-face ((t (:inherit rainbow-delimiters-base-face :foreground "Red"))))
 '(rainbow-delimiters-depth-1-face ((t (:inherit rainbow-delimiters-base-face :foreground "DarkOrchid1"))))
 '(rainbow-delimiters-depth-2-face ((t (:inherit rainbow-delimiters-base-face :foreground "Blue"))))
 '(rainbow-delimiters-depth-3-face ((t (:inherit rainbow-delimiters-base-face :foreground "dark cyan"))))
 '(rainbow-delimiters-depth-4-face ((t (:inherit rainbow-delimiters-base-face :foreground "sienna2"))))
 '(rainbow-delimiters-depth-5-face ((t (:inherit rainbow-delimiters-base-face :foreground "gray54"))))
 '(rainbow-delimiters-depth-6-face ((t (:inherit rainbow-delimiters-base-face :foreground "dark blue"))))
 '(rainbow-delimiters-depth-7-face ((t (:inherit rainbow-delimiters-base-face :foreground "IndianRed1"))))
 '(rainbow-delimiters-depth-8-face ((t (:inherit rainbow-delimiters-base-face :foreground "LightSkyBlue1"))))
 '(rainbow-delimiters-depth-9-face ((t (:inherit rainbow-delimiters-base-face :foreground "burlywood1"))))
 '(whitespace-line ((t (:background "brightblack" :foreground "violet")))))

;; -----------------------------------------------------------------------------
