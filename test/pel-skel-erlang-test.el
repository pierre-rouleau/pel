;;; pel-skel-erlang-test.el --- Test the Erlang Skeletons.  -*- lexical-binding: t; -*-

;; Created   : Sunday, May 23 2021.
;; Author    : Pierre Rouleau <prouleau001@gmail.com>
;; Time-stamp: <2021-05-25 14:46:02, updated by Pierre Rouleau>

;; This file is part of the PEL package.
;; This file is not part of GNU Emacs.

;; Copyright (C) 2021  Pierre Rouleau
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;; --------------------------------------------------------------------------
;;; Commentary:
;;
;;

;;; --------------------------------------------------------------------------
;;; Dependencies:
;;
;;
(require 'pel--options)
(require 'pel-ert)
(require 'cl-lib)

;;; --------------------------------------------------------------------------
;;; Code:
;;

(defun pel--erlang-all-sk-file-header (directory file-base-name extension generator &optional license-name)
  "Generate all supported layouts of the Emacs Lisp templates in DIRECTORY.
Each generated file name use the FILE-NAME-BASE as the base name,
then an extra number patter is added to it to create the file name."
  (let ((base-name (expand-file-name file-base-name directory))
        file-name
        pel-erlang-skel-use-separators           (f1 -1)
        pel-erlang-skel-use-secondary-separators (f2 -1)
        pel-erlang-skel-insert-file-timestamp    (f3 -1)
        pel-erlang-skel-with-license             (f4 -1)
        pel-erlang-skel-with-edoc                (f5 -1)
        (license-name                            (or license-name "gpl-3.0"))
        ;; make sure the Erlang IDEs are not running
        (pel-use-edts nil)
        (pel-use-erlang-ls nil))
    (cl-letf (((symbol-function 'read-from-minibuffer)
               (lambda (prompt &optional
                               _initial-content
                               _keymap
                               _read
                               _hist
                               _default-value
                               _inherit-input-method)
                 (message "The prompt is: %s" prompt)
                 (if (string= prompt "File purpose: ")
                     "testing the template"
                   license-name))))
      (cl-letf (((symbol-function 'lice:read-license)
                 (lambda ()
                   license-name)))
        (dolist (pel-erlang-skel-use-separators
                 (get 'pel-erlang-skel-use-separators :choices))
          (progn
            (cl-incf f1)
            (setq f2 -1)
            (dolist (pel-erlang-skel-use-secondary-separators
                     (get 'pel-erlang-skel-use-secondary-separators :choices))
              (progn
                (cl-incf f2)
                (setq f3 -1)
                (dolist (pel-erlang-skel-insert-file-timestamp
                         (get 'pel-erlang-skel-insert-file-timestamp :choices))
                  (progn
                    (cl-incf f3)
                    (setq f4 -1)
                    (dolist (pel-erlang-skel-with-license
                             (get 'pel-erlang-skel-with-license :choices))
                      (progn
                        (cl-incf f4)
                        (setq f5 -1)
                        (dolist (pel-erlang-skel-with-edoc
                                 (get 'pel-erlang-skel-with-edoc :choices))
                          (cl-incf f5)
                          (setq file-name (format "%s_%d_%d_%d_%d_%d.%s" base-name f1 f2 f3 f4 f5 extension))
                          (message "Testing with %s: %S, %S, %S, %S, %S"
                                   file-name
                                   pel-erlang-skel-use-separators
                                   pel-erlang-skel-use-secondary-separators
                                   pel-erlang-skel-insert-file-timestamp
                                   pel-erlang-skel-with-license
                                   pel-erlang-skel-with-edoc)
                          (find-file file-name)
                          (erase-buffer)
                          (erlang-mode)
                          (funcall generator)
                          (insert (format "[
%%   This text inside the square brackets is normally NOT generated by the template!
%%   It is here only to show the value of the user-options used to generate the content.
%%   This file was generated by the test function: pel--erlang-all-sk-file-header
%%   This file was generated with the following user-options values:
%%   - pel-erlang-skel-use-separators           : %S
%%   - pel-erlang-skel-use-secondary-separators : %S
%%   - pel-erlang-skel-insert-file-timestamp    : %S
%%   - pel-erlang-skel-with-license             : %S
%%   - pel-erlang-skel-with-edoc                : %S
%%    ]"
                                          pel-erlang-skel-use-separators
                                          pel-erlang-skel-use-secondary-separators
                                          pel-erlang-skel-insert-file-timestamp
                                          pel-erlang-skel-with-license
                                          pel-erlang-skel-with-edoc))
                          (write-file file-name)
                          (kill-buffer))))))))))))))


(defun pel--erlang-all-sk-files ()
  "Generate Emacs Lisp skeleton template files with all possible combinations.
Store them inside the pel/test-result/templates/erlang directory."
  (interactive)
  (let ((dir-name (expand-file-name
                   "test-result/templates/erlang" (file-name-directory (locate-library "pel--options")))))
    (dolist (name.gen '(("small_header"       .  pel-erl-small-header)
                        ("normal_header"      .  pel-erl-normal-header)
                        ("large_header"       .  pel-erl-large-header)
                        ("small_server"       .  pel-erl-small-server)
                        ("application"        .  pel-erl-application)
                        ("supervisor"         .  pel-erl-supervisor)
                        ("supervisor_bridge"  .  pel-erl-supervisor-bridge)
                        ("generic_server"     .  pel-erl-generic-server)
                        ("gen_event"          .  pel-erl-gen-event)
                        ("gen_fsm"            .  pel-erl-gen-fsm)))
      (let ((base-name      (car name.gen))
            (code-generator (cdr name.gen)))
        (pel--erlang-all-sk-file-header dir-name
                                        base-name
                                        "erl"
                                        code-generator
                                        "mit")))))

;;; --------------------------------------------------------------------------
(provide 'pel-skel-erlang-test)

;;; pel-skel-erlang-test.el ends here
