;;; pel-skels-generic-test.el --- Test the generic code header skeletons.  -*- lexical-binding: t; -*-

;; Created   : Monday, May 24 2021.
;; Author    : Pierre Rouleau <prouleau001@gmail.com>
;; Time-stamp: <2021-05-24 15:54:08, updated by Pierre Rouleau>

;; This file is part of the PEL package.
;; This file is not part of GNU Emacs.

;; Copyright (C) 2021  Pierre Rouleau
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;; --------------------------------------------------------------------------
;;; Commentary:
;;
;;

;;; --------------------------------------------------------------------------
;;; Dependencies:
;;
;;

;;; --------------------------------------------------------------------------
;;; Code:
;;
(require 'pel--options)
(require 'pel-ert)
(require 'cl-lib)

(defun pel--generic-all-sk-file-header (directory file-base-name extension mode &optional license-name)
  "Generate all supported layouts of the Emacs  templates in DIRECTORY.
Each generated file name use the FILE-NAME-BASE as the base name,
then an extra number patter is added to it to create the file name."
  (let ((base-name (expand-file-name file-base-name directory))
        file-name
        pel-generic-skel-use-separators        (f1 -1)
        pel-generic-skel-insert-file-timestamp (f2 -1)
        pel-generic-skel-with-license          (f3 -1)
        pel-generic-skel-module-section-titles (f4 -1)
        (license-name                        (or license-name "gpl-3.0")))
    (cl-letf (((symbol-function 'read-from-minibuffer)
               (lambda (prompt &optional
                               _initial-content
                               _keymap
                               _read
                               _hist
                               _default-value
                               _inherit-input-method)
                 (message "The prompt is: %s" prompt)
                 (if (string= prompt "File purpose: ")
                     "testing the template"
                   license-name))))
      (cl-letf (((symbol-function 'lice:read-license)
                 (lambda ()
                   license-name)))
        (dolist (pel-generic-skel-use-separators
                 (get 'pel-generic-skel-use-separators :choices))
          (progn
            (cl-incf f1)
            (setq f2 -1)
            (dolist (pel-generic-skel-insert-file-timestamp
                     (get 'pel-generic-skel-insert-file-timestamp :choices))
              (progn
                (cl-incf f2)
                (setq f3 -1)
                (dolist (pel-generic-skel-with-license
                         (get 'pel-generic-skel-with-license :choices))
                  (progn
                    (cl-incf f3)
                    (setq f4 -1)
                    (dolist (pel-generic-skel-module-section-titles
                             (get 'pel-generic-skel-module-section-titles :choices))
                      (cl-incf f4)
                      (setq file-name (format "%s_%d_%d_%d_%d.%s" base-name f1 f2 f3 f4 extension))
                      (message "Testing with %s: %S, %S, %S, %S"
                               file-name
                               pel-generic-skel-use-separators
                               pel-generic-skel-insert-file-timestamp
                               pel-generic-skel-with-license
                               pel-generic-skel-module-section-titles)
                      (find-file file-name)
                      (erase-buffer)
                      (funcall mode)
                      (pel-generic-file-header)
                      (insert (format "[
   This text inside this comment in square brackets is normally NOT generated by the template!
   It is here only to show the value of the user-options used to generate the content.
   This file was generated by the test function: pel--c-all-sk-file-header
   This file was generated with the following user-options values:
   - pel-generic-skel-use-separators        : %S
   - pel-generic-skel-insert-file-timestamp : %S
   - pel-generic-skel-with-license          : %S
   - pel-generic-skel-module-section-titles : %S
    ]"
                                      pel-generic-skel-use-separators
                                      pel-generic-skel-insert-file-timestamp
                                      pel-generic-skel-with-license
                                      pel-generic-skel-module-section-titles))
                      (forward-line -9)
                      (set-mark (point))
                      (forward-line 10)
                      (comment-dwim nil)
                      (write-file file-name)
                      (kill-buffer))))))))))))

(defun pel--generic-all-sk-files ()
  "Generate Emacs  skeleton template files with all possible combinations.
Store them inside the pel/example/templates/generic directory."
  (interactive)
  (let ((dir-name (expand-file-name
                   "example/templates/generic" (file-name-directory (locate-library "pel--options")))))
    (let ((pel-use-d-ac-dcd nil)
          (pel-use-d-company-dcd nil))
      (pel--generic-all-sk-file-header dir-name "example" "d" 'd-mode "mit"))
    (let ((pel-use-flycheck-rebar3 nil))
      (pel--generic-all-sk-file-header dir-name "example" "lfe" 'lfe-mode "mit"))))

;;; --------------------------------------------------------------------------
(provide 'pel-skels-generic-test)

;;; pel-skels-generic-test.el ends here
