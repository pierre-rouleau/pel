PEL -- Pragmatic Environment Library --  NEWS         -*- org -*-

* Changes since version 0.3.1:
** New Features and Improvements:
- New: integrated [[https://github.com/nflath/c-eldoc][c-eldoc]].  In C buffers, the ``<f12> ? e`` key sequence
  toggles c-eldoc mode on/off. I am currently investigating c-eldoc various
  versions trying to improve its performances.  For systems that do not have
  access to a LSP for C/C++ c-eldoc might provide some help even though it is
  limited.
- Update: improved  messages printed by commands that describe state of modes
  such as completion modes, etc...
- Update: *Application Launching*:
  - New: The ``<f11> A`` key sequence is bound to counsel-linux-app on Lix=nux
    systems and to counsel-osx-app on macOS system.  This allows selecting an
    OS application by name to launch it.  The first one is available when
    pel-use-counsel is on and the second when pel-use-counsel-osx-app is on.
- Update: *Comments*:
  - New: command *pel-comment-show-variables* (bound to ``<f11> ; ?``) opens a
    special "\*comment-vars\*" buffer and prints the names and values of all
    Emacs variables used to control the behaviour of comment generation. If a
    prefix is specified it only prints the user option variables (the ones
    that can be customized).
- Update: *Cross Referencing support*:
  - PEL's goals is to provide easy access to multiple indexing and
    cross-referencing systems.  Once a system is enabled via the appropriate
    PEL user option, it is possible to activate its mode or turn it off using
    one of the commands PEL provide.
    - PEL provides the *pel-xref-show-status* command to display the state of
      the indexing/cross-referencing modes.  It is bound to ``<f11> X ?``.  By
      default it prints a message at the bottom of the screen.  When invoked
      with any prefix argument it prints the information inside a
      ``*xref-status*`` buffer.
      - It becomes easy to try different indexing systems; these systems are
        often complementary and often viable alternatives to active Language
        Server systems.  Note that PEL will also support Language Servers and
        will identify good set of tools for each of the programming languages
        it will support.
  - Modified: PEL key binding for *xref-find-apropos*: the new key sequence is
    ``<f11> X a`` instead of ``<f11> X .`` which is now reserved for major mode
    specific specialized cross reference operations.  The 'a' for apropos is
    used in other PEL key sequences, so it's more appropriate even though the
    command is also bound to C-M-. by Emacs.
  - New *xref search of Customization buffer user option variables*:
    - PEL provides the command *pel-xref-find-custom-definition-at-line*.
      This command finds the source of a user-option variable for the symbol
      listed on the current line of a Customize buffer.  The user variable may
      have its name spread like in "Kill Ring Max" or its real variable name
      like "kill-ring-max".  It has several key bindings:
      - It is globally bound to the ``<f11> X c`` key sequence.  However it
        can only be used inside a Customize buffer; if used inside another
        buffer it will report an error.
      - In Customize buffers (buffers in Custom-Mode) the following keys are
        activated:
        - ``<f11> X .``
        - ``M-.`` when the PEL user option
          *pel-bind-m-dot-to-xref-find-custom-definition* is set to *(t*
          (which is its default).
  - Non-xref cross-reference/code indexing packages:
    - New: Added support for [[https://en.wikipedia.org/wiki/Cscope][CScope]] via the external [[https://github.com/dkogan/xcscope.el][xcscope]] and the
      [[https://github.com/alpha22jp/helm-cscope.el][helm-cscope]] Emacs packages.
      - The xcscope package is enabled when the *pel-use-xcscope* user option
        is on (non-nil).
      - When enabled, the ``<f11> X C C`` key sequence toggles the
        xcscope-minor-mode. Automatic activation of xcscope-minor-mode can be
        specified with the *pel-modes-activating-cscope*.  This could be done
        for c-mode, c++-mode and dired-mode.
      - The *pel-use-helm-cscope* user option enables the use of the helm-cscope
        external Emacs package that uses Helm to display CScope matches. It
        also enables the ``<f11> X C H`` key binding to toggle the use of
        helm-cscope-mode and the extra key bindings this mode activates.
    - New: Added support for eopengrok front end to [[https://en.wikipedia.org/wiki/OpenGrok][OpenGrok]], a Java-based
      source code indexing server.
  - New *xref back-end support*:
    - New: Added support for [[https://github.com/jacktasia/dumb-jump][dump-jump]]. The pel-use-dumb-jump activates it for M-.
    - New: Added support for [[https://www.gnu.org/software/global/][GNU GLOBAL]] gtags-based [[https://github.com/leoliu/ggtags][ggtags]]. This includes support
      for [[https://ctags.io][Universal-Ctags]] and [[https://pygments.org][Pygments]] plugins.  Several things must be done
      properly to get this working, a descrption of the required installation
      steps are in the PEL manual (see the manual additions below).
    - New: added support for gxref xref back-end using GNU GLOBAL.
    - In progress: adding support for RTags xref back-end for C/C++ code.
    - New: PEL command to dynamically modify the list of xref back-end functions
      (mapped to the <f11> X B prefix) and to select the xref front-end function
      (mapped to <f11> X F key sequence).  The supported xref back-end include:
      etags, rtags, ggtags,  gxref, xref and dumb-jump.
  - New *xref front-end support* and selection mechanism:
    - New: added support for ivy-xref and helm-xref front-end for xref search,
      allowing selection of xref, ivy-xref or helm-xref display of multi-result
      searches.
  - Updated *help support*:
    - Update: pel-xref-show-status (key sequence <f11> X ?) displays more
      information: it now displays the state of ggtags, dumb-jump, gxref,
      rtags.
    - New: *command log mode* from [[https://github.com/pierre-rouleau/command-log-mode][my forked command-log-mode repo]] is now
      available when the *pel-use-command-log-mode* user option is set to t.
      The commands are bound to the keys following the pel:command-log prefix
      bound to the ``<f11> ? k c`` key sequence.  These commands provide the
      ability to log all key and mouse events in a dedicated window buffer
      showing the key sequence and the executed command by its name.
  - Updated *customization support*:
    - Update: the <f11> X <f3> key sequence provides access to the customization
      buffer of more cross referencing packages. It provides access to dumb-jump,
      eopengrok, etags, eopengrok, ggtags, gxref, xref, ivy-xref, helm-xref,
      ivy, helm, projectile and speedbar.
    - New: shell scripts to create etags-compatible TAGS files in the bin
      directory:
      - [[https://github.com/pierre-rouleau/pel/blob/master/bin/etags-c][etags-c]] creates a etags-compliant TAGS file for C source code
        projects: all .c, .h files.
      - [[https://github.com/pierre-rouleau/pel/blob/master/bin/etags-cpp][etags-cpp]] creates a etags-compliant TAGS file for C++ source code
        projects: includes C files ( .c, .h files) and C++ files (.C .c++ .cc
        .cpp .cxx .H .h++ .hh .hpp .hxx .M .pdb) files.
      - [[https://github.com/pierre-rouleau/pel/blob/master/bin/etags-el][etags-el]] creates a etags-compliant TAGS file for Emacs Lisp projects:
        all .el, .c and .h files. It supports used of compressed files when
        etags is used.
      - [[https://github.com/pierre-rouleau/pel/blob/master/bin/etags-erl][etags-erl]] creates a etags-compliant TAGS file for Erlang and C source
        code projects.  It does not process compressed files.
      - [[https://github.com/pierre-rouleau/pel/blob/master/bin/etags-lisp][etags-lisp]] creates a etags-compliant TAGS file for Common Lisp file
        directory tree.  It supports used of compressed files when etags is
        used.
      - [[https://github.com/pierre-rouleau/pel/blob/master/bin/etags-py][etags-py]] creates a etags-compliant TAGS file for Python source code
        file projects.  It does not process compressed files.
    - New: shell scripts to create CScope database for directory trees of C
      and C++ files:
      - [[https://github.com/pierre-rouleau/pel/blob/master/bin/cscope-c][cscope-c]] creates a CScope database and a cscope-files in the current
        directory for directory tree(s) of C files.
      - [[https://github.com/pierre-rouleau/pel/blob/master/bin/cscope-cpp][cscope-cpp]] creates a CScope database and a cscope-files in the current
        directory for directory tree(s) of C and C++ files.
- Update: *Customization*:
  - New: *pel-auto-mode-alist* user option in the Pel Base Emacs group allows
    user-specified  association of file name pattern to a major mode.  It can
    be used, for example to:
    - select the shell-script-mode for extension-less
      files stored in a directory whose name ends with ``/bin/`` by
      identifying the file pattern as ``/bin/.+\``` and the mode as
      shell-script-mode.
    - select python-mode for [[https://www.scons.org][SCons]] files like Sconstruct and SConscript,
    - or any other association you may wish.  Invalid associations are
      detected and a warning is displayed when Emacs starts.  Association
      to a mode function not bound by the time pel-init has
      completed all loading is considered invalid.
  - New: command *pel-browse-group* which prompts allowing the browsing of the
    customization group tree from any group.  This complements the Emacs
    customize-browse which unfortunately does not prompt.
  - New: added several links to package home pages, user manuals and relevant
    Emacs manuals and sections.
  - New: The ``<f11> - <f3>`` key sequence provides access to the
    customization of the following groups: cua-mode, killing, popup-kill-ring.
  - Modification: new customization group *pel-pkg-for-cut-and-paste* which
    holds pel-use-popup-kill-ring that was previously under the undo group.
- Update: *Cut & Paste*:
  - New: added commands that delete elements, similar to the kill commands.
    These are bound to the pel:delete key prefix, bound to the ``<f11> DEL``
    key sequence.  There is now a delete command equivalent to the kill
    commands.
  - New: added commands to kill and delete the beginning or end of the word at
    point, bound to `<f11> - q`` (for kill) and to ``<f11> DEL q`` (for
    delete).  Same for symbol, using ``,`` instead of ``q``.
  - Update: the command to delete duplicated lines is now bound inside the
    pel:delete key prefix instead of the pel:kill key prefix.
  - New: added command *pel-delete-line* to delete text from point to end
    of line without copying it to the kill ring.  It is bound to ``C-K`` (in
    graphics mode only) and to ``<f11> DEL e`` key sequence.
  - New: added command *pel-delete-from-beginning-of-line* bound to ``<f11>
    DEL a``.
  - Update: the kill and delete commands are no longer allowed in read-only
    buffer.
- Update: *File Management*:
  - New: key binding ``<f11> f M-l`` to find-file-literally``.
  - New: command *pel-show-buffer-file-encoding*, bound to ``<f11> f ?`` that
    shows the encoding of the file in current buffer by opening the *Help*
    buffer showing the value of Emacs variable buffer-file-coding-system.
- Update: *Grep*:
  - New: Added key bindings for [[https://github.com/ggreer/the_silver_searcher][ag]] (the silver searcher) based grep-style
    search.
- Update: *Help*:
  - New: Added a command (<f11> ? e c) to open a local copy of
    one of the [[https://www.gnu.org/software/emacs/refcards/index.html][Emacs PDF reference cards]]. The new *pel-emacs-refcard-dirpath*
    user option identifies a directory where Emacs PDF refcards are stored. If
    you set that user option PEL uses it to locate the Emacs PDF refcards,
    otherwise it attempts to locate it.  Under macOS automatic location often
    works nicely because the Emacs reference cards are stored in PDF format.
    On Linux platforms the refcards are stored in .tex format and PEL does not
    attempt to build or render the .tex files, so its often best to download
    the PDF files, store them in a directory and identify that location in the
    user option.
  - New: key binding to a command to display Emacs executable path: <f11> ? e x.
  - New: key binding to display Emacs up-time (<f11> ? e u).
- Update: *Indentation*:
  - Improvement: to the commands bound to ``<f6> <tab>`` (now
    ``pel-indent-lines``) and `<S-tab>`` (now ``pel-unindent-lines``):
    - The commands now handle a marked region like a region marking all
      touched lines and now longer suffers from a degradation of the marked
      area on subsequent commands.
    - The commands now properly handle the presence of hard tabs in the
      indentation whitespace.  They also automatically tabify or untabify the
      indentation whitespace, conforming to the mode identified by the
      ``indent-tabs-mode`` variable.
- Update: *Key Chords*:
  - New: command *pel-key-chord-describe* (bound to ``<f11> ? k M-K``)
    displays the state of key-chord/key-seq and the key bindings if
    key-chord-mode is active.
- Update: *Navigation*
  - New: ``<f11 M-f>`` binding for pel-forward-syntaxchange-start and
    ``<f11 M-b>`` binding for pel-backward-syntaxchange-start.
- Update: *Programming Language Support -- CC Mode Utilities*
  - Refactoring: Moved cc-mode utilities from pel_keys.el to the new pel-cc.el
    file.
  - Updated: *pel-cc-mode-info* can now be used from any major mode where it will
    display info about non-loaded symbols and features. It also displays more
    information to increase awareness of the active setting:
    - the names of styles for current mode in c-default-style in order of
      presence in the list, the active CC mode style,
    - mode used by the return key.
  - New: command bound to the return key in c-mode, c++-mode and d-mode:
    *pel-cc-newline*. The behaviour of the return key controlled by this
    command can be selected by the PEL user options for each mode as well as
    commands that control the activation of the features dynamically in the
    current buffer.  The features include:
  - Insertion of newline with or without indentation of the new inserted line,
    extension of the comment, with or without alignment of comments,
    assignments in the code block.
    - The selection of the underlying command used to control the line
      insertion defines its main behaviour: one of 3 different commands:
      c-context-line-break, newline or electric-indent-just-newline which
      identifies whether syntactic indentation, continuation of comment or
      plain newline insertion is done.  The selection of the default behaviour
      is done by the PEL user options *pel-c-newline-mode*,
      *pel-c++-newline-mode* and *pel-d-newline-mode* for the respective major
      modes.  The behaviour can also be dynamically changed in the current
      buffer by the new *pel-cc-change-newline-mode** command (bound to
      ``<f12> M-RET``).
    - *pel-cc-newline* command also aligns comments
      and assignments in the above code block is controlled by the variable
      *pel-newline-does-align*.  That variable is turned on (set to t) for modes
      identified in the *pel-modes-activating-align-on-return* user option.
      It can also be modified dynamically by the command
      *pel-toggle-newline-indent-align  which is bound to ``<f11> M-RET``.
  - New: for C and C++ modes, the ``<f12> <f7>`` key sequence opens the list
    of C preprocessor Hydra keys that help navigate across C preprocessor
    directives, hide and how them, etc...
- Update: *Programming Language Support -- C*
  - New: ``<f12> <f12> d`` insert a C pre-processor #define statement.
  - New: ``<f12> <f12> i`` insert a C pre-processor #include statement for
    library files.
  - New: ``<f12> <f12> I`` insert a C pre-processor #include statement for
    local files.
- Update: *Programming Language Support -- Common Lisp*
  - New: user option *pel-clisp-hyperspec-root* to identify the location of
    the LispWorks Common Lisp HyperSpec HTML documentation.
  - New: The ``<f12> <f3>`` key sequence provides access to slime
    customization buffer.
- Update: *Programming Language Support -- Emacs Lisp*
  - New: ``<f12> l v`` binding to ``pel-load-visited-file`` to load the file
    visited in current buffer either by source or its byte-compiled instance.
  - Modification: of the key binding of ``load-file``: changed its key binding
    from ``<f12> e f` to ``<f12> l f``.`
  - New: ``<f12> D`` binding to new command ``pel-add-dir-to-loadpath`` which
    adds a directory to Emacs load-path.
  - New: key binding ``<f12> c a`` to *disassemble*.
  - New: Added command *pel-toggle-paren-in-column-0-is-defun-start* which
    toggles the standard Emacs user option
    *open-paren-in-column-0-is-defun-start*.  This controls the behaviour of
    ``beginning-of-defun`` and ``end-of-defun`` functions: whether a paren in
    the first column is always interpreted as a start of defun, even inside
    strings.
    - **Use this first implementation with care**: it prevents checkdoc from
      completing its verification.
      I am currently trying to fix this.
- Update: *Programming Language Support -- Python*
  - Modified: binding to rainbow-delimiters-mode to ``<f12> M-r`` like it is
    for other programming languages.
- Update: *Navigation*:
  - New: when the new *pel-windmove-on-f1-cursor* user option is set to t, PEL
    activates several key bindings for windows management using the <f1>
    prefix followed by cursor keys sequences:
    - <f1> <cursor> : to move to pointed window.
    - <f1> <C-cursor> : to create window in pointed direction.
    - <f1> <C-S-cursor> : to close window in pointed direction.
    - <f1> <M-cursor> : to resize current window according to the cursor used.
    - <f1> <kp-5> : to balance the size of all windows in current frame.
  - New: when the new *pel-windmove-on-esc-cursor* user option is set to t, PEL
    activates several key bindings for windows management using the *Esc*
    prefix followed by cursor keys sequences:
    - Esc <cursor> : to move to pointed window.
    - Esc <C-cursor> : to create window in pointed direction.
    - Esc <C-S-cursor> : to close window in pointed direction.
    - Esc <M-cursor> : to resize current window according to the cursor used.
    - Esc <kp-5> : to balance the size of all windows in current frame.
  - Update: removed the ``<C-f11>`` binding to pel-previous-visible and
    ``<C-F12>`` to pel-next-visible.  Instead use ``<C-left>`` and
    ``<C-right>``, respectively bound to pel-backward-token-start and
    pel-forward-token-start.  This frees another 2 valuable quick access keys.
- Update: *Process execution*:
  - New: the list-processes command is now bound to ``<f11> x ?`` key sequence.
- Update: *Searching*:
  - Improved: *pel-search-word-from-top* (mapped to ``<f11> s .`` key sequence
    and to the ``.;`` key chord):
    - New: the *pel-search-from-top-in-other* user option controls how
      *pel-search-word-from-top* operates when there is only 2 non-dedicated windows.
      - if set to *t* the function the search in the other window without
        specifying any numeric argument when there is only 2 non-dedicated
        windows.  To search in the current window when there is only 2
        non-dedicated windows use the numeric prefix 3 or 5
        (or either close all other windows or create another window before the
        search making the number of windows 3 and preventing the search in other
        window unless the numeric argument is 0).
      - if the user option is set to nil, then the function always operate the
        same way, regardless of the number of windows: it searches in the
        current buffer unless a numeric argument identifies another window.
    - New: it search for text from marked area; this enables searching for anything,
      not just words.  It is useful in modes where super-word mode is not
      honoured.
    - New: it toggle text mode and search in window selected by a numbered
      prefix in the following ranges:
      - a numbered prefix in the range [10..18] grab the word with subword
        mode temporarily activated and then select the window as if the
        numbered prefix was 0 to 8.
      - a numbered prefix in the range [20..28] grab the word with super-word
        mode temporarily activated and then select the window as if the
        numbered prefix was 0 to 8.
- Update: *Sessions*:
  - New: temporary work-around fix for [[https://github.com/victorhge/iedit/issues/115][iedit bug # 115]] implemented inside
    pel-init to prevent desktop restoration failures when ``iedit-mode`` was
    active in past session being restored.  Waiting for incorporation of [[https://github.com/victorhge/iedit/pull/116][my
    fix]] in iedit.
  - New: added a desktop restoration handler for edts-mode: it protects
    desktop restoration against failures in edts-mode and reports them by
    messages. It also deactivate edts-mode when the mode activation failed.
    This is done to prevent a failed edts-mode from showing it is activated
    when it is not.
- Update: *Skeletons*:
  - Modified: Improved the handling of C-like modes for file header blocks:
    - prevent insertions of empty lines when a file header is inserted in
      non-empty file,
    - terminate C-style comments with 1-star continuation properly.
- Update: *Text Insertion*:
  - Improved: generic file mode/header template insetion (``<f6>
    h``) and separator line insertion (``<f6> l``) now get comment style from
    user if they are not already defined.
- Update: *Text Modes*:
  - New: overwrite-mode is also bound to the <Esc><kp-0> key sequence.  This
    makes it very similar to the default <insert> key which is not available
    in macOS keyboards.
- Update: *Windows*:
  - The Windows Hydra now provides quick access to the
    ``pel-toggle-window-dedicated`` command which toggles the dedicated state
    of a window.
** Modifications:
- Modified key bindings in pel:grep to better organize commands for [[https://github.com/ggreer/the_silver_searcher][ag]] and for
  better regularity.
- The customization group pel-pkg-for-xref is now a child of
  pel-pkg-for-navigation and holds tags based cross-reference build control as
  well as non-tags based such as [[https://github.com/jacktasia/dumb-jump][dump-jump]].
- Code change: renamed pel-tags.el to pel-xref.el to better reflect its nature.
** Reference PDF updates:
+ Update: More consistency in the key binding cell background colors.
+ New: Some of the header cells are coloured to help quickly identify the
  nature of a group of commands inside a long table.  This is mainly used in
  reference tables describing programming language support.
+ Update: [[https://raw.githubusercontent.com/pierre-rouleau/pel/master/doc/pdf/align.pdf][⅀ Align]] better describes handling of indentation on ``M-RET``.
+ Update: [[https://raw.githubusercontent.com/pierre-rouleau/pel/master/doc/pdf/grep.pdf][⅀ Grep PDF]] describes ag and ripgrep menu.  Also references projectile-based
 search commands.
+ Update: [[https://raw.githubusercontent.com/pierre-rouleau/pel/master/doc/pdf/help.pdf][⅀ Help PDF]] better introduces reader to getting help from Emacs and
  PEL.
+ Update: [[https://raw.githubusercontent.com/pierre-rouleau/pel/master/doc/pdf/input-method.pdf][⅀ Input Method]] also includes information about encoding. The ``<f11>
  ? p`` key binding completion allows "encoding" to open that PDF.
+ Update: [[https://raw.githubusercontent.com/pierre-rouleau/pel/master/doc/pdf/indentation.pdf][⅀ Indentation]] better describes handling of indentation on ``M-RET``.
+ Update: C, C++ and D programming language support tables.
+ Update: [[https://raw.githubusercontent.com/pierre-rouleau/pel/master/doc/pdf/pl-python.pdf][𝕻𝔩 - Python]] programming language : listed more commands.
+ Update: [[https://raw.githubusercontent.com/pierre-rouleau/pel/master/doc/pdf/rectangles.pdf][⅀ Rectangles PDF]] better describes how to mark rectangle areas.
+ Update: [[https://raw.githubusercontent.com/pierre-rouleau/pel/master/doc/pdf/search-replace.pdf][⅀ Search/Replace PDF]] describes the superword-mode, subword-mode better, and
  includes description of the projectile commands.
+ Update: [[https://raw.githubusercontent.com/pierre-rouleau/pel/master/doc/pdf/text-modes.pdf][⅀ Text Modes PDF]] describes the superword-mode, subword-mode better, and new
  key binding to overwrite-mode (<Esc><kp-0>).
+ Renamed ⅀ Tags to [[https://raw.githubusercontent.com/pierre-rouleau/pel/master/doc/pdf/xref.pdf][⅀ Xref]]; the PDF will describe several cross-referencing
  mechanisms, not just the tags-based mechanisms.
+ Update: [[https://raw.githubusercontent.com/pierre-rouleau/pel/master/doc/pdf/undo-redo-repeat.pdf][⅀ Undo/Redo/Repeat/Arg]] better describes how to repeat commands.
+ Update: [[https://raw.githubusercontent.com/pierre-rouleau/pel/master/doc/pdf/windows.pdf][⅀ Windows]] now describes the new Esc and <f1> cursor keys to manage
  and navigate across windows.
+ Updates to the Buffer, CUA, Cut & Paste, Marking, Undo PDF reference tables.
** Use Manual Additions and Improvements:
- Added instructions on how to install
  [[https://www.gnu.org/software/global/][GNU GLOBAL source code tagging system]] gtags utility with its [[https://pygments.org][Pygments]] and
  [[https://ctags.io][Universal-Ctags]] plugins to support gtags-based tags management within
  Emacs. This includes a small example shells script: [[https://github.com/pierre-rouleau/pel/blob/master/bin/envfor-gtags][envfor-gtags]].
- Better description of how to write customize tempo skeletons.
** Bug Fixes:
- Fix: Inside Common Lisp buffers, PEL's mechanism to access help and
  customization through the ``<f12> <f1>``, ``<f12> <f2>`` and ``<f12> <f3>``
  failed to open the file or buffer.
  - Root cause: a missing format specifier prevented the error detection
    mechanism to detect a missing entry in the look up table: support for
    lisp-mode was missing, just its alias, common-lisp-mode was present.
    - Lesson Learned: Emacs 26.3 and 27.1 byte compiler as well as elint do
      *not* detect this type of error, at least inside a ``user-error`` form!
      Might need to investigate this, either contribute a fix or find a way to
      detect this kind of coding errors.
      - Probably a good time to schedule a try the [[https://github.com/emacs-elsa/Elsa][Elsa]] static analyzer for
        Emacs Lisp and all that needs to be done to use it (you
        need [[https://github.com/cask/cask][Cask]] to use it).
- Fix: The history prompt was previously failing for ``pel-help-pdf-select``
  and ``pel-open-emacs-refcard`` (which was added after PEL 0.3.1) when input
  completion was set to Helm or Ido/Helm but not for the other input
  completions. This was fixed.
  - Root cause: the completing-read functions were given a symbol for the history
    and relied on the completion-read to create the variable.  That failed in
    helm. The fix is to explicitly create list variables and used them.  The
    docstring of completing-read does not explicitly state that the specified
    symbol must refer to an already existing variable and the code worked fine
    with Emacs default completion, ido and ivy. So I'm unsure as to whether
    there should be a variable or whether there's a bug in Helm. Any,
    explicitly creating the variable is protecting against any issue.
    - Lessons learned:
      - This is an example of the "never ass-u-me" rule where
        even reading the docstring and testing with the existing completion
        engines but not all of them right from the a fresh Emacs session did not
        dissipate uncertainty and left the bug dormant.
      - I will probably need a complete testing system that tries every
        combination of features.  At this point I'm not sure how to build it,
        since PEL is integrating so many Emacs libraries and packages.
        Perhaps I will need a system that would be able to drive the test
        right from Emacs user interface.  But one thing for sure I need to be
        able to execute the various tests in a fresh Emacs session to catch
        these types of bugs.
- Fix: The key binding for the *centi-assign* command identified by
  *pel-centi-assign-key* user option takes effect when pel-init executes as
  opposed to when the centimacro feature is loaded as before, allowing it to
  load the centimacro feature.
- Fix: definitions of PEL key-chord or key-seq properly support the
  identification of a command by its name.
- Fix: Replaced ``pel-insert-c-indent`` by ``pel-indent-lines`` and
  ``pel-unindent`` by ``pel-unindent-lines``.  The new functions handle all
  file types as opposed to only the files with a major mode derived from CC
  mode. They also allow any type of marking which they convert into a
  line-type region mark to allow consecutive execution of the line indent and
  line un-indenting commands.  The region is kept and no longer grows or shrink
  in some scenarios as before.
** Work-Around for Emacs Bugs:
- Emacs 26.3 and 27.1 suffer from [[https://debbugs.gnu.org/cgi/bugreport.cgi?bug=44494][bug 44494]] where etags.el
  xref-location-marker does not handle TAGS references to  .el.gz compressed
  files. This prevents the xref-etags-mode to properly handle those
  references.  I proposed a solution to this problem but until this, or
  another solution is implemented to solve the problem, I implemented my own
  solution, stored it inside the pel-etags.el file to replace the etags.el
  code that fails.  The Makefile does not byte compile that file; it is just
  loaded when the xref-etags-mode starts via a hook.  This file is not
  stand-alone, that's why I don't byte compile it via make.  It can be byte
  compiled when PEL is running if you want but its not necessary.   I will
  remove this file and the hook once the Emacs bug is fixed.
* Version 0.3.1
** Fixes:
  - Spell check control user options and handling now simpler and don't have type
    mismatch that prevent customization buffer to edit the values.
** New Features and improvements:
  - New: In Emacs Lisp mode: new key binding for eldoc-mode: <f12> e
  - New: eldoc-box now available in graphics mode when pel-use-eldoc-box is
    set to *t*. Two new keys in the <f12> for Emacs Lisp mode:
    - <f12> b : eldoc-box-hover-at-point
    - <f12> B : eldoc-box-hover-mode
  - New: user option pel-windmove-on-esc-cursor controls whether PEL binds the
    Esc-cursor keys to windmove commands. It is on by default. Users of
    Org-mode will probably want to turn it off.
** Modifications:
  - Change: vlang-mode.el repo was renamed to vlang-mode.  Updated download
    control code accordingly.
* Version 0.3.0
- This includes slots of cleanups, several new modes, new key
  bindings, better installation procedure, several bug fixes.  I continue to
  consider it a project in early development but only because it's lacking a
  lot of features I'd like to integrate for software development in several
  programming languages.  I am using it continuously though on Emacs 26.3 on
  macOS Mojave and tested on some other platforms:
  - Linux Fedora 32 with Emacs 27.1
  - Linux Mint 20 with Emacs 26.3
  - Linux Ubuntu 20.04 with Emacs 26.3
** Fixes:
  - Fixed distributed custom skeleton code for C.  Updated the example description.
  - *Window flipping commands*: The keys to flip windows horizontally (<f11> w
    h) and vertically (<f11> w v) are now safer.  They now take into account the
    minibuffer and dedicated windows and only operate on the current frame.
  - pel-find-file-at-point properly handle relative file names.
  - popup-kill-ring binding is now <f11> M-y to prevent a clash with PEL's
    yasnippet key prefix (<f11> y).
  - Added missing key-seq loading.
  - Added missing key-chord installation.
  - pel-initial-completion-mode can now be edited properly.  The default value
    is now valid.
  - User Manual fixes:
    - User manual installation now properly references the "/.emacs.d" directory.
      and no longer references the "/.emacs.p" directory.
** New Features and improvements:
  - *New/modified global keys (and commands)*:
    - New: the M-D key binding kill next word(s) and delete white-space after the
      last word killed, bringing the next word just at point.
    - New navigation key sequences:  navigation across windows:
      - The <Esc> key followed by the cursor pointing in the direction of
        the window are now bound to the corresponding wind move command. In graphics
        mode,  the <Esc> key followed by a Shift cursor key pointing in the
        direction of the other frame move point to that frame using the
        corresponding fm command.  This works everywhere except in Org-Mode where
        the <f11> based key sequences can be used instead.  The Esc based movements
        are useful in the active vterm window.
    - New: the M-RET key can be used to align text vertically in some modes.
    - New: the prefix set member key to quickly access customization buffer groups is
      now <f2> instead of <f1>. The prefix set member key <f1> is now used to open
      the local copy of the PDF that describes the topic(s) that manipulate the
      commands executed by the keys under the same key prefix.   This feature,
      along with all hyperlinks allow a user to quickly navigate through the PEL
      documentation inside the PEL manual hosted on Github, the local PDF files
      and the PDF files hosted on Github.
    - New key binding to the customize browsers which allow you to navigate
      the customize data tree:
      - <f11> <f2> B browse the customize tree from the top.
      - <f11> <f2> P B browse the customize tree from the top of the PEL
        customize tree.
    - New: Added a new PEL key map tree for browsing
      - <f11> B N : for NeoTree.  Removed the previous <f11> N  key sequence.
      - <f11> B Z : for ZTree.  Removed the previous <f11> Z key sequence.
      - <f11> B T: for early support of treemacs.  Its support is not complete yet.
    - Modified: the new binding to bm-toggle (<f1> ‘ ‘) is easier to type than
      the old one (<f11> ‘ t)
    - Modified: re-organized the key sequences to provide access to the
      reference PDF, the PEL customization and the Emacs customization buffer
      for topics accessible via a key sequence inside a PEL key-map:
      - The key sequences start with the prefix for the PEL key map and end with
        <f1> for help, <f2> for PEL customization buffer, <f3> for Emacs
        customization buffer.
      - The <f11> <f2> provides access to the commands to access customization
        search:  (c), to the customization buffer option (o) and to a
        customization group (g).
      - The <f11> <f2> E provides access to some Emacs customization groups.
      - The <f11> <f2> P provides access to some of the PEL customization groups
        that are not accessible from a specific PEL key map.
      - The <f11> <f2> SPACE provide access to the programming specific groups
        that do not have a specific key map: this includes lisp for the moment.
      - The <f11> ? p key sequence provide access to all reference PDF files
        (either the local copy or the GitHub-hosted web page) and support tab completion.
    - Modified: more consistent key binding for the PEL customization of
      key-chords: now use:  <f11> <f2> P M-K
    - Modified: PEL Hydras are no longer terminated by typing ‘q’, they are
      terminated by typing <f7>, the same key tart starts it.
      The ‘q’ key is used to execute the quit-window command.  Use it to
      change the buffer seen in the current window. The loading of PEL Hydras is
      no longer time delayed: it’s loaded on demand.
    - Modified: more keys in the window Hydra, pel-∑wnd: q to quit window, b and B to change
      buffer in current window. Also changed the key to kill current buffer: it’s
      k instead of K.
    - Modified: Replaced the "fg" key-chord with a "gf" key-seq.  This is much less likely
      to cause unwanted and surprising point movements to the window at left.
*** New supported Modes:
    - Support for lispy, a modal editing mode for Lisp-like programming languages.
    - Support for lpy, a lispy mode for Python.
    - Support for AsciiDoc via the adoc-mode.
    - Support for external packages that extend Emacs keyboard macro
      support: centimacro, elmacro and emacros.  Both centimacro and emacros
      libraries supported by PEL are forked of the original libraries with bug
      fixes and improvements.
    - Added support for all-the-icons.
      - In text mode it provides arrows for the NeoTree window.
      - In Graphics mode, provides icons for NeoTree, dired, ibuffer and ivy when
        their respective pel-use- user options are activated.
    - Experimental support for vlang-mode: support for the emerging V
      programming language.
    - Experimental support for js2-mode: support for Javascript.
*** Improved behaviour:
    - pel-kbmacro-prompts user option is now off by default to mimic Emacs.
    - Visible bookmarks no longer deferred loaded: loaded on demand: first
      time a bound-key is typed.
    - In graphic mode, the extra keys for windmove are loaded after 1 second instead of 5.
*** Improved commands:
    - The keys to flip windows horizontally (<f11> w h) and vertically (<f11> w v)
      are now safer.  They now take into account the minibuffer and dedicated
      windows and only operate on the current frame.
    - The commands that provide access to the local copy of the reference PDF
      files can also open the Github-hosted PDF file in the system browser.
    - Temporarily set max-specpdl-size to 2000 while running benchmark-init
      commands to handle large set of packages.
*** Improved customization:
    - Regrouped the PEL customization groups.
    - Cleanup PEL customization group hierarchy. Modified key bindings to access
      customization groups to make it easier to remember.
    - New PEL user option for spell checker control: pel-spell-check-tool.  This
      replaces the old one that was used to define the spell checker program for
      several OS.  The new one is simpler to use.
    - It is now possible to identify the major modes that will automatically
      activate the superword-mode and subword-mode: the user options
      pel-modes-activating-superword-mode and
      pel-modes-activating-subword-mode identify the respective modes.
** User Manual changes and additions:
  - Fixed typos in the manual installation instructions: “./emacs.d” is now
    “/.emacs.d”
  - Re-organized the installation sections trying to highlight the commands to
    execute.
  - Added a fast-track section to the installation section, easier to follow
    than the complete sections with all the descriptions.
  - Added copies of several versions of init.el.  They correspond to what is
    needed by the installation steps and are also used in the new *fast track*
    installation instructions.  The files are stored the new example/init
    section of the repository.
  - The installation instructions for new users now recommends the use of
    pel-browse-pel to open the customize tree browser buffer to customize PEL
    the first time it is used.
  - A new section describes the Emacs user options that new users may want
    to set.
  - The repository now provides example of Bash alias commands to use a quick
    keys to launch emacs (see the "example/bin" directory).
** Reference PDF updates:
  - Added hyperlinks in all PDF files.  The See also and title icons are now all links.
  - The help and customize PDFs have a lot of links to the of them PDF pages.
  - Reduced the empty white space in several tables.
  - Added the ➢PEL page that lists all PEL key maps.
  - Added a 𝕻𝔩Ɱ- Lispy PDF with links to lispy quick sheet sections.
  - Added Ɱ AsciiDoc page.
  - The ⅀ Align page describe how to use M-RET to align text vertically
  - Updated the ⅀Customize PDF and ⅀Help PDF wit hall changes in customization
    and access to the reference PDF files.
  - Improved the ⅀Windows PDF with several new links and complete description of ace-window.
  - Completed the ⅀Projectile PDF.
  - Updated  ⅀Input-Completion PDF
  - Identified Esc C- and C-[ C- key sequence alternatives for the for C-M-
    bindings in several locations in the PDFs (but not all yet).
  - Fixed errors and cleaned up several PDFs
- *Code Changes*:
  - pel-autoload.el now uses a pel-autoload macro to provide a more regular,
    cleaner syntax code easier to maintain and possibly for future automatic
    code generation.
* Version 0.2.0
- Lots of updates since version 0.1.0, too many to describe here.
  PEL is still in what I consider an early development phase.
  Although most base features are stable, there's still several rough edges,
  lots of packages and programming languages I want to support are not
  properly supported.
  - I changed the instructions for installations on a new computer.
  - Added lots of cross-reference links between the PDF sheets.
  - Implemented a tempo skeleton generic file header block generation, and
    specialized ones for C, Erlang and reStructuredText files.
  - Support for Erlang and C is mostly complete, but there are several packages
    not supported yet.
  - Added support for sessions, projectile, hiding comments, hiding docstrings.
  - Added ability to automatically download and install packages from some
    non-Elpa compliant web sites (but path of Github) like EmacsAttic and
    EmacsMirror.
  - Support for generation of images using PlantUML and Graphviz Dot directly
    from within Emacs.
  - Support for several ways to deals with keys: Hydras, key-chord and key-seq,
    avy and ace-link.
  - Support for voice dictation under macOS and AppleScript.
  - Support for auto-completion using either auto-complete or company.
  - Support for input completion with Help, Ivy, Ivy/Counsel as well as Ido.
  - Support for bookmark management with bm.
  - Support for virtual-regexp
  - Key bindings to quickly access the customization buffer of several
    customization groups.
  - and more...
* Version: 0.1.1
** new features:
  - rst support: added commands for text emphasis (bold, italic, literal, interpreted).
  - modified keymap: draw is now ``<f11> D``.
  - added support and documentation for diff/ediff (with keymaps ``<f11> d`` and ``<f11> e``.
  - Added support for Magit and Monky and ``<f11> v`` keymap for (D)VCS.
  - Added ``pel-end-of-line`` which helps move before trailing spaces.
  - Documentation: documented autoave & backup
  - Documentation: described limitations in the dual-stage autoloading.
** fixes:
  - navigation: fixed autoloading
* First Version: 0.1.0
- This is the very first version of PEL, the Pragmatic Environment Library.

  - As described in [[https://github.com/pierre-rouleau/pel/blob/master/doc/pel-manual.rst#overview][PEL manual overview]] PEL is a hybrid package.
    It is:
    - a [[https://github.com/pierre-rouleau/pel/blob/master/doc/pel-manual.rst#pdf-document-tables][collection of PDF]] files that document Emacs key bindings that covers
      standard Emacs key-bindings but also the key bindings provided by PEL and
      the external packages PEL uses.
    - an Emacs key binding documentation project
      (see [[https://github.com/pierre-rouleau/pel/blob/master/doc/pel-manual.rst#pel-key-bindings][Key Bindings Documentation]]),
    - a collection of [[https://github.com/pierre-rouleau/pel/blob/master/doc/pel-manual.rst#id26][PEL convenience features]]  which:

      - are implemented in several mostly independent files,
      - have key bindings mostly using the function keys to provide
        key map trees that do not interfere with standard Emacs key bindings,
      - provide access to several other external Emacs packages (see [[https://github.com/pierre-rouleau/pel/blob/master/doc/pel-manual.rst#credits][Credits]])
        but via [[https://github.com/pierre-rouleau/pel/blob/master/doc/pel-manual.rst#pel-customization][PEL Customization]] to selectively configure, enable and activate
        these features.
        - This conforms to the [[https://github.com/pierre-rouleau/pel/blob/master/doc/pel-manual.rst#pel-customization][Emacs easy customization]] system and reduces your
          need to write custom Emacs Lisp configuration code.
  - PEL is distributed via the [[https://github.com/pierre-rouleau/pel][PEL Github repository]] and provides a Makefile to
    automate the compilation and a large part of the installation of PEL and its
    dependencies.
  - PEL is not yet distributed via sites like MELPA but
    [[https://github.com/pierre-rouleau/pel/blob/master/doc/pel-manual.rst#how-to-install-pel][PEL's installation instructions]] should alleviate this problem.

#  LocalWords:  Pygments speedbar gxref rtags ggtags RTags eopengrok
