PEL -- Pragmatic Emacs Library --  NEWS         -*- org -*-

* Changes since Version 0.4.1:
** Modifications, Fixes and Improvements:
- Fix: On Linux and Windows the ~<insert>~ key is now mapped to yank, as
  it's already done for macOS.
- Fix: Several EDTS commands were not autoloaded by EDTS code.  PEL code now
  autoloads them when EDTS is requested.  This includes the EDTS debug, eunit
  and dialyzer commands.
- Fix: *pel-require* can now install and load at run time, not only load-time,
  allowing to write code that use external packages to install them only when
  required.  There is still one issue left: the package installed this way
  will be removed by *pel-cleanup*: will need to add a mechanism to take this
  type of installation into account.
- Modified: key bindings to toggle EDTS: it was bound to ~<f12> M-E~ (or its
  equivalent ~<M-f12> M-E~).  It is now bound to ~<f12> M-E M-E~ (and its
  equivalent and easier to type ~<M-f12> M-E M-E~).
- Modified: key bindings for other EDTS commands, which are now in the
  ~<f12> M-E~ key prefix: *edts-buffer-node-name*, *edts-api-start-server*,
  *edts-shell*.
- Improved:  [[https://raw.githubusercontent.com/pierre-rouleau/pel/master/doc/pdf/pl-erlang.pdf][ùïªùî© - Erlang PDF]] by moving EDTS-specific commands related to
  Erlang shell and help inside their topic specific area of the file instead
  of leaving them inside the EDTS-specific area.  Also added information on
  limitations of some of the help commands.
- Fix: activation of *flyspell-prog-mode*: the old code was invoking the
  flyspell-prog-mode with 1 argument but the function takes none.
  - Key binding conflict between flyspell and iedit is now done by a function
    stored inside the pel-ispell-iedit.el as opposed to being inside
    the pel_keys.el file.
- Improved: support for *flyspell-mode* and *flyspell-prog-mode*:
  - Add ability to prevent automatic activation of flyspell-mode and
    flyspell-prog-mode: the *pel-spell-prevent-flyspell* user-option can be
    set to prevent activation of the automatic spell checking.  This is useful
    if someone wants to reduce CPU load and also when debugging the spell
    checking mechanism when you don't want automatic activation of the modes
    when opening a new buffer.
  - The *pel-spell-show-use* now display whether flyspell-prog-mode is active.
    It also shows whether the flyspell-mode and flyspell-prog-mode automatic
    activation is prevented.
- Improved: accessibility to correct word at point: the ~<f11> $ $~ key
  sequence is now bound to *flyspell-correct-word-before-point*.
- Improved: spell checking dictionary management to prevent failures in
  aspell: the ~<f11> $ D~ key sequence is now bound to the new command
  *pel-spell-change-dictionary*.  The command changes the base dictionary but
  also prompts for and change the personal dictionary to ensure both use the
  same natural language.   Emacs ispell.el identifies both dictionaries in its
  aspell command and they must both use the same natural language otherwise
  aspell fails.
- Improved: the *pel-spell-show-use* command display the file name of the
  personal dictionary.
- Modified: Replaced *pel-spell-check-personal-dictionary* by
  *pel-spell-personal-dictionary-directory*.  Instead of defining the name of
  the personal dictionary, PEL now only identifies the directory where all
  personal dictionary files are stored.  Each of them has a name that
  identifies the 2 or 3 letter language code and has the ".ispell" file
  extension.
- Fix: *pel-spell-show-use* no longer display more than 1 line of the spell
  checker identification text.
- Fix: *pel-insert-filename* with no prefix argument or with prefix argument
  of 1, identifies the current window.
- Improved: key bindings for the navigation commands in C, C++ and D: they now
  all have access to the ~<f12> <CURSOR>~ key bindings to move point to
  beginning/end next/previous function.
- Improved: the key bindings of the abbreviation commands: add bindings for
  the *define-global-abbrev* and *define-mode-abbrev* commands.   Also
  modified the bindings for *list-abbrevs* and *edit-abbrevs* and renamed
  *pel-define-abbrevs* to *pel-extract-abbrev-definitions*.
- Improved indentation control and diagnostic for CC mode buffers: C, C++ D:
  - Add the *pel-cc-set-indent-width* command, bound to the mode's ~<f12> TAB~ key sequence.
    This command changes the indentation for the current buffer, overriding the value set
    by *pel-c-indent-width* in C, *pel-c++-indent-width* in C++ and *pel-d-indent-width* in D buffer.
- Improved support for C/C++/D style guessing by adding key bindings for those commands.
  They are accessible under the ~<f12> <f4> g~ key prefix.
  These commands are quite useful when editing code that was originally
  written by someone that does not use the same style of C/C++/D code you have
  identified in your defaults.  You can use a command to parse the code and
  set the style to what is used in the file and then the commands use that
  style.
- Modified the key binding for the commands that change the style behaviour of
  for C, C++ and D.  These commands are now bound under the ~<f12> <f4>~ key
  prefix.  This frees more keys under the ~<f12>~ key prefix for future
  editing commands while regrouping the dynamic configuration commands under the
  ~<f12> <f4>~ prefix; it will be used more often in other major modes.
- Improved *pel-toggle-scroll-sync* command: it now accepts the numeric arguments 2, 4, 6 and 8
  which can be used to identify the window below, at the left, at the top or
  at the right, respectively, of the current window.  This provides more
  flexibility on the selection of the /other/ window.
** New Features:
- Added support for Erlang code formatters. The new
  *pel-erlang-code-formatter-command* user-option specifies the Erlang code
  formatter to use.  The Erlang code formatter can be specified by a command
  line format string or by name.  Currently the only Erlang Code formatter
  supported by name is [[https://github.com/WhatsApp/erlfmt#readme][erlfmt]].  Others can be used but the command line must
  be written explicitly.  The ~<f12> R~ key is bound to the
  *pel-erlang-format-code* command that invokes the specified Erlang code formatter.
- The latest version of timelog supports the *timelog-open-file* command.  It
  opens the file identified by the *timeclock-file* user-option.  PEL binds
  this command to ~C-x t l f~ key sequence.
- Add preliminary support for the *go-translate* package when
  *pel-use-go-translate* user option is turned on.  No key binding or
  activation done yet. This is only available for Emacs 27.1 and later.
- New command for C buffers: the *pel-c-comment-dwim* command, bound to the
  standard ~M-;~ key,  extends the standard comment-dwim command: it is able
  to create multi-line C comments using the 1 or 2 stars continuation comment
  style.  The behaviour is selected by the new *pel-c-multiline-comments*
  user-option, which defaults to the standard behaviour and creates one
  comment per line.  Change that value to create multi-line comments instead.
- Explicit support for the *electric-pair-mode*:
  - Add key binding ~<f11> M-e~ to *electric-pair-local-mode*.  This allows quickly
    toggling the *electric-pair-mode* for the current buffer activating the ability
    to type in the pair of characters activated by the mode.  In CC modes and several
    programming modes that's all the /parens/ characters.
  - Also add the *pel-electric-pair-lighter* user-option(which defaults to " ‚Ñá‚íß ")
    to specify a mode-line lighter for the *electric-pair-mode*.
- In *Org-Mode* markup text-emphasis electric keys via an extended *electric-pair-mode* is now activated
  when the *pel-org-use-electric-markup* user-option is turned on.  When this
  is activated the ~*~, ~/~, ~_~, ~=~, ~~~ and ~+~ keys are electric and are
  inserted in pair and added at both end of a marked area.
  - This behaviour can be toggled with the ~<f11> M-e~ key to execute the
    *electric-pair-local-mode* command which disables the electric behaviour
    of the keys in the local buffer.  Also note that when the electric
    behaviour is active the mode-line lighter specified by
    *pel-electric-pair-lighter* (defaulting to " ‚Ñá‚íß ") is shown.
- New key binding in *Org-mode*: ~<f12> TAB~ is now bound to *org-indent-mode.*
- New C and C++ support for open file at point: in C and C++ it is now
  possible to specify a new method to find C/C++ header file search:
  - The new *pel-c-file-finder-method* and *pel-c++-file-finder-method*
    user-options specify the file search method used by the command
    *pel-open-at-point*. These provide the following file search methods
    specialized for C and C++ projects.  You can select from the following:
    - A /generic project tree  file search/ method.  This is the default and
      corresponds to the default search mechanism where the parent root directory is
      first identified from the presence of a parent identified file, one of
      the files specified in the *pel-project-root-identifies* user-option.
      The file is searched inside that directory tree.
    - The /pel.ini file/ method.  The file named ~pel.ini~ is searched into
      the project directory tree.  This file must be a .INI configuration file
      and must contain the =[file-finder]= section.  The section must contain
      the /project-path/ key that holds a list of directories.  It may also
      define another key for extra directories to search when the name of the
      key is set inside the *pel-c-file-finder-ini-tool-name* (for C files)
      and the *pel-c++-file-finder-ini-tool-name* (for C++ files).  This
      allows you to select extra directories specific to a compiler tool
      chain and/or extra libraries.  You can use the new
      *pel-cc-set-file-finder-ini-tool-name* command to change the value of
      the *pel-CC-file-finder-ini-tool-name* (where CC is either 'c' or 'c++
      depending of the major mode where you issue the command).  This allows
      you to find the file a compiler/library setup would use and try another
      one, without having to set the compilation environment.
      The directories in the ~pel.ini~ file defined lists can also refer to
      environment variables using the =$VARNAME= syntax extending the
      portability of the configuration.
    - With the /environment variable/ method you identify the name of an
      environment variable that holds the list of directories to search. Use
      this method when editing from a shell which uses an environment variable
      like =INCLUDE= or =INCLUDE_PATH= that defines the list of directories to search.
      The directories in these lists can also refer to environment variables
      using the =$VARNAME= syntax.
    - The last method is an explicit list of directories stored inside the
      user-option.
- When *pel-use-ini* user -option is on, the ini.el package forked from a
  smaller package written by Daniel Ness is installed in the utils directory.
  It is also installed when the ~pel.ini~ method of identifying searched C/C++
  files is used.
- Add the *pel-ini* file which provides the *pel-ini-load* and *pel-ini-store*
  functions that load a .INI file into a alist and vice versa.  The functions
  install the required *ini* external package if missing.  The external
  package used is a fork of the original ini package: the fork supports a
  wider .INI file syntax and support multi-line (list) values.
* Version 0.4.1:
** Modifications:
- Fix: The File Management PDF now describes PEL's ability to select the
  function used opening the recently opened files and properly describes the
  key bindings that are inside the ~<f11> f M-r~ key prefix.
- Modified: modeline commands key binding:
  - changed the *pel:modeline* prefix from ~<f11> M-l~ to ~<f11> M-d~
    to make room for outline commands. The ~<f11> M-l~ is now bound to the
    outline-minor-mode command. Modified the key binding s to access the PEL
    PDF, the customization buffers accordingly.
- Removed global key bindings ~<f6> n~ and ~<f6> p~ to
  *pel-beginning-of-next-defun* and *beginning-of-defun*.  Kept the other
  bindings for these commands including in the ~<f6>~ key prefix.
- Modified: key binding for the *bm-next* command: instead of ~<f2>~ it is
  now ~<f2> <f2>~. It is not difficult to remember and type and restore
  access to Emacs default key bindings to the 2C-two-columns,
  2C-associate-buffer and 2C-split commands.
- Renamed: pel-imenu-dbg-print-vars to pel-imenu-print-vars for consistency.
- Modified: Removed the ~<f12> M-t~ key binding to Go-specific command
  *pel-go-set-tab-width*.  It was replaced by a globally available
  ~<f11> M-t~ key binding to the *pel-set-tab-width* that has the same behaviour
  but can be used to modify the display rendering of hard tabs in all major modes.
- Modified: key bindings to start Erlang EDTS: it was ~<f12> M-SPC~ and is now ~<f12> M-E~.
** New Features and Improvements:
- Improved: *pel-open-at-point* is now able to search for files inside the
  current project, and can be specialized to have different searching
  capabilities for different major modes.  It also supports processing a
  glob-style file name. When finding more than one file it prompts for the
  file to open. The various new capabilities are controlled by the following
  user-options and dynamically bound variables:
  - User-options:
    - *pel-project-root-identifiers*: lists the name of files used to identify
      the root of the project of the file in the current buffer: the default
      is the files /.git/, /.hg/ and /.pel-project/.
    - *pel-ffind-executable*: the command line program used to search for
      files: either find or fd.
    - *pel-prompt-read-method*: the prompt mechanism used to prompt user when
      more than one file found.  PEL currently supports a crude prompt
      mechanism by default, but also support the *ivy-read* vertical prompting
      function.
  - Dynamically bound local buffer variable:
    - *pel-filename-at-point-finders*: A list of functions used to find files
      using whatever criteria deemed necessary.  PEL sets this globally to the
      function *pel-generic-find-file* which finds file in the current project
      according to the files identified by *pel-project-root-identifiers*.
      - PEL supports specialization of the file finding mechanism for major-mode:
        simply set *pel-filename-at-point-finders* to another file finding
        function, or append or add a new file function function to that list.
        - For example, PEL sets *pel-filename-at-point-finders* to
          =`(pel-erlang-find-file)=. That function searches the file in the
          Erlang root directory tree as well as inside the current project.
- The ~<f12>~ and ~<M-f12>~ key prefixes are now available in Custom-mode buffers.
- New: The ~<M-f11>~ key is now used as the =pel2:= key prefix.  Generic
  commands that have corresponding major-mode specialized commands are bound
  to the same key sequence into the ~<M-f12>~ key prefix making it easier to
  remember both set of command bindings.  The generic commands are also often
  available under the ~<f11>~ (=pel:=) prefix.
- New: explicit support for time tracking:
  - New: When the *pel-use-timeclock* user-option is t, the timeclock commands
    are bound to the ~C-x t~ key prefix.
    - New: When the *pel-use-timeclock-timelog* is also turned on,an updated
      version of timelog.el is installed.
  - New: [[https://raw.githubusercontent.com/pierre-rouleau/pel/master/doc/pdf/time-tracking.pdf][‚ÖÄ Time Tracking PDF]]
- New: Add ability to differentiate ~M-b~ from ~<M-left>~ and ~m-f~ from ~<M-right>~ on
  Emacs running in terminal mode on a macOS Terminal.app application: the
  Terminal.app must be setup to issue the ~Esc Y~ when Option-left is typed
  and ~Esc Z~ when Option-right is typed.  Then the
  *pel-map-meta-left-right-to-Y-Z* user-option must be set to t.  That forces
  PEL to bind ~M-Y~ to what should be bound to ~<M-left>~ and ~M-Z~ to
  what should be bound to ~<M-right>~ simulating the keys.
- New: When *pel-move-window-on-esc-cursor* user-option is t, the four ~ESC <CURSOR>~ keys
  are bound to windmove commands instead of org-meta commands inside the org buffer.
  Previously they were bound to the org-meta commands making navigation out of org buffer
  different than from the other buffers, a surprising behaviour.
- Modified: The *pel-xref-toggle-dumb-jump-mode* command, bound to ~<f11> X B D~,
  now toggle the activation of dumb-jump as a xref back-end inside all buffers
  using the same major-mode instead of only the current buffer as it was doing before.
  The command now accepts a prefix argument; if the command is issued with a prefix
  argument then only the use of dumb-jump as a xref back-end is only toggled
  for the current buffer.
- New: the *pel-set-tab-width* command is now available through the
  ~<f11> M-t~ key sequence to modify the display rendering of hard tabs in text for
  all major modes in the editing session.
- Improved: the *pel-package-info* command identifies and prints the number of Elpa-compliant
  and other packages PEL is able to download and install.
- New key bindings for activating outline modes:  the ~<f11> M-l~ key sequence is now bound
  to *outline-minor-mode* and ~<f11> M-L~ is bound to *outline-mode*.
- New: key bindings for the outline minor mode under the ~<f2>~ key
  prefix. These key bindings use only an extra key that does not require modifier.
  Also added binding to the *pel-outline-print-vars* command to
  ~<f2> ?~ and   ~<f11> ? e o~.  The info shown describes how the outline mode
  extracts the information for outlining purpose.
- New: add support for outshine-mode when the *pel-use-outshine* user-option is turned on.
  Currently experimental and not fully integrated: outshine generates several
  byte compiler warnings that need to be resolved.  Its code is relatively old
  (2019) and probably requires attention.  It also needs integration documentation
  inside PEL which is not done yet.
- New: add support for rfc-mode when the *pel-use-rfc-mode* user-option is
  turned on.  Provides ~<f11> B r~ binding to *rfc-mode-read* and
  ~<f11> B R~ to *rfc-mode-browse*.
- New: key binding to the *pel-help-pdf-select* command used to access PEL
  local or web-based PDF help pages: ~<f11> p~.
- New: key binding ~<f11> ? e .~ to *pel-syntax-at-point* command that also
  list the text properties of the character at point identified by the new
  *pel-syntax-text-properties* user-option.
- New: The ~C-x g~ key binding for Magit is no longer replaced by PEL's
  ~<f11> v g~ key binding for the *magit-status* command: both bindings are
  active when Magit is available.
- New: *pel-vcs-toggle-vc-log* command, bound to ~<f11> v l~.
  Toggle the logging of VC back-end commands in the `*pel-vc-log*` buffer.
- New: [[https://raw.githubusercontent.com/pierre-rouleau/pel/master/doc/pdf/vcs-git.pdf][‚ÖÄ VCS-Git ùîõMagit PDF]]
- New: key prefix ~<f11> d e R~ for the ediff-registry commands.
- New: support for the built-in *smerge-mode* activated by the new *pel-use-smerge*
  user-option. If its value is set to /auto/ then /smerge-mode/ is
  activated automatically in files that are annotated with diff strings.
  PEL maps the smerge-mode keys to ~<f11> d s~ key prefix.  These keys are
  in addition to the native key bindings.  The *pel-use-smerge* user-option
  is located inside a new group: *pel-pkg-for-diff-merge*.
- New: Add *pel-activates-global-minor-modes* user-option to activate global minor-modes.
- New: Add support for [[https://github.com/michael-heerdegen/interaction-log.el][interaction-log]] external package, when the
  *pel-use-interaction-log-mode* is turned on.  The key bindings use the
  ~<f11> ? k i~ key prefix.
- New: PEL now generates warnings when a global minor mode is requested by one
  of the user-options that should only request the activation of /local/
  minor-mode globally.  It also generates warnings when activation of /global/
  minor-mode for a specific major-mode.
- New: Add support for the [[https://github.com/browse-kill-ring/browse-kill-ring#readme][browse-kill-ring]]
  external package when the *pel-use-browse-kill-ring* user-option is set to t.
- New: Better control over the electric behaviour of newline, colon, semicolon
  and greater-than key for Erlang.  PEL now provides the
  *pel-erlang-electric-keys* user-option which controls the electric behaviour
  of these keys.  The default activates the electric behaviour of the 4 keys
  (which includes the newline, which by erlang.el does not activate by default).
  PEL also provides 4 commands that can be used to dynamically toggle the
  electric behaviour of these keys.  The commands are mapped under the
  ~<f12> ~~ key prefix.
- New: Add `M-R` global key binding to *re-search-backward*.
- New: Add access to the electricity custom group to the ~<f12> <f3>~ key
  sequence  of several programming languages as it allows selecting the block
  character that trigger the insertion of the matching pair controlled by the
  *electric-pair-local-mode* which can be activated automatically by adding it
  to the PEL language-specific mode ``MMM`` in *pel-MMM-activates-minor-modes*.
  PEL does not, however yet explicitly support the mode.
- Improve: smart-dash support: when used, the smart-dash-mode no longer
  prevents the ~<kp-subtract>~ key from being used for *pel-kp-subtract*
  allowing that key to insert hyphen when the keypad NumLock is on and
  act dash insertion when no area is marked ans as a marked-area kill otherwise.
- New: experimental support for the [[https://en.wikipedia.org/wiki/YANG][YANG modelling language file]] using yang-mode
  and outline mode.  Add the [[https://raw.githubusercontent.com/pierre-rouleau/pel/master/doc/pdf/yang.pdf][‚ìà YANG PDF]].
- New: Experimental support for the [[https://janet-lang.org][Janet Programming language]] when
  ``pel-use-janet`` and other PEL user-options are turned on
  (``pel-use-janet-mode``, ``pel-use-ijanet`` and ``pel-use-inf-janet``).
  The ``pel:for-janet`` prefix is bound to ~<f11> SPC T~ which maps to
  ~<f12>~ inside /.janet/ files.  Includes support for iMenu and Speedbar.
  - Add a [[https://raw.githubusercontent.com/pierre-rouleau/pel/master/doc/pdf/pl-janet.pdf][ùïªùî© - Janet PDF]].
- Improve: *Erlang support*:
  - Improved: *pel-open-at-point* is now able to search for files inside the
    current Erlang project and inside the Erlang root directory (the Erlang
    library).  PEL detects the location of the Erlang root directory with the
    provided erlang-root-dir Erlang script (see next).
  - New: [[bin/erlang-root-dir][bin/erlang-root-dir]] Erlang script detects and returns Erlang‚Äôs root directory.
  - Improved: [[bin/version-erl][bin/version-erl]] script longer prints SASL progress information when
    older versions of Erlang are used.
  - New: add support for ivy-erlang-complete external package when
    *pel-use-ivy-erlang-complete* user-option is turned on (t).
  - New: add support for the company-erlang external package when
    *pel-use-company-erlang* user-option is turned on (t).  This also
    automatically activates pel-use-company user-option that activates the
    company completion external package.
  - New: add support for erlstack-mode when *pel-use-erlstack-mode* user-option
    is turned on.
  - New: Add smartparens support when *pel-use-smartparens* is turned on.
    Automatically activate smartparens support for Erlang by adding
    `smartparens-mode` to the list of *pel-erlang-activates-minor-modes*.
    - New: Fixed behaviour of some of the smartparens code transformation functions
      by using the post processing capability provided by smartparens sp-pair
      definition mechanism but also by creating function wrappers to overcome
      the current limitations of smartparens pre-handlers and post-handlers.
    - New: Add automatic pairing of `<< >>` to smartparens-mode used in erlang-mode
      buffers. Also add navigation across these pairs by replacing *forward-sexp*
      by *pel-erlang-forward-sexp* and *backward-sexp* by
      *pel-erlang-backward-sexp*.  The PEL commands use the same bindings and
      handle the Erlang ~<< >>~ bit syntax pairs, something the erlang-mode
      does not do by itself.
    - New: Improved management of display rendering of hard tab characters and
      control of hard tab insertion:  the new *pel-erlang-tab-width*
      user-option controls the display rendering of hard tabs located inside
      Erlang source code, and the *pel-erlang-use-tabs* user-option controls
      whether indentation inserts hard-tabs in Erlang source code.
    - New: Improved electric key behaviour for Erlang:
      - Selection of which key gets electric behaviour is controlled by the
        *pel-erlang-electric-keys* user-option which includes comma, >,
        newline, period and semicolon by default. The period electric
        behaviour is a PEL feature.
      - Electric behaviour of the '>' character is modified.  The erlang-mode
        prevents its electric behaviour of automatic insertion of a indented
        newline after insertion of '->' when the next line has code.  PEL
        removes this restriction and adds the ability to insert '->' without
        electric behaviour by simply typing '-.' when the electric behaviour
        of the period is activated in the current erlang buffer.  This allows
        very effective selection of non-electric or electric behaviour by
        either typing '-.' or '->' to insert just '->' or '->' followed by
        indented line. Other mechanism to disable the electric behaviour of
        the key are provided by PEL:
        - Type ~M-~ before the key inhibits its electric behaviour of the
          next typed key.
        - Toggle electric behaviour of '>'` or '.' in the current erlang
          buffer or all erlang buffers for the current session of a key as
          described below.
      - Electric behaviour of newline, >, comma, period and semicolon can be dynamically
        toggled by using the ~<M-f12> M-`~ prefix followed by the specific
        key.  That toggles the electric behaviour in the current erlang buffer
        for the current editing session.
        To toggle the electric behaviour for all erlang buffers for the current
        editing session type ~M-- <M-f12> M-~ followed by the key.
      - When the *pel-erlang-space-after-comma-in-blocks* user-option is turned on,
        and when the comma electric behaviour is active, a space is
        automatically inserted after a comma typed inside a "parens" block.
        - The automatic insertion of space after of comma can be toggled:
          - just for the current insertion by typing ~M-1 ,~
          - for the editing session by turning off the automatic insertion of
            space after a comma in parens:
            - in the current erlang buffer by typing ~<M-f12> M-` M-,~
            - for all erlang buffers by typing ~M-- <M-12> M-` M-,~
          - for the editing session by turning the electric behaviour of the
            comma key for the current erlang buffer by typing ~<M-f12> M-` ,~,
            or for all erlang buffers by typing ~M-- <M-f12> M-` ,~.

    - Enhance [[https://raw.githubusercontent.com/pierre-rouleau/pel/master/doc/pdf/pl-erlang.pdf][ùïªùî© - Erlang PDF]]:
      - Add description of the electric behaviour of keys in erlang-mode
        buffers.
      - Describe behaviour of the smartparens navigation and code transformation
        commands in erlang-mode buffers.
- Fix: typo describing character class in the Emacs regexp syntax of the
  [[https://raw.githubusercontent.com/pierre-rouleau/pel/master/doc/pdf/search-replace.pdf][‚ÖÄ  Search/Replace PDF]].
  Also better described *pel-replace-regexp*.
- Change: The key prefix for smartparens startup commands changed from
  ~<f11> i (~ to ~<f11> (~.
** Bug Fixes:
- Fixed invalid description in the Customize PDF first page rows 3, 4 and 5
  duplicating information correctly provided in later rows about dual
  configuration.  That section now describes how to customize the
  customization as it should have been.
- Fixed generic skeletons for programming languages that use end comment
  strings such as C, Pascal and several others.  For those the *generic*
  templates creating comments, such as the header template bound to ~<f6> h~
  and the command to insert a single commented separating line, bound to
  ~<f6> l~ were not terminating the comments.  The language specific
  templates for C, C++ (when using the C-style comment style) were not affected.
* Version 0.4.0:
** New Features and Improvements:
- New: unified cross reference commands for Erlang.  The ~M-.~ ~M-,~ keys
  are bound to PEL commands that dispatch the cross reference command to find
  the definition of Erlang identifier at point and go back using the cross
  reference back end currently active.   The **pel-erlang-xref-engine**
  user-option identifies the cross reference back-end to use.  The user can
  change the cross reference engine back-end dynamically using the new
  **pel-erlang-select-xref** command and see which one is active with the
  **pel-erlang-show-xref** command.  These are bound to ~<M-f12> M-. M-.~
  and ~<M-f12> M-. M-?~ key sequence respectively.  PEL supports etags,
  dumb-jump, ggtags, ivy-erlang-complete, edts and erlang-ls back-ends.
- New: Simplified installation. PEL now provides the init.el and the early-init.el file
  that support PEL features.  There's also a set of canned Emacs customization files
  ready to use.
- Modified: the key binding to find-file/id-find-file from ~<f11> C-f~ to ~<f11> f f~
  and to ~<M-f11> M-f M-f~.  Also modified the binding to psw-navigate-file from
  ~<f11> f M-f~ to ~<f11> f M-f~.
- New: PEL supports configuring the process environment of Emacs launched from
  a GUI program such as Windows Explorer, macOS Finder, Linux file manager,
  etc...  The method PEL use is fast and does not need to launch a child shell
  process: only configure two customization user-options variables:
  ``pel-shell-detection-envvar`` and ``pel-gui-process-environment`` and
  possibly setting one environment variable into your shell initialization
  script.
- New: PEL now provides 2 operation modes: the normal Emacs mode of operation
  and the new **fast-startup** setup.  In the fast-startup setup, Emacs init startup
  time is reduced further by bundling all single directory external packages
  inside a single directory.  Use the **pel-setup-fast** command to activate
  the fast startup setup.  Use the **pel-setup-normal** command to restore
  Emacs standard environment.  Use the fast startup setup when you want to use
  a large number of external packages and want to reduce Emacs startup time
  more than what can be done otherwise.
- New: explicit support for Emacs ‚â• 27 package quickstart feature that is
  aware of PEL fast-startup mode and PEL's ability to deal with 2 independent
  customization files (one for Emacs in terminal mode and another for Emacs
  running in graphics mode).  The *pel-setup-with-quickstart* command (bound
  to ~<f11> M-S q~) activates package quickstart or refresh the
  package-quickstart file(s) if already present.  The
  *pel-setup-no-quickstart* (bound to ~<f11> M_S M-q~) disables package
  quickstart.
- New: PEL now provides *customization-driven package management*.
  It installs packages identified by the ``pel-use-`` user-option when the
  *pel-init* command is issued and some of the requested packages are missing.
  And it deactivates packages that are not required  y these user-options when
  you execute the ``pel-cleanup`` command.
  - PEL no longer depends on the [[https://github.com/jwiegley/use-package][use-package]] external package to install
    other external packages. PEL now provides all the logic it requires on top
    of the built-in package library to install external packages.  This
    simplifies the PEL installation procedure and allows byte-compiling all of
    PEL without requiring any external package.  PEL will download and install
    new package *only* when you activate the related ``pel-use-`` user-option
    variable.
  - New: PEL supports the ability to perform automatic cleanup of packages:
    - The ``pel-cleanup`` command disable packages not required by the PEL
      user-options: it moves the packages in excess into an "attic"
      directory. It also updates the ``package-selected-packages``
      customization.  That reduces the Emacs load-path which helps speeding up
      Emacs initialization time.
    - If the command is issued with any prefix key the command executes in
      dry-run mode and produces a detailed report of what would be removed.
  - New: The ``pel-package-info`` command generates a report of the used
    packages.  By default it prints a short report on the echo area. When
    invoked with any prefix key it produces a detailed report in a special buffer.
- New: the new command *pel-insert-line-above* (bound to ~M-L~) inserts a
  new line above current line and indents it. Optional numeric argument is
  accepted, adding that many lines.  If the argument is negative, point is not
  moved.
- New: integrated [[https://github.com/nflath/c-eldoc][c-eldoc]].  In C buffers, the ~<f12> ? e~ key sequence
  toggles c-eldoc mode on/off. I am currently investigating c-eldoc various
  versions trying to improve its performances.  For systems that do not have
  access to a LSP for C/C++ c-eldoc might provide some help even though it is
  limited.
- Update: improved  messages printed by commands that describe state of modes
  such as completion modes, etc...
- Update: *Application Launching*:
  - New: The ~<f11> A~ key sequence is bound to counsel-linux-app on Linux
    systems and to counsel-osx-app on macOS system.  This allows selecting an
    OS application by name to launch it.  The first one is available when
    pel-use-counsel is on and the second when pel-use-counsel-osx-app is on.
- Update: *Buffer Support*:
  - New: support for the *iflipb* external package is activated by the
    *pel-use-iflipb* user-option.  When active the ~<f9>~ key flip to the
    next buffer and ~<S-f9>~ to the previous buffer in the stack.
  - New: support for Buffer Selection mode. The command *bs-show* is mapped to
    ~<f11> b s~ and the *bs-customize* command is mapped to ~<f11> b S~.
    - Extensions to Buffer Selection mode:
      - The commands *pel-bs-next* (bound to ~<f11> b .~) and the *pel-bs-previous*
        (bound to ~<f11> b ,~) changes the buffer of the current window to
        the next and previous buffer identified from the Buffer Selection
        list.
      - A new key binding (".")  in the Buffer Selection mode creates a mode
        to cycle through the buffers of the same major mode as the one
        selected on the current line.  Allowing the *pel-bs-next* and
        *pel-bs-previous* commands to cycle through the buffers of the same
        major mode.
  - New: provide commands to cycle through the buffers of the same major mode
    as the current buffer without the use of the Buffer Selection mode:
    - The commands *pel-smb-next* (bound to ~<f11> b ]~) and
      *pel-smb-previous* (bound to ~<f11> b [~ ) can be used to cycles
      through all  buffers of the same major mode in the current window
      without any prior setup.
  - New: a new pel-‚àëbuffer Hydra provides quick access to these commands.
- New: *Build Tool Scripting Support*:
  - New: *Make file Editing support*:
    - New:  [[https://raw.githubusercontent.com/pierre-rouleau/pel/master/doc/pdf/pl-make.pdf][ùïªùî© - Make]] PDF that describes make file editing support, along with
      PEL additions.
      - PEL adds support to the Microsoft's nmake file format, something not
        provided by Emacs built-in make file support.
    - New: PEL provides two commands to navigate across make file macro
      definition statements (they can also be used to count them):
      - *pel-make-previous-macro*, bound to ~<f12> <M-up>~ and
        ~<M-f12> <M-up>~.
      - *pel-make-next-macro*, bound to ~<f12> <M-down>~
        and <M-f12> <M-down>`.
  - New: *Nix package Manager support:
    - Support is activated by the *pel-use-nix-mode* user-option.
      It installs the nix-mode package.
  - New: *Tup file editing support*:
    - Support for *Tup* files activated by the *pel-use-tup* user-option.
- Update: *Comments*:
  - New: command *pel-comment-show-variables* (bound to ~<f11> ; ?~) opens a
    special "\*comment-vars\*" buffer and prints the names and values of all
    Emacs variables used to control the behaviour of comment generation. If a
    prefix is specified it only prints the user option variables (the ones
    that can be customized).
- Update: *Cross Referencing support*:
  - PEL's goals is to provide easy access to multiple indexing and
    cross-referencing systems.  Once a system is enabled via the appropriate
    PEL user option, it is possible to activate its mode or turn it off using
    one of the commands PEL provide.
    - PEL provides the *pel-xref-show-status* command to display the state of
      the indexing/cross-referencing modes.  It is bound to ~<f11> X ?~.  By
      default it prints a message at the bottom of the screen.  When invoked
      with any prefix argument it prints the information inside a
      *xref-status* buffer.
      - It becomes easy to try different indexing systems; these systems are
        often complementary and often viable alternatives to active Language
        Server systems.  Note that PEL will also support Language Servers and
        will identify good set of tools for each of the programming languages
        it will support.
  - Modified: PEL key binding for *xref-find-apropos*: the new key sequence is
    ~<f11> X a~ instead of ~<f11> X .~ which is now reserved for major mode
    specific specialized cross reference operations.  The 'a' for apropos is
    used in other PEL key sequences, so it's more appropriate even though the
    command is also bound to ~C-M-.~ by Emacs.
  - New *xref search of Customization buffer user option variables*:
    - PEL provides the command *pel-xref-find-custom-definition-at-line*.
      This command finds the source of a user-option variable for the symbol
      listed on the current line of a Customize buffer.  The user variable may
      have its name spread like in "Kill Ring Max" or its real variable name
      like "kill-ring-max".  It has several key bindings:
      - It is globally bound to the ~<f11> X c~ key sequence.  However it
        can only be used inside a Customize buffer; if used inside another
        buffer it will report an error.
      - In Customize buffers (buffers in Custom-Mode) the following keys are
        activated:
        - ~<f11> X .~
        - ~M-.~ when the PEL user option
          *pel-bind-m-dot-to-xref-find-custom-definition* is set to *(t*
          (which is its default).
  - Non-xref cross-reference/code indexing packages:
    - New: Added support for [[https://en.wikipedia.org/wiki/Cscope][CScope]] via the external [[https://github.com/dkogan/xcscope.el][xcscope]] and the
      [[https://github.com/alpha22jp/helm-cscope.el][helm-cscope]] Emacs packages.
      - The xcscope package is enabled when the *pel-use-xcscope* user option
        is on (non-nil).
      - When enabled, the ~<f11> X C C~ key sequence toggles the
        xcscope-minor-mode. Automatic activation of xcscope-minor-mode can be
        specified with the *pel-modes-activating-cscope*.  This could be done
        for c-mode, c++-mode and dired-mode.
      - The *pel-use-helm-cscope* user option enables the use of the helm-cscope
        external Emacs package that uses Helm to display CScope matches. It
        also enables the ~<f11> X C H~ key binding to toggle the use of
        helm-cscope-mode and the extra key bindings this mode activates.
    - New: Added support for eopengrok front end to [[https://en.wikipedia.org/wiki/OpenGrok][OpenGrok]], a Java-based
      source code indexing server.
    - New: Added support for elisp-refs package, activated by *pel-use-elisp-refs*
      as well as from *pel-use-helpful* user-options.  The commands have key
      bindings under the ~<f12> r~ key prefix of Emacs Lisp Mode.
  - New *xref back-end support*:
    - New: Added support for [[https://github.com/jacktasia/dumb-jump][dump-jump]]. The pel-use-dumb-jump activates it for ~M-~.
    - New: Added support for [[https://www.gnu.org/software/global/][GNU GLOBAL]] gtags-based [[https://github.com/leoliu/ggtags][ggtags]]. This includes support
      for [[https://ctags.io][Universal-Ctags]] and [[https://pygments.org][Pygments]] plugins.  Several things must be done
      properly to get this working, a descrption of the required installation
      steps are in the PEL manual (see the manual additions below).
    - New: added support for gxref xref back-end using GNU GLOBAL.
    - In progress: adding support for RTags xref back-end for C/C++ code.
    - New: PEL command to dynamically modify the list of xref back-end functions
      (mapped to the ~<f11> X B~ prefix) and to select the xref front-end function
      (mapped to ~<f11> X F~ key sequence).  The supported xref back-end include:
      etags, rtags, ggtags,  gxref, xref and dumb-jump.
  - New *xref front-end support* and selection mechanism:
    - New: added support for ivy-xref and helm-xref front-end for xref search,
      allowing selection of xref, ivy-xref or helm-xref display of multi-result
      searches.
  - Updated *help support*:
    - New: add support for the *debbugs* external package when the
      *pel-use-debbugs*  user option is turned on.  This provides commands to
      browse the GNU Bug Tracker database within Emacs.  PEL binds the debbugs
      commands under the ~<f11> ? b~ key prefix.  It also provides access to
      the debbugs customization group via the ~<f11> ? <f3>~ key.
    - Update: pel-xref-show-status (key sequence ~<f11> X ?~) displays more
      information: it now displays the state of ggtags, dumb-jump, gxref,
      rtags.
    - New: *command log mode* from [[https://github.com/pierre-rouleau/command-log-mode][my forked command-log-mode repo]] is now
      available when the *pel-use-command-log-mode* user option is set to t.
      The commands are bound to the keys following the pel:command-log prefix
      bound to the ~<f11> ? k c~ key sequence.  These commands provide the
      ability to log all key and mouse events in a dedicated window buffer
      showing the key sequence and the executed command by its name.
  - Updated *customization support*:
    - Update: the ~<f11> X <f3>~ key sequence provides access to the customization
      buffer of more cross referencing packages. It provides access to dumb-jump,
      eopengrok, etags, eopengrok, ggtags, gxref, xref, ivy-xref, helm-xref,
      ivy, helm, projectile and speedbar.
    - New: shell scripts to create etags-compatible TAGS files in the bin
      directory:
      - [[https://github.com/pierre-rouleau/pel/blob/master/bin/etags-c][etags-c]] creates a etags-compliant TAGS file for C source code
        projects: all .c, .h files.
      - [[https://github.com/pierre-rouleau/pel/blob/master/bin/etags-cpp][etags-cpp]] creates a etags-compliant TAGS file for C++ source code
        projects: includes C files ( .c, .h files) and C++ files (.C .c++ .cc
        .cpp .cxx .H .h++ .hh .hpp .hxx .M .pdb) files.
      - [[https://github.com/pierre-rouleau/pel/blob/master/bin/etags-el][etags-el]] creates a etags-compliant TAGS file for Emacs Lisp projects:
        all .el, .c and .h files. It supports used of compressed files when
        etags is used.
      - [[https://github.com/pierre-rouleau/pel/blob/master/bin/etags-erl][etags-erl]] creates a etags-compliant TAGS file for Erlang and C source
        code projects.  It does not process compressed files.
      - [[https://github.com/pierre-rouleau/pel/blob/master/bin/etags-lisp][etags-lisp]] creates a etags-compliant TAGS file for Common Lisp file
        directory tree.  It supports used of compressed files when etags is
        used.
      - [[https://github.com/pierre-rouleau/pel/blob/master/bin/etags-py][etags-py]] creates a etags-compliant TAGS file for Python source code
        file projects.  It does not process compressed files.
    - New: shell scripts to create CScope database for directory trees of C
      and C++ files:
      - [[https://github.com/pierre-rouleau/pel/blob/master/bin/cscope-c][cscope-c]] creates a CScope database and a cscope-files in the current
        directory for directory tree(s) of C files.
      - [[https://github.com/pierre-rouleau/pel/blob/master/bin/cscope-cpp][cscope-cpp]] creates a CScope database and a cscope-files in the current
        directory for directory tree(s) of C and C++ files.
- Update: *Cursor/Multiple-Cursors*:
  - Update: completed the key bindings required to use the *multiple-cursors*
    package efficiently:
    - Add ~<f11> m n~ key sequence binding to *mc/mark-next-like-this*
    - Add ~<f11> m p~ key sequence binding to *mc/mark-previous-like-this*
    - Add ~<f11> m a~ key sequence binding to *mc/mark-all-like-this*
    - ... and several other commands: there's a total of 35 of them,
      all documented in the [[https://raw.githubusercontent.com/pierre-rouleau/pel/master/doc/pdf/cursor.pdf][‚ÖÄ Cursor PDF]].
- Update: *Customization*:
  - New: *pel-auto-mode-alist* user option in the Pel Base Emacs group allows
    user-specified  association of file name pattern to a major mode.  It can
    be used, for example to:
    - select the shell-script-mode for extension-less
      files stored in a directory whose name ends with ``/bin/`` by
      identifying the file pattern as ``/bin/.+\``` and the mode as
      shell-script-mode.
    - select python-mode for [[https://www.scons.org][SCons]] files like Sconstruct and SConscript,
    - or any other association you may wish.  Invalid associations are
      detected and a warning is displayed when Emacs starts.  Association
      to a mode function not bound by the time pel-init has
      completed all loading is considered invalid.
  - New: command *pel-browse-group* which prompts allowing the browsing of the
    customization group tree from any group.  This complements the Emacs
    customize-browse which unfortunately does not prompt.
  - New: added several links to package home pages, user manuals and relevant
    Emacs manuals and sections.
  - New: The ~<f11> - <f3>~ key sequence provides access to the
    customization of the following groups: cua-mode, killing, popup-kill-ring.
  - Modification: new customization group *pel-pkg-for-cut-and-paste* which
    holds pel-use-popup-kill-ring that was previously under the undo group.
- Update: *Cut & Paste*:
  - New: *pel-duplicate-line* command (bound to ~<f6> d~) that duplicates
    the current line N times, with N defaulting to 1 and taken from a
    numerical argument. If some text on the original line is marked, the
    function prompts and uses a replacement for each duplicated line.
    If N is positive all instances of text in the original line are replaced
    in the duplicate lines.  If N is negative, only the marked text is replaced.
    The command maintains a prompt history, accessible with M-n and M-p.
  - New: It's now possible to control whether the copy, kill, delete commands
    that can display the copied, killed or deleted text. The new
    *pel-show-copy-cut-text* user option controls it.  It is set *t* by
    default, mimicking previous behaviour.  Setting it to nil will prevent the
    display. The new command *pel-toggle-show-copy-cut-text* (bound to
    ~<f11> M-=~) can be used to override this setting in the current Emacs session
    either globally or for the current buffer.  the customize buffer is a
    persistent setting that can be overridden
  - New: added commands that delete elements, similar to the kill commands.
    These are bound to the pel:delete key prefix, bound to the ~<f11> DEL~
    key sequence.  There is now a delete command equivalent to the kill
    commands.
  - New: added commands to kill and delete the beginning or end of the word at
    point, bound to ~<f11> - q~ (for kill) and to ~<f11> DEL q~ (for
    delete).  Same for symbol, using ~,~ instead of ~q~.
  - Update: the command to delete duplicated lines is now bound inside the
    pel:delete key prefix instead of the pel:kill key prefix.
  - New: added command *pel-delete-line* to delete text from point to end
    of line without copying it to the kill ring.  It is bound to ~C-K~ (in
    graphics mode only) and to ~<f11> DEL e~ key sequence.
  - New: added command *pel-delete-from-beginning-of-line* bound to ~<f11> DEL a~.
  - Update: the kill and delete commands are no longer allowed in read-only
    buffer.
- Update: *Dired*:
  - New: add support for the dired-hide-dotfiles external package when the
    *pel-use-dired-hide-dotfiles* user-option is set to either *t* or to
    *hide-dot-files-by-default*.  Add a new key binding ("/") in dired-mode
    to toggle hiding of the dot-files.  The "." key binding already exists in
    dired, it is not used for this.
  - New: add support for the dired-git-info external package when the
    *pel-use-dired-git-info* user-option is set to *t* or to
    *activate-for-git-directories*. This adds a new key binding ")" in
    dired-mode to toggle the display of the last git log entry for each file.
- Update: *ERT - Emacs Regression Test* support:
  - New: [[https://github.com/pierre-rouleau/pel/blob/master/pel-ert.el][file pel-ert.el]] that defines a set of equality and inequality
    predicates that are meant to be used in ert-deftest forms.  You can use these
    inequality functions to pass extra arguments whose values will be shown in
    the ERT failure report when the test fails, providing extra information.
    Pass test control variables to these extra arguments.
  - New: *pel-run-ert* command, bound to ~<f12> t~ in Emacs Lisp buffers,
    that byte-compile the file and runs *ert* to on the file visited by the
    current buffer.
- Update: *File Diff*:
  - New: command *pel-ediff-2files*, bound to ~<f11> d 2~, runs the EDiff
    command on the files in the current window and the other window, allowing
    to quickly set up an EDiff session to compare the content of the 2 edited
    files. With numerical argument another window can be selected from the
    direction of the corresponding cursor on a numeric keypad.
  - New: command *pel-ediff-revision*, bound to ~<f11> d r~, runs the Ediff
    command to compare revisions of the file in the current window, defaulting
    to the current copy and the last committed revision.
- Update: *File Management*:
  - New: when using IDO completion you can control whether IDO uses the file
    name at point with the new command *pel-set-ido-use-fname-at-point*.  By
    default it sets the behaviour for the current buffer.  With a command
    prefix it sets it globally.
  - New: command *pel-open-url-at-point* bound to ~<f11> f M-u~ copies the
    file identified by the URL at point into a temporary file and visit that
    file. This command is also bound to ~C-c C-f~ when the goto-address-mode
    minor mode is active and point is over a URL.
  - New: key binding ~<f11> f M-l~ to find-file-literally.
  - New: command *pel-show-buffer-file-encoding*, bound to ~<f11> f ?~ that
    shows the encoding of the file in current buffer by opening the *Help*
    buffer showing the value of Emacs variable buffer-file-coding-system.
  - Improved: *pel-open-at-point* is now able to open a file when its name is
    immediately followed by a colon character.  Useful when trying to open the
    file whose name is shown in the result of a grep command.
  - New: its now possible to dynamically control whether the following actions
    occur when a buffer is saved into a file for each buffer independently or
    all buffers globally.  These actions are activated by a customizable
    user-option.  What is new is that new commands are available to
    dynamically activate or deactivate the action either globally or each
    buffer independently. The actions are:
    - Update copyright notice on save: use ~<f11> M-C~ to toggle action
      activation.
    - Update time stamp on save: use ~<f11> M-T~ to toggle action
      activation.
    - Delete trailing space and lines on save: use ~<f11> M-W~ to toggle
      action activation.
- Update: *Grep*:
  - New: Added key bindings for [[https://github.com/ggreer/the_silver_searcher][ag]] (the silver searcher) based grep-style
    search.
  - Modified: key bindings in pel:grep to better organize commands for [[https://github.com/ggreer/the_silver_searcher][ag]] and
    for better regularity.
  - New: add support for [[https://github.com/Wilfred/deadgrep][deadgrep]] package, activated by the
    *pel-use-deadgrep* user-option.  When it is turned on, the *deadgrep* command is bound
    to ~<f11> g d~.
- Update: *Help*:
  - New: Added a command (<f11> ? e c) to open a local copy of
    one of the [[https://www.gnu.org/software/emacs/refcards/index.html][Emacs PDF reference cards]]. The new *pel-emacs-refcard-dirpath*
    user option identifies a directory where Emacs PDF refcards are stored. If
    you set that user option PEL uses it to locate the Emacs PDF refcards,
    otherwise it attempts to locate it.  Under macOS automatic location often
    works nicely because the Emacs reference cards are stored in PDF format.
    On Linux platforms the refcards are stored in .tex format and PEL does not
    attempt to build or render the .tex files, so its often best to download
    the PDF files, store them in a directory and identify that location in the
    user option.
  - New: key binding to a command to display Emacs executable path: ~<f11> ? e x~.
  - New: key binding to display Emacs up-time (~<f11> ? e u~).
  - New: added several alias for various PDF tables when using the
    *pel-help-pdf-select* (which is bound to the  ~<f11> ? p~ key.
  - New: Add support for the *helpful* package.  Activated when the
    *pel-use-helpful* user-option is turned on.  Its commands are bound to the
    ~<f1> <f2>~ key prefix.
- Update: *Hide/Show*:
  - New: add support for the **origami-mode** code folding package, activated
    when the *pel-use-origami* is turned on (set to *t*) or indirectly when
    *pel-use-erlang-ls* is set. Provides key bindings which also include
    bindings for command that hide/show comments and docstrings.
  - New: add support for the *hide-lines* external package, activated when the
    *pel-use-hide-lines* user-option is turned on (set to *t*). It provides
    commands bound to the ~<f11> M-/~ PEL key prefix as well as the ~C-c /~ global binding.
- Update: *Highlighting*:
  - Modified: the pel:highlight prefix key sequence changed from ~<f11> b h~
    to the simpler ~<f11> h~.
  - New: add support for *rainbow-mode* to highlight color code strings in
    source code. The ~<f11> h c~ key sequence is bound to the command
    *rainbow-mode* to toggle activation of the mode.
  - New: Add support for *auto-highlight-symbol*, activated by the
    *pel-use-auto-highlight-symbol* user-option.  The
    *auto-highlight-symbol-mode* command is bound to the ~<f11> h a~ key
    sequence.
  - New: Add support for the *highlight-indentation* package activated by
    *pel-use-highlight-indentation* user-option.  This provides the
    *highlight-indentation-mode* command (bound to ~<f11> h M-i~ key
    sequence) and to the *highlight-indentation-current-column-mode* command
    bound to ~<f11> h M-c~.
- Update: *Indentation*:
  - Improvement: to the commands bound to ~<f6> <tab>~ (now
    *pel-indent-lines*) and ~<S-tab>~ (now *pel-unindent-lines*):
    - The commands now handle a marked region like a region marking all
      touched lines and now longer suffers from a degradation of the marked
      area on subsequent commands.
    - The commands now properly handle the presence of hard tabs in the
      indentation whitespace.  They also automatically tabify or untabify the
      indentation whitespace, conforming to the mode identified by the
      /indent-tabs-mode/ variable.
  - New: Add support for *indent-tools* external package.  Activate by the
    *pel-use-indent-tools* user-option. Provide the ~<f11> <tab> >~
    key-binding to its key Hydra.  It's also possible to activate the binding
    identified by indent-tool customization globally or only for Python files.
  - New: Add support for *smart-shift* external package.  Activate by the
    *pel-use-smart-shift* user-option. Also, the *pel-smart-shift-keybinding*
    user-option can be used to add extra key bindings to the minor-mode line
    shifting commands.
- Update: *iMenu support*:
  - New: add support for the *imenu+* external package.  Activate by setting
    *pel-use-imenu+* user-option to *t*.  This activates the execution of
    the *imenup-add-defs-to-menubar* function to enhance the content of the MenuBar
    imenu index entry.  It is activated on file entry and has a 'DEFS' index
    menu entry with the `imenu+' extra features activated: toggle of menu
    entry sorting, ability to index commented definitions, several types in
    various file types.
  - New: add support for the *imenu-extra* external package.  Make it available by
    setting the *pel-use-imenu-extra* user-option to *t*.
  - New: add *pel-imenu-rescan*, bound to ~<f11> <f10> r~.
  - New: add *pel-popup-imenu*, bound to ~<f11> <f10> <f10>~.  It opens a pop-up
    menu of items detected by imenu.
  - New: add support for the *idomenu* external package. Make it available
    by setting the *pel-use-idomenu* user-option to *t*.
  - New: add the *pel-clisp-define-forms* user-option that allows you to identify
    Common Lisp definition form keywords to include in the imenu list.
- Update: *Input Completion*:
  - New: Customization and dynamic control of Ido prompt geometry.
    - The *pel-initial-ido-geometry* user-option allows you to select the
      initial Ido prompt geometry from : 1) Emacs default linear prompt, 2)
      grid mode that starts collapsed or 3) grid mode that starts expanded.
    - The *pel-select-ido-geometry* command (bound to ~<f11> M-c M-g~)
      allows you to change this during an Emacs session.  It does not persist
      across Emacs session the way the customize user-option does.
    - The *pel-show-active-completion-mode* displays the currently active
      completion mode, whether ubiquitous Ido is active and the Ido prompt
      geometry active.
  - New: Add support for *flx* and *flx-ido* external packages. Activate both
    by setting the *pel-use-flx* user-option to *t*.  Set the initial state in
    the *pel-initial-ido-flx-state*.  Use the new command
    *pel-toggle-flx-ido*, bound the ~<f11> M-c M-f~ key sequence, to stop or
    start its use during an editing session.
  - New: Add support for the *smex* external package.  Activate it by setting
    the *pel-use-smex* user-option to *t*.
  - New: Add support for the *ido-grid-mode* external package.  Activate it by
    setting the *pel-use-ido-grid-mode* user-option to *t*.
  - New: Add support for the *ido-grid* library, a different implementation of
    an Ido grid, done by the same author but not yet supported on
    Melpa. Activate it with *pel-use-grid-mode* user-option.  Note, however
    that it is incompatible with the ido-grid-mode.  Therefore when
    pel-use-grid is set it forces the pel-use-grid-mode to go off, regardless
    of the user selection.  If you want ido-grid-mode, make sure you turn off
    pel-use-grid.
  - New: Add and then disabled support for the *ido-vertical-mode* external
    package. Activate it by setting the *pel-use-ido-vertical-mode*
    user-option to *t*.
  - New: Add support for the *ido-ubiquitous-mode* via the
    ido-completing-read+ package.
    - It is activated via the
      *pel-use-completing-read+* user-option.
    - When active the *pel-toggle-ido-ubiquitous* command is mapped to ~<f11> M-C~.
  - New: *pel-cl-hyperspec-lookup* command that uses Slime, SLY or PEL's own
    implementation of Common Lisp Hyperspec symbol lookup.  It's bound to the
    Common Lisp specific ~<f12> ?~ key sequence.
  - New: During Ido input completion, the ~<f1>~ key opens the
    [[https://raw.githubusercontent.com/pierre-rouleau/pel/master/doc/pdf/completion-input.pdf][‚ÖÄInput Completion PDF]] which now describes all key bindings available for
    the Ido prompts.  the same key is available in Ivy prompts.
  - New: Add support for ivy-avy.  It is activated when both *pel-use-ivy* and
    *pel-use-ivy* user-options are activated.
  - New: Add extra key bindings for the ivy key-map to allow
    *ivy-restrict-to-matches* and *ivy-avy* to be accessible when Emacs runs
    in terminal mode.
- Update: *Key Chords*:
  - New: a new key prefix is used to access key-chord commands:
    *pel:mode-key-chord*, mapped to ~<f11> <f5> k~.  It holds the following
    commands:
    - Command *key-chord-mode*, mapped to ~<f11> <f5> k k~.
    - Command *pel-key-chord-describe* (bound to ~<f11> <f5> k ?~)
      displays the state of key-chord/key-seq and the key bindings if
      key-chord-mode is active.
    - ~<f11> <f5> k <f1>~ opens the [[https://raw.githubusercontent.com/pierre-rouleau/pel/master/doc/pdf/key-chords.pdf][‚ÖÄ Key-Chords PDF]].
    - ~<f11> <f5> k <f2>~ opens the PEL key-chords customization buffer.
    - ~<f11> <f5> k <f3>~ opens the key-chords package customization buffer.
- Update: *Markup Language Support*
  - New: Add support for Markdown, via the *markdown-mode* and several other
    external packages: *grip-mode*, *impatient-showdown*,
    *markdown-preview-eww*, *markdown-preview-mode*, *markdown-toc*,
    *vmd-mode* and *remark-mode*.
  - The ~<f11> SPC M-m~ key prefix gives access to the Markdown specific
    PEL keys which becomes the ~<f12>~ key when the markdown-mode is active.
    Currently this key prefix has only 3 sub-keys:
    - ~<f1>~ opens the [[https://raw.githubusercontent.com/pierre-rouleau/pel/master/doc/pdf/mode-markdown.pdf][‚±Æ Markdown PDF]].
    - ~<f2>~ opens the *pel-pkg-for-markdown* customization group where various markdown
      support packages can be enabled with the PEL user-options.
    - ~<f3>~ provides access to the customization group for the
      markdown-mode and other markdown support packages.  As for all other
      ~<f3>~ keys in PEL, the package does not have to be loaded for the key
      to be able to access the customization group.  PEL will load the package
      first if necessary.
    - The ~<f12> M-t~ key prefix to commands that generate, refresh or delete a
      table of contents are available when the *pel-use-markdown-toc*
      user-option is set.  And if it is set to /update-toc-on-save/ the
      table of content is updated on buffer save if it is present.
    - The markdown extension packages that provide other mechanisms to
      generate a HTML rendering have commands mapped to the ~<f12> M-p~ key
      prefix.
  - New: Add support for YAML with *yaml-mode*.
    Activate it with the *pel-use-yaml-mode* user option.
  - New: Ass support for Common Workflow Language (CWL) with *cwl-mode*.
    Activate it with the *pel-use-cwl-mode* user-option.
- Update: *Navigation*
  - New: New commands to navigate across URLs in the current buffer:
    - *pel-goto-next-url*, bound to ~<f6> C-n~ globally and to ~C-c C-n~
      when the goto-address-mode minor mode is active and point is over a URL,
    - *pel-goto-previous-url*, bound to ~<f6> C-p~ globally and to ~C-c C-p~
      when the goto-address-mode minor mode is active and point is over a URL.
  - New: ~M-g h~ and ~M-g M-h~ key sequences mapped to *pel-goto-symbol*,
    a command that uses imenu to extract all symbols from the buffer to
    provide an efficient way to jump to the definition of any symbol in the
    current buffer.
    - The command provides several user interface methods selected by
      the *pel-initial-goto-symbol-UI* which defaults to Emacs default: imenu.
      You can use the command *pel-select-goto-symbol-UI*, bound to ~M-g <f4> h~,
      to change the user interface method used in the current Emacs
      session. The available completion methods are:
      - Ido,
      - Ivy,
      - helm
      - popup-imenu
      - popup-switcher.
  - New: Add support for imenu-anywhere, which provides the same functionality
    as pel-goto-symbol with the ability to target the symbols of *all*
    buffers:
    - Activated with the *pel-use-imenu-anywhere* that is set to identify the
      default user interface method, one of: emacs-default, ido, ivy or helm.
    - The *pel-select-goto-symbol-any-buffer-UI* command (bound to ~M-g <f4> y~)
      can be used to change the completion method used in an Emacs
      editing session.
    - The *pel-goto-symbol-any-buffer* prompts using the selected completion method
      and move point to the buffer and location where the symbol is
      defined. The command is bound to ~M-g y~ and ~M-g M-y~ key
      sequences.
  - New: ~<f11 M-f>~ binding for pel-forward-syntaxchange-start and
    ~<f11 M-b>~ binding for pel-backward-syntaxchange-start.
  - New: when the new *pel-windmove-on-f1-cursor* user option is set to t, PEL
    activates several key bindings for windows management using the ~<f1>~
    prefix followed by cursor keys sequences:
    - ~<f1> <cursor>~ : to move to pointed window.
    - ~<f1> <C-cursor>~ : to create window in pointed direction.
    - ~<f1> <C-S-cursor>~ : to close window in pointed direction.
    - ~<f1> <M-cursor>~ : to resize current window according to the cursor used.
    - ~<f1> <kp-5>~ : to balance the size of all windows in current frame.
  - New: when the new *pel-windmove-on-esc-cursor* user option is set to t, PEL
    activates several key bindings for windows management using the *Esc*
    prefix followed by cursor keys sequences:
    - ~Esc <cursor>~ : to move to pointed window.
    - ~Esc <C-cursor>~ : to create window in pointed direction.
    - ~Esc <C-S-cursor>~ : to close window in pointed direction.
    - ~Esc <M-cursor>~ : to resize current window according to the cursor used.
    - ~Esc <kp-5>~ : to balance the size of all windows in current frame.
  - Update: removed the ~<C-f11>~ binding to pel-previous-visible and
    ~<C-F12>~ to pel-next-visible.  Instead use ~<C-left>~ and
    ~<C-right>~, respectively bound to pel-backward-token-start and
    pel-forward-token-start.  This frees another 2 valuable quick access keys.
- Update: *Programming Language Support*:
  - Update: *CC Mode Utilities*
    - Refactoring: Moved cc-mode utilities from pel_keys.el to the new pel-cc.el
      file.
    - Updated: *pel-cc-mode-info* can now be used from any major mode where it will
      display info about non-loaded symbols and features. It also displays more
      information to increase awareness of the active setting:
      - the names of styles for current mode in c-default-style in order of
        presence in the list, the active CC mode style,
      - mode used by the return key.
    - New: command bound to the return key in c-mode, c++-mode and d-mode:
      *pel-cc-newline*. The behaviour of the return key controlled by this
      command can be selected by the PEL user options for each mode as well as
      commands that control the activation of the features dynamically in the
      current buffer.  The features include:
    - Insertion of newline with or without indentation of the new inserted line,
      extension of the comment, with or without alignment of comments,
      assignments in the code block.
      - The selection of the underlying command used to control the line
        insertion defines its main behaviour: one of 3 different commands:
        c-context-line-break, newline or electric-indent-just-newline which
        identifies whether syntactic indentation, continuation of comment or
        plain newline insertion is done.  The selection of the default behaviour
        is done by the PEL user options *pel-c-newline-mode*,
        *pel-c++-newline-mode* and *pel-d-newline-mode* for the respective major
        modes.  The behaviour can also be dynamically changed in the current
        buffer by the new *pel-cc-change-newline-mode** command (bound to
        ~<f12> M-RET~).
      - *pel-cc-newline* command also aligns comments
        and assignments in the above code block is controlled by the variable
        *pel-newline-does-align*.  That variable is turned on (set to t) for modes
        identified in the *pel-modes-activating-align-on-return* user option.
        It can also be modified dynamically by the command
        *pel-toggle-newline-indent-align  which is bound to ~<f11> M-RET~.
    - New: for C and C++ modes, the ~<f12> <f7>~ key sequence opens the list
      of C preprocessor Hydra keys that help navigate across C preprocessor
      directives, hide and how them, etc...
  - New: **Bison, Lex, YACC*:
    - New: PEL activates the *bison-mode* external package when the
      *pel-use-bison-mode* user-option is turned on (set to *t*) and
      associates the .y, .yacc fiels to bison-mode, the .l and .lex to
      flex-mode and the .jison files to jison-mode.
  - Update: *C*
    - New: PEL support for C is now activated with the *pel-use-c*
      user-option.  This allows turning it off to reduce Emacs init time when
      you do not need to edit C files.
    - New: ~<f12> <f12> d~ insert a C pre-processor #define statement.
    - New: ~<f12> <f12> i~ insert a C pre-processor #include statement for
      library files.
    - New: ~<f12> <f12> I~ insert a C pre-processor #include statement for
      local files.
  - Update: *C++*
    - New: PEL support for C++ is now activated with the *pel-use-c++*
      user-option.  This allows turning it off to reduce Emacs init time when
      you do not need to edit C++ files.
  - Update: *Lisp Languages Family*:
    - Update: *Modes for all Lisp Languages*:
      - Update: *Lispy mode*:
        - The ~M-RET~ binding to *lispy-meta-return* is now controlled by
          the *pel-enable-lispy-meta-return*, which is off by default because
          it conflicts with PEL's global binding for M-RET, useful in Lisp
          editing major modes.
    - Update: *Common Lisp*
      - New: Navigation keys:
        - ~<f12> <down>~   binding to *pel-beginning-of-next-defun*,
        - ~<f12> <M-down>~ binding to *pel-elisp-beginning-of-next-defun*,
        - ~<f12> f n~      binding to *pel-elisp-beginning-of-next-defun*,
        - ~<f12> <up>~     binding to *beginning-of-defun*
        - ~<f12> <M-up>~   binding to *pel-elisp-beginning-of-previous-defun*,
        - ~<f12> f p~      binding to *pel-elisp-beginning-of-previous-defun*,
        - ~<f12> <left>~   binding to *pel-end-of-previous-defun*
        - ~<f12> <right>~  binding to *end-of-defun*
      - New: *pel-cl-add-symbol-to-imenu* command, bound to ~M-g <f4> .~ in
        lisp-mode buffers.  Use this command to add a form defining macro
        symbol to the imenu list of detected symbols.
      - New: user option *pel-clisp-hyperspec-root* to identify the location of
        the LispWorks Common Lisp HyperSpec HTML documentation.
      - New: The ~<f12> <f3>~ key sequence provides access to slime
        customization buffer.
      - New: Add the *pel-clisp-define-forms* user-option that allows you to identify
        Common Lisp definition form keywords to include in the imenu list.
      - Update: Add better control for selection of the Common Lisp/Emacs IDE
        selection: slime or SLY.
      - New: the *pel-cl-repl* opens a buffer with the Common Lisp REPL
        selected by the PEL user-options *pel-use-sly*, *pel-use-slime* and
        *pel-clisp-ide*.  This is bound to the ~<f12> z~ key sequence.
      - New: Common Lisp code style customization group *pel-clisp-code-style*
        which holds the following user-options:
        - *pel-clisp-fill-column* which identifies the column beyond which
          automatic line-wrapping should occur in Common Lisp code.  Defaults
          to 100.  Can be changed to any integer or set to nil to use Emacs
          default.
    - Update: *Emacs Lisp*
      - New: Much more flexible navigation across definition forms.  The main
        commands provide the ability to select, via customization user-option
        variable, the target: either any top-level form, a top-level defun, any
        defun, any defun, defmacro, defsubst, defaliast, defadvice form, or any of
        those with eieio class, method and generic definition forms, and with or
        without the variable definition forms.  It is also possible to identify a
        set of forms by their name.  All of these can take effect globally but can
        also be overridden on each buffer or globally.  The local selection is
        done with a new command (*pel-elisp-set-navigate-target-form* bound to
        ~<f12> M-n~ while *pel-toggle-paren-in-column-0-is-defun-start* which
        selects how the standard Emacs form navigation commands operate, is bound
        to  ~<f12> M-N~).
        - New Navigation keys:
          - ~<f12> <down>~     binding to *pel-elisp-beginning-of-next-form*,
          - ~<f12> <C-down>~   binding to *pel-elisp-to-name-of-next-form*,
          - ~<f12> <M-down>~   binding to *pel-elisp-beginning-of-next-defun*,
          - ~<f12> <C-M-down>~ binding to *pel-elisp-to-name-of-next-defun*,
          - ~<f12> f n~        binding to *pel-elisp-beginning-of-next-defun*,
          - ~<f12> <up>~       binding to *pel-elisp-beginning-of-previous-form*,
          - ~<f12> <C-up>~     binding to *pel-elisp-to-name-of-previous-form*,
          - ~<f12> <M-up>~     binding to *pel-elisp-beginning-of-previous-defun*,
          - ~<f12> <C-M-up>~   binding to *pel-elisp-to-name-of-previous-defun*,
          - ~<f12> f p~        binding to *pel-elisp-beginning-of-previous-defun*,
          - ~<f12> <left>~     binding to *pel-end-of-previous-defun*,
          - ~<f12> <right>~    binding to *end-of-defun*
        - The ~<f12> <down~ and ~<f12> <up>~ keys sequences are bound to the
          most flexible commands: you can configure them to move to top-level
          form, or top-level defun, any defun, etc...
      - New: ~<f12> l v~ binding to *pel-load-visited-file* to load the file
        visited in current buffer either by source or its byte-compiled instance.
      - Modification: of the key binding of *load-file*: changed its key binding
        from ~<f12> e f~ to ~<f12> l f~.`
      - New: ~<f12> D~ binding to new command *pel-add-dir-to-loadpath* which
        adds a directory to Emacs load-path.
      - New: key binding ~<f12> c a~ to *disassemble*.
        *open-paren-in-column-0-is-defun-start*.  This controls the behaviour of
        *beginning-of-defun* and *end-of-defun** functions: whether a paren in
        the first column is always interpreted as a start of defun, even inside
        strings.
        - **Use this first implementation with care**: it prevents checkdoc from
          completing its verification.
          I am currently trying to fix this.
      - New: added support for *eros-mode* from the eros external package which
        provides overlay display of the result of evaluations done by
        *eval-last-sexp*:
        - Set the *pel-use-eros* user-option to *t* to download and activate it.
        - From emacs-lisp-mode, the ~<f12> E~ key sequence is bound to the
          *eros-mode* command which toggles this mode.
        - From emacs-lisp-mode, the ~<f12> <f3>~ key sequence brings a menu
          from which you can select eros to bring the customization buffer to
          configure eros, even if eros is not currently loaded.
      - New: added support for *suggest.el* which provides *Development by
        Example* capabilities for Emacs Lisp!
        - Set the *pel-use-suggest* user-option to *t* to download and activate
          it.
        - Once activated, the ~<f12> S~ key sequence is bound to suggest in
          emacs-lisp-mode and opens a suggest buffer where you can enter input
          data, output data to query for functions that can provide this data
          transformation. The ~<f11> SPC l S~ keys sequence is also available
          globally.
        - Use ~<f12> <f3>~ from emacs-lisp-mode to open suggest customzation
         buffer and ~<f12> <f2>~ to open PEL emacs-lisp customization buffer
         where you can activate *pel-use-suggest*.
      - New: added support for relint: regular expression lint checker.
        - Set the *pel-use-relint* user-option to *t* to activate it.
        - The commands are available via the ~<f11> s x M-l~ search/regular
          expression prefix and from the Emacs-Lisp specific ~<f12> a l~
          analyze prefix.  Commands to lint the current buffer, file  and
          directory tree are bound.
    - New: *Clojure*:
      - New: Add preliminary support for the Clojure programming language.
        - The user-option variable *pel-use-clojure* activates PEL
          support for Clojure with the clojure-mode package..
          - The PEL ~<f12>~ Lisp hot key is available in that mode, along with
            what is available to Emacs Lisp and Common Lisp, including *lispy*.
            - It's ~<f12> <f1>~ key opens the preliminary  [[https://raw.githubusercontent.com/pierre-rouleau/pel/master/doc/pdf/pl-clojure.pdf][ùïªùî© - Clojure PDF]]
            - It's ~<f12> <f2>~ key opens PEL clojure customization buffer.
            - It's ~<f12> <f3>~ key opens the clojure customization buffer.
        - The user-option variable *pel-use-cider* activates Cider.
        - The user-option variable *pel-use-clj-refactor* activates the
          clj-refactor package.
        - The user-option variable *pel-use-clojure-snippets* activates the
          Yasnippets for Clojure using the clojure-snippets package.
    - New: *Racket*:
      - New: Add preliminary support for the Racket programming language.
        - The user-option variable *pel-use-racket* activates it, using the
          *racket-mode* external package.
          - The PEL ~<f12>~ Lisp hot key is available in that mode, along with
            what is available to Emacs Lisp and Common Lisp, including *lispy*.
            - It's ~<f12> <f2>~ key opens PEL racket customization buffer.
            - It's ~<f12> <f3>~ key opens the racket-mode customization buffer.
    - New: *Scheme*:
      - New: Add preliminary support for the Scheme programming language.
        - The user-option variable *pel-use-scheme* activates PEL extra
          support for Scheme.
          - The PEL ~<f12>~ Lisp hot key is available in that mode, along with
            what is available to Emacs Lisp and Common Lisp, including *lispy*.
            - It's ~<f12> <f1>~ key opens the preliminary  [[https://raw.githubusercontent.com/pierre-rouleau/pel/master/doc/pdf/pl-scheme.pdf][ùïªùî© - Scheme PDF]]
            - It's ~<f12> <f2>~ key opens PEL scheme customization buffer.
            - It's ~<f12> <f3>~ key opens the scheme customization buffer.
    - New: *Gerbil Scheme*:
      - New: Add preliminary support for the Gerbil Scheme programming language.
        - The user-option variable *pel-use-gerbil* activates PEL extra
          support for Gerbil.
          - The PEL ~<f12>~ Lisp hot key is available in that mode, along with
            what is available to Emacs Lisp and Common Lisp, including *lispy*.
            - It's ~<f12> <f1>~ key opens the preliminary [[https://raw.githubusercontent.com/pierre-rouleau/pel/master/doc/pdf/pl-scheme.pdf][ùïªùî© - Scheme PDF]]. In
              the future it may have its own PDF since the language is quite
              interesting but since the Scheme PDF is currently in a very early
              stage it uses the same.
            - It's ~<f12> <f2>~ key opens PEL scheme customization buffer.
            - It's ~<f12> <f3>~ key opens the scheme customization buffer.
    - New: *Arc*:
      - New: Add preliminary support for the Arc programming language.
        - The user-option variable *pel-use-arc* activates it, using
          the *arc.el* and *inferior-arc.el* files from the
          [[https://github.com/arclanguage/anarki][GitHub arclanguage/anarki repository]].
          - The PEL ~<f12>~ Lisp hot key is available in that mode, along with
            what is available to Emacs Lisp and Common Lisp, including *lispy*.
            - It's ~<f12> <f2>~ key opens PEL arc customization buffer.
            - It's ~<f12> <f3>~ key opens the arc-mode customization buffer.
    - New: *Hy*:
      - New: Add preliminary support for the Hy programming language.
        - The user-option variable *pel-use-hy* activates it.
          - The PEL ~<f12>~ Lisp hot key is available in that mode, along with
            what is available to Emacs Lisp and Common Lisp, including *lispy*.
            - It's ~<f12> <f1>~ key opens the preliminary  [[https://raw.githubusercontent.com/pierre-rouleau/pel/master/doc/pdf/pl-hy.pdf][ùïªùî© - Hy PDF]].
            - It's ~<f12> <f2>~ key opens PEL hy customization buffer.
    - Update: *LFE - Lisp Flavored Erlang*:
      - New: Added PEL ~<f12>~ Lisp hot key with all Lisp-available features.
           what is available to Emacs Lisp and Common Lisp, including *lispy*.
        - It's ~<f12> <f1>~ key opens PEL LFE documentation PDF (currently
          a very early version).
        - It's ~<f12> <f2>~ key opens PEL arc customization buffer.
        - The ~M-[~ key is unbound in terminal mode, as it prevent access
          to function keys above F4. The ~<f12> [~ key binding is provided
          in terminal and graphics mode.
  - Update: *Erlang*:
    - New: Add Speedbar support for Erlang, showing the functions in the .erl,
     .hrl and .escript files.
    - Modified: logic to select the syntax checker.  The new user option
      *pel-use-erlang-syntax-checker* replaces what was previously used:
      *pel-use-erlang-flymake* and *pel-use-erlang-flycheck*.  These last two
      are no longer supported.  The new user-option is used to select one of
      the 2 supported checkers.
    - The previously used ~<f12> F~ key sequence to toggle flymake is
      replaced by ~<f12> !~ which is bound to *pel-erlang-toggle-syntax-check*.
  - New: *Forth*:
    - New: [[https://raw.githubusercontent.com/pierre-rouleau/pel/master/doc/pdf/pl-forth][ùïªùî© - Forth]] PDF that describes the commands available for the Forth
      programming language.
    - New: the ~<f11> x f~ key sequences opens a Forth interpreter window.
  - New: *Go*:
    - New: Added support for the Go programming language when the *pel-use-go*
      user option is set to *t*.  It allows the following mode activation:
      - When the *pel-use-go-mode* user-option is set to *t*, editing a Go
        file activates the *go-mode* major mode.
        - The *pel-use-goflymake* user-option identifies whether flymake or
          flycheck is used with Go files.  The ~<f12> !~ key can be used to
          toggle the activated mode.
    - New: [[https://raw.githubusercontent.com/pierre-rouleau/pel/master/doc/pdf/pl-go][ùïªùî© - Go]] PDF that describes the commands available for the Go
     programming language.
  - New: *Gleam*, an Erlang BEAM language
    - New: added support for the Gleam programming language, activated when
      the *pel-use-gleam* user-option is turned on (set to *t*).  The support
      is very basic.  It provides early *gleam-mode* package when the
      *pel-use-gleam-mode* user-option is turned on.
    - New:  [[https://raw.githubusercontent.com/pierre-rouleau/pel/master/doc/pdf/pl-gleam][ùïªùî© - Gleam]] PDF.
  - New: **Haskell**
    - New: add explicit support for Haskell via the *pel-use-haskell* user-option.
      Also provide the *pel-haskell-activates-minor-modes* user-option to automatically
      activate minor modes for Haskell major mode.  The key prefix is ~<f11> SPC h~ which becomes
      ~<f12>~ in Haskell buffers.
  - New: **Nim**
    - New: add explicit support for Nim via the *pel-use-nim* user-option.
      Provides access to *nim-mode* when *pel-use-nim-mode* is turned on.
      Also provide the *pel-nim-activates-minor-modes* user-option to automatically
      activate minor modes for Nim major mode.  The key prefix is ~<f11> SPC h~ which becomes
      ~<f12>~ in Nim buffers.
  - New: **OCaml**
    - New: add explicit support for OCaml via the *pel-use-ocaml* user-option.
      Supports installation of tuareg and merlin via the *pel-use-tuareg* and *pel-use-merlin* user-options.
      Also provide the *pel-tuareg-activates-minor-modes* user-option to automatically
      activate minor modes for OCaml major mode.  The key prefix is ~<f11> SPC o~ which becomes
      ~<f12>~ in OCaml buffers.
  - Update: *Python*
    - Modified: binding to rainbow-delimiters-mode to ~<f12> M-r~ like it is
      for other programming languages.
  - New: *REXX*:
    - Add support for REXX programming language via a [[https://github.com/pierre-rouleau/rexx-mode][my forked rexx-mode
      GitHub project]] which provides:
      - [[https://github.com/pierre-rouleau/rexx-mode/commit/546d3589f0d967d01405c2a5f380bc1782672f69][support for imenu/speedbar for REXX procedure]],
      - [[https://github.com/pierre-rouleau/rexx-mode/commit/546d3589f0d967d01405c2a5f380bc1782672f69][navigation to the next/previous REXX procedure]],
      - customization control for indentation management variables.
    - New: *NetRexx*:
      - Add support for NetRexx programming language via
        [[https://github.com/pierre-rouleau/netrexx-mode][my forked netrexx-mode GitHub project]].
  - New: **Perl**
    - New: add explicit support for Perl via the *pel-use-perl* user-option.
      Also provide the *pel-perl-activates-minor-modes* user-option to automatically
      activate minor modes for Perl major mode.  The key prefix is ~<f11> SPC P~ which becomes
      ~<f12>~ in Perl buffers.
  - New: **Ruby**
    - New: add explicit support for Ruby via the *pel-use-ruby* user-option.
      Also provide the *pel-ruby-activates-minor-modes* user-option to automatically
      activate minor modes for Ruby major mode.  The key prefix is ~<f11> SPC U~ which becomes
      ~<f12>~ in Ruby buffers.
  - Update: *Rust*:
    - Modified: ‚ö†Ô∏è  *Customization affecting change*: customization setting, *pel-use-rust*,
      no longer automatically activates cargo and racer for Emacs.  These now
      have to be enabled by their own user-option variable.  The user-option
      variables controlling Rust support are now the following:
      - *pel-use-rust*: must be turned on (set to t) to activate Rust support.
      - *pel-use-rust-mode*: activates the use of rust-mode.
      - *pel-use-rustic*: activates the use of rustic.  Both rust-mode and
        rustic may be enabled if needed.
      - *pel-use-flycheck-rust*: activates flycheck for Rust code.
      - *pel-use-emacs-racer*: activates Emacs Racer for Rust.
      - *pel-use-cargo*: activates Emacs Cargo for Rust.
    - New: Added a Rust-specific key prefix (=pel:for-rust=) accessible
      globally  via ~<f11> SPC r~ and inside a Rust mode via ~<f12>~.
      This prefix key provides access to Rust specific commands, which include:
      - The ~<f12> <f1>~ key opens the preliminary  [[https://raw.githubusercontent.com/pierre-rouleau/pel/master/doc/pdf/pl-rust.pdf][ùïªùî© - Rust PDF]].
      - The ~<f12> <f2>~ key opens PEL Rust customization buffer.
      - The ~<f12> <f3>~ key opens the Rust customization buffer.
      - The ~<f12> c~ key builds the Rust file using *rust-run*.
      - The ~<f12> d~ key is bound to *rust-dbg-wrap-or-unwrap*.
      - The ~<f12> l~ key is bound to *rust-run-clippy*, Rust's Lint checker.
- Update: *Process execution*:
  - New: the list-processes command is now bound to ~<f11> z ?~ key
    sequence.
- Update: *Rectangles*:
  - New: the *iedit-rectangle-mode* is accessible directly with the ~C-x r RET~
    key binding.  There is no need to use the iedit-mode first.
  - New: the [[https://raw.githubusercontent.com/pierre-rouleau/pel/master/doc/pdf/rectangles.pdf][‚ÖÄ Rectangles PDF]]describes the *iedit-rectangle-mode* and available
    commands.
- Update: *Searching*:
  - New: support for combined expression search with the
    [[https://github.com/TobiasZawada/cexp][cexp external package]]:
    - PEL downloads and activates the cexp package when the *pel-use-cexp*
      user-option is set to *t*.
    - PEL binds ~<f11> s c~ to *cexp-search-forward* command used to perform
      a combined expression search.  Quite useful to search strings inside a
      balanced/matching pair of parentheses for example.
  - New: command *pel-show-search-status* bound to ~<f11> s ?~ that displays
    all search settings in the echo area.  Use any prefix argument to display
    extra information after the first time it is used.
  - Improved: *pel-search-word-from-top* :
    - New: mapped *pel-search-word-from-top* to ~<f11> s .~ key sequence and
           to the ~.;~ key chord.
    - New: *pel-search-word-from-top* can now search for the title format of a
      user-option when searching into a buffer in Custom-mode.  Use the
      numeric prefix in the range 30 to 38 for that. For example if you issue
      the command when point is over *pel-use-ido*, the command searches for
      the title "Pel Use Ido: ".
    - New: the *pel-search-from-top-in-other* user option controls how
      *pel-search-word-from-top* operates when there is only 2 non-dedicated windows.
      - if set to *t* the function the search in the other window without
        specifying any numeric argument when there is only 2 non-dedicated
        windows.  To search in the current window when there is only 2
        non-dedicated windows use the numeric prefix 3 or 5
        (or either close all other windows or create another window before the
        search making the number of windows 3 and preventing the search in other
        window unless the numeric argument is 0).
      - if the user option is set to nil, then the function always operate the
        same way, regardless of the number of windows: it searches in the
        current buffer unless a numeric argument identifies another window.
    - New: it search for text from marked area; this enables searching for anything,
      not just words.  It is useful in modes where super-word mode is not
      honoured.
    - New: it toggle text mode and search in window selected by a numbered
      prefix in the following ranges:
      - a numbered prefix in the range [10..18] grab the word with subword
        mode temporarily activated and then select the window as if the
        numbered prefix was 0 to 8.
      - a numbered prefix in the range [20..28] grab the word with super-word
        mode temporarily activated and then select the window as if the
        numbered prefix was 0 to 8.
    - New: on search failure it no longer moves point, not even to the
      different window that may be identified. It issues an error
      (beep/flash/message depending on the settings) which allows using the
      command inside a keyboard macro.  A keyboard macro will stop on the
      search failure.
  - Improved *iedit-mode support*:
    - New: added key bindings for the iedit-mode commands that are not
      accessible in terminal mode:
      - ~<f1> <f1>~ is bound to iedit-help-for-help.
      - ~<f1> <f2>~ is bound to iedit-help-for-occurrences.
      - ~<f1> C-o~ is bound to iedit-show/hide-occurrence-lines.
      - ~<f1> C-a~ is bound to iedit-show/hide-context-lines.
    - New: modified some iedit-mode command bindings for commands that
     clashed with major command PEL bindings:
      - ~M-C~ is bound to iedit-upcase-occurences instead of ~M-U~ which
        remains bound to pel-redo.
      - ~<f1> M-c~ is bound to iedit-toggle-case-sensitive instead of
        ~M-C~.
      - Use ~M-c~ to change occurrence to lower case and ~M-C~ to change
        occurrences to upper case. Similar to what is available under PEL.
- Update: *Sessions*:
  - New: added a desktop restoration handler for edts-mode: it protects
    desktop restoration against failures in edts-mode and reports them by
    messages. It also deactivate edts-mode when the mode activation failed.
    This is done to prevent a failed edts-mode from showing it is activated
    when it is not.
- Update: *Shells*:
  - *Change*: the key prefix changed from ~<f11> x~ to ~<f11> z~.
    The letter ~z~ is normally used in Emacs for commands related to shells.
- Update: *Skeletons*:
  - Modified: Improved the handling of C-like modes for file header blocks:
    - prevent insertions of empty lines when a file header is inserted in
      non-empty file,
    - terminate C-style comments with 1-star continuation properly.
- Update: *Speedbar*:
  - New: Better handling of target selection of the SR-Speedbar controlled by:
    - A new *pel-sr-speedbar-toggle-select-behaviour* user-option selects
      the behaviour of the SR-Speedbar selection action from the following 2:
      - Move point into the window of the selected target (PEL's default),
      - Keep point inside SR-Speedbar window after opening the selected target
        into a (possibly new) window.  sr-speedbar only offers this behaviour.
    - The new *pel-sr-speedbar-toggle-select-behaviour* command, mapped to
      ~<f11> M-s M-b~ key sequence, allowing you to choose the SR-Speedbar
      selection behaviour that suits you best and change it dynamically when the
      need occurs.
  - Update: Changed key bindings for easier typing: All =pel:speedbar= keys
    use the Meta key.
  - New: the *pel-speedbar-focus-current-file* command updates the SR-Speedbar
    to show the list of items for the current file at the top of the speedbar.
  - New: Added support for [[https://github.com/anshulverma/projectile-speedbar][projectile-speedbar]] activated by the
    *pel-use-projectile-speedbar* user-option..  Once projectile is activated
    and a speedbar is opened, set the speedbar to encompass all current
    project directories and files with it.  The key binding is ~<f8> M-s~.
- New: *Text Display Control*:
  - New: add support for the [[https://github.com/cpitclaudel/easy-escape][easy-escape]] external package to simplify the
    display of regular expression strings:
    - Activated by *pel-use-easy-escape* user-option.
    - The *pel-modes-activating-easy-escape* user-option identifies the major
      modes where the easy-escape minor mode is automatically activated.
    - The new ~<f11> "~ key binding to *easy-escape-minor-mode* allows quick
      toggle of the easy-escape minor mode.
    - The command is described in the [[https://raw.githubusercontent.com/pierre-rouleau/pel/master/doc/pdf/search-replace.pdf][‚ÖÄ Search/Replace PDF]].
- Update: *Text Insertion*:
  - New: Add ability to insert Greek letters:
    -  If the *pel-activate-f9-for-greek* user-option is turned on (set to t),
       then typing ~<f9>~ followed by a letter inserts the corresponding Greek letter.
    - The same is always available with the ~<f6> g~ key prefix.
    - To see the latin to greek equivalent type the key prefix and wait for *which-key*
      to show the available bindings, or type the key prefix followed by ~C-h~.
  - New: add more PEL insertion commands under the ~<f6>~ key prefix for convenience.
  - New: Add support for *smartparens* external package when the
    *pel-use-smartparens* user-option is turned on (set to *t*).
  - Modified: key binding to *pel-toggle-update-copyright-on-save* from
    ~<f11> M-C~ to ~<f11> M-@~.
  - Modified: key bindings, using more lower case letters:
    - ~<f6> f~ and ~f11> i f~ are now used instead of ~<f6> F~ and
      ~<f11>> i F~ for **pel-insert-filename*,
    - ~<f11> i c~ is used instead of ~<f11> i C~ for *copyright*.
  - New: key bindings:
    - ~<f11> i M-t~ bound to *time-stamp-toggle-active*,
    - ~<f11> i M-c~ bound to *copyright-update*.
  - Improved: generic file mode/header template insertion (~<f6> h~)
    and separator line insertion (~<f6> l~) now get comment style from
    user if they are not already defined.
- Update: *Text Modes*:
  - New: *glasses-mode* is now bound to ~<f11> t m g~ key sequence.  The
    *pel-show-text-modes* command (bound to ~<f11 t m ?~) now also display
    the state of glasses-mode.
  - New: overwrite-mode is also bound to the ~<Esc><kp-0>~ key sequence.  This
    makes it very similar to the default ~<insert>~ key which is not available
    in macOS keyboards.
- Update: *VCS*:
  - New: The *pel-use-gitignore-mode* user-option activates support for the
    *gitignore-mode*, *gitattributes-mode* and the *gitconfig-mode*.
  - New: The *pel-use-hgignore-mode* user-option activates support for
    *hgignore-mode* when turned on (set to t).  This provides font locking for
    the Mercurial .hgignore files.
- Update: *Windows Management*:
  - The Windows Hydra now provides quick access to the
    *pel-toggle-window-dedicated* command which toggles the dedicated state
    of a window.
  - Add support for the *windresize* external package:
    - Activate it by setting *pel-use-windresize* to *t*.
    - The windresize command is bound to the ~<f11> w r~ key sequence.
** Other Modifications:
- The customization group pel-pkg-for-xref is now a child of
  pel-pkg-for-navigation and holds tags based cross-reference build control as
  well as non-tags based such as [[https://github.com/jacktasia/dumb-jump][dump-jump]].
- Code change: renamed pel-tags.el to pel-xref.el to better reflect its nature.
- New: ``make it`` command used for development: compiles all Emacs Lisp
  files, runs the tests but does not build the package.
** Reference PDF updates:
+ Update: More consistency in the key binding cell background colors.
+ New: Some of the header cells are coloured to help quickly identify the
  nature of a group of commands inside a long table.  This is mainly used in
  reference tables describing programming language support.
+ New: added background colours to key sequence cells to highlight the fact
  that some key sequences are only available for specific major or minor modes
  or when point is over text that has been turned into a button.
+ Update: [[https://raw.githubusercontent.com/pierre-rouleau/pel/master/doc/pdf/align.pdf][‚ÖÄ Align]] better describes handling of indentation on ~M-RET~.
+ New: [[https://raw.githubusercontent.com/pierre-rouleau/pel/master/doc/pdf/-index.pdf][‚û¢Index]] PDF which holds links to all other PDF tables.
+ Update: [[https://raw.githubusercontent.com/pierre-rouleau/pel/master/doc/pdf/grep.pdf][‚ÖÄ Grep PDF]] describes ag and ripgrep menu.  Also references projectile-based
 search commands.
+ Update: [[https://raw.githubusercontent.com/pierre-rouleau/pel/master/doc/pdf/help.pdf][‚ÖÄ Help PDF]] better introduces reader to getting help from Emacs and
  PEL.
+ Update: [[https://raw.githubusercontent.com/pierre-rouleau/pel/master/doc/pdf/input-method.pdf][‚ÖÄ Input Method]] also includes information about encoding.
  The ~<f11> ? p~ key binding completion allows "encoding" to open that PDF.
+ Update: [[https://raw.githubusercontent.com/pierre-rouleau/pel/master/doc/pdf/completion-input.pdf][‚ÖÄ Input Completion PDF]] table better describes Ido, Ivy and Helm and the
  commands that PEL supports to change mode dynamically.
+ New:  [[https://raw.githubusercontent.com/pierre-rouleau/pel/master/doc/pdf/completion-input-availability.pdf][üö¶Input Completion Availability PDF]] table describes the feature
  availability of the various input-completion methods supported by PEL.
+ New: [[https://raw.githubusercontent.com/pierre-rouleau/pel/master/doc/pdf/treemacs.pdf][‚ÖÄùîõ Treemacs PDF]]
+ Update: [[https://raw.githubusercontent.com/pierre-rouleau/pel/master/doc/pdf/indentation.pdf][‚ÖÄ Indentation]] better describes handling of indentation on ~M-RET~.
+ Update: C, C++ and D programming language support tables.
+ Update: [[https://raw.githubusercontent.com/pierre-rouleau/pel/master/doc/pdf/pl-python.pdf][ùïªùî© - Python]] programming language : listed more commands.
+ Update: [[https://raw.githubusercontent.com/pierre-rouleau/pel/master/doc/pdf/rectangles.pdf][‚ÖÄ Rectangles PDF]] better describes how to mark rectangle areas.
+ Update: [[https://raw.githubusercontent.com/pierre-rouleau/pel/master/doc/pdf/search-replace.pdf][‚ÖÄ Search/Replace PDF]] describes the superword-mode, subword-mode better, and
  includes description of the projectile commands.  It also describes all
  iedit-mode commands.
+ Update: [[https://raw.githubusercontent.com/pierre-rouleau/pel/master/doc/pdf/text-modes.pdf][‚ÖÄ Text Modes PDF]] describes the superword-mode, subword-mode better, and new
  key binding to overwrite-mode (~<Esc><kp-0>~).
+ Renamed ‚ÖÄ Tags to [[https://raw.githubusercontent.com/pierre-rouleau/pel/master/doc/pdf/xref.pdf][‚ÖÄ Xref]]; the PDF will describe several cross-referencing
  mechanisms, not just the tags-based mechanisms.
+ Update: [[https://raw.githubusercontent.com/pierre-rouleau/pel/master/doc/pdf/undo-redo-repeat.pdf][‚ÖÄ Undo/Redo/Repeat/Arg]] better describes how to repeat commands.
+ Update: [[https://raw.githubusercontent.com/pierre-rouleau/pel/master/doc/pdf/windows.pdf][‚ÖÄ Windows]] now describes the new Esc and ~<f1>~ cursor keys to manage
  and navigate across windows.
+ Updates to the Buffer, CUA, Cut & Paste, Marking, Undo PDF reference tables.
+ New: [[https://raw.githubusercontent.com/pierre-rouleau/pel/master/doc/pdf/pl-make.pdf][ùïªùî© - Make]] PDF that describes make file editing support.
+ New: [[https://raw.githubusercontent.com/pierre-rouleau/pel/master/doc/pdf/pl-forth.pdf][ùïªùî© - Forth]] PDF describing support for the Forth programming language.
+ New: [[https://raw.githubusercontent.com/pierre-rouleau/pel/master/doc/pdf/pl-netrexx.pdf][ùïªùî© - Netrexx]] PDF describing support for the NetRexx programming
  language.
+ New: [[https://raw.githubusercontent.com/pierre-rouleau/pel/master/doc/pdf/pl-rexx.pdf][ùïªùî© - REXX]] PDF describing support for the REXX programming language.
+ New: [[https://raw.githubusercontent.com/pierre-rouleau/pel/master/doc/pdf/mode-markdown.pdf][‚±Æ Markdown PDF]], describing markdown support.
+ New: [[https://raw.githubusercontent.com/pierre-rouleau/pel/master/doc/pdf/macOS-keys.pdf][Ô£ø macOS Keys ]]PDF that lists and describes the macOS specific keys.
+ New: [[https://raw.githubusercontent.com/pierre-rouleau/pel/master/doc/pdf/-CRiSP-Emacs.pdf][‚û¢CRiSP ‚û´ Emacs] PDF for Brief and CRiSP users.  It lists the
  correspondences between Brief/CRiSP with CRiSPer and Emacs with PEL.
** Use Manual Additions and Improvements:
- Added instructions on how to install
  [[https://www.gnu.org/software/global/][GNU GLOBAL source code tagging system]] gtags utility with its [[https://pygments.org][Pygments]] and
  [[https://ctags.io][Universal-Ctags]] plugins to support gtags-based tags management within
  Emacs. This includes a small example shells script: [[https://github.com/pierre-rouleau/pel/blob/master/bin/envfor-gtags][envfor-gtags]].
- Better description of how to write customize tempo skeletons.
** Bug Fixes:
- Fix: Inside Common Lisp buffers, PEL's mechanism to access help and
  customization through the ~<f12> <f1>~, ~<f12> <f2>~ and ~<f12> <f3>~
  failed to open the file or buffer.
  - Root cause: a missing format specifier prevented the error detection
    mechanism to detect a missing entry in the look up table: support for
    lisp-mode was missing, just its alias, common-lisp-mode was present.
    - Lesson Learned: Emacs 26.3 and 27.1 byte compiler as well as elint do
      *not* detect this type of error, at least inside a ``user-error`` form!
      Might need to investigate this, either contribute a fix or find a way to
      detect this kind of coding errors.
      - Probably a good time to schedule a try the [[https://github.com/emacs-elsa/Elsa][Elsa]] static analyzer for
        Emacs Lisp and all that needs to be done to use it (you
        need [[https://github.com/cask/cask][Cask]] to use it).
- Fix: The history prompt was previously failing for ``pel-help-pdf-select``
  and ``pel-open-emacs-refcard`` (which was added after PEL 0.3.1) when input
  completion was set to Helm or Ido/Helm but not for the other input
  completions. This was fixed.
  - Root cause: the completing-read functions were given a symbol for the history
    and relied on the completion-read to create the variable.  That failed in
    helm. The fix is to explicitly create list variables and used them.  The
    docstring of completing-read does not explicitly state that the specified
    symbol must refer to an already existing variable and the code worked fine
    with Emacs default completion, ido and ivy. So I'm unsure as to whether
    there should be a variable or whether there's a bug in Helm. Any,
    explicitly creating the variable is protecting against any issue.
    - Lessons learned:
      - This is an example of the "never ass-u-me" rule where
        even reading the docstring and testing with the existing completion
        engines but not all of them right from the a fresh Emacs session did not
        dissipate uncertainty and left the bug dormant.
      - I will probably need a complete testing system that tries every
        combination of features.  At this point I'm not sure how to build it,
        since PEL is integrating so many Emacs libraries and packages.
        Perhaps I will need a system that would be able to drive the test
        right from Emacs user interface.  But one thing for sure I need to be
        able to execute the various tests in a fresh Emacs session to catch
        these types of bugs.
- Fix: The key binding for the *centi-assign* command identified by
  *pel-centi-assign-key* user option takes effect when pel-init executes as
  opposed to when the centimacro feature is loaded as before, allowing it to
  load the centimacro feature.
- Fix: definitions of PEL key-chord or key-seq properly support the
  identification of a command by its name.
- Fix: Replaced ``pel-insert-c-indent`` by ``pel-indent-lines`` and
  ``pel-unindent`` by ``pel-unindent-lines``.  The new functions handle all
  file types as opposed to only the files with a major mode derived from CC
  mode. They also allow any type of marking which they convert into a
  line-type region mark to allow consecutive execution of the line indent and
  line un-indenting commands.  The region is kept and no longer grows or shrink
  in some scenarios as before.
- Fix: typos in names of *goto-address-mode* and *goto-address-prog-mode* that
  prevented their ~<f11> f~ key bindings from working.
** Work-Around for Emacs Bugs:
- Emacs 26.3 and 27.1 suffer from [[https://debbugs.gnu.org/cgi/bugreport.cgi?bug=44494][bug 44494]] where etags.el
  xref-location-marker does not handle TAGS references to  .el.gz compressed
  files. This prevents the xref-etags-mode to properly handle those
  references.  I proposed a solution to this problem but until this, or
  another solution is implemented to solve the problem, I implemented my own
  solution, stored it inside the pel-etags.el file to replace the etags.el
  code that fails.  The Makefile does not byte compile that file; it is just
  loaded when the xref-etags-mode starts via a hook.  This file is not
  stand-alone, that's why I don't byte compile it via make.  It can be byte
  compiled when PEL is running if you want but its not necessary.   I will
  remove this file and the hook once the Emacs bug is fixed.
* Version 0.3.1
** Fixes:
  - Spell check control user options and handling now simpler and don't have type
    mismatch that prevent customization buffer to edit the values.
** New Features and improvements:
  - New: In Emacs Lisp mode: new key binding for eldoc-mode: <f12> e
  - New: eldoc-box now available in graphics mode when pel-use-eldoc-box is
    set to *t*. Two new keys in the <f12> for Emacs Lisp mode:
    - <f12> b : eldoc-box-hover-at-point
    - <f12> B : eldoc-box-hover-mode
  - New: user option pel-windmove-on-esc-cursor controls whether PEL binds the
    Esc-cursor keys to windmove commands. It is on by default. Users of
    Org-mode will probably want to turn it off.
** Modifications:
  - Change: vlang-mode.el repo was renamed to vlang-mode.  Updated download
    control code accordingly.
* Version 0.3.0
- This includes slots of cleanups, several new modes, new key
  bindings, better installation procedure, several bug fixes.  I continue to
  consider it a project in early development but only because it's lacking a
  lot of features I'd like to integrate for software development in several
  programming languages.  I am using it continuously though on Emacs 26.3 on
  macOS Mojave and tested on some other platforms:
  - Linux Fedora 32 with Emacs 27.1
  - Linux Mint 20 with Emacs 26.3
  - Linux Ubuntu 20.04 with Emacs 26.3
** Fixes:
  - Fixed distributed custom skeleton code for C.  Updated the example description.
  - *Window flipping commands*: The keys to flip windows horizontally (<f11> w
    h) and vertically (<f11> w v) are now safer.  They now take into account the
    minibuffer and dedicated windows and only operate on the current frame.
  - pel-find-file-at-point properly handle relative file names.
  - popup-kill-ring binding is now <f11> M-y to prevent a clash with PEL's
    yasnippet key prefix (<f11> y).
  - Added missing key-seq loading.
  - Added missing key-chord installation.
  - pel-initial-completion-mode can now be edited properly.  The default value
    is now valid.
  - User Manual fixes:
    - User manual installation now properly references the "/.emacs.d" directory.
      and no longer references the "/.emacs.p" directory.
** New Features and improvements:
  - *New/modified global keys (and commands)*:
    - New: the M-D key binding kill next word(s) and delete white-space after the
      last word killed, bringing the next word just at point.
    - New navigation key sequences:  navigation across windows:
      - The <Esc> key followed by the cursor pointing in the direction of
        the window are now bound to the corresponding wind move command. In graphics
        mode,  the <Esc> key followed by a Shift cursor key pointing in the
        direction of the other frame move point to that frame using the
        corresponding fm command.  This works everywhere except in Org-Mode where
        the <f11> based key sequences can be used instead.  The Esc based movements
        are useful in the active vterm window.
    - New: the M-RET key can be used to align text vertically in some modes.
    - New: the prefix set member key to quickly access customization buffer groups is
      now <f2> instead of <f1>. The prefix set member key <f1> is now used to open
      the local copy of the PDF that describes the topic(s) that manipulate the
      commands executed by the keys under the same key prefix.   This feature,
      along with all hyperlinks allow a user to quickly navigate through the PEL
      documentation inside the PEL manual hosted on Github, the local PDF files
      and the PDF files hosted on Github.
    - New key binding to the customize browsers which allow you to navigate
      the customize data tree:
      - <f11> <f2> B browse the customize tree from the top.
      - <f11> <f2> P B browse the customize tree from the top of the PEL
        customize tree.
    - New: Added a new PEL key map tree for browsing
      - <f11> B N : for NeoTree.  Removed the previous <f11> N  key sequence.
      - <f11> B Z : for ZTree.  Removed the previous <f11> Z key sequence.
      - <f11> B T: for early support of treemacs.  Its support is not complete yet.
    - Modified: the new binding to bm-toggle (<f1> ‚Äò ‚Äò) is easier to type than
      the old one (<f11> ‚Äò t)
    - Modified: re-organized the key sequences to provide access to the
      reference PDF, the PEL customization and the Emacs customization buffer
      for topics accessible via a key sequence inside a PEL key-map:
      - The key sequences start with the prefix for the PEL key map and end with
        <f1> for help, <f2> for PEL customization buffer, <f3> for Emacs
        customization buffer.
      - The <f11> <f2> provides access to the commands to access customization
        search:  (c), to the customization buffer option (o) and to a
        customization group (g).
      - The <f11> <f2> E provides access to some Emacs customization groups.
      - The <f11> <f2> P provides access to some of the PEL customization groups
        that are not accessible from a specific PEL key map.
      - The <f11> <f2> SPACE provide access to the programming specific groups
        that do not have a specific key map: this includes lisp for the moment.
      - The <f11> ? p key sequence provide access to all reference PDF files
        (either the local copy or the GitHub-hosted web page) and support tab completion.
    - Modified: more consistent key binding for the PEL customization of
      key-chords: now use:  <f11> <f2> P M-K
    - Modified: PEL Hydras are no longer terminated by typing ‚Äòq‚Äô, they are
      terminated by typing <f7>, the same key tart starts it.
      The ‚Äòq‚Äô key is used to execute the quit-window command.  Use it to
      change the buffer seen in the current window. The loading of PEL Hydras is
      no longer time delayed: it‚Äôs loaded on demand.
    - Modified: more keys in the window Hydra, pel-‚àëwnd: q to quit window, b and B to change
      buffer in current window. Also changed the key to kill current buffer: it‚Äôs
      k instead of K.
    - Modified: Replaced the "fg" key-chord with a "gf" key-seq.  This is much less likely
      to cause unwanted and surprising point movements to the window at left.
*** New supported Modes:
    - Support for lispy, a modal editing mode for Lisp-like programming languages.
    - Support for lpy, a lispy mode for Python.
    - Support for AsciiDoc via the adoc-mode.
    - Support for external packages that extend Emacs keyboard macro
      support: centimacro, elmacro and emacros.  Both centimacro and emacros
      libraries supported by PEL are forked of the original libraries with bug
      fixes and improvements.
    - Added support for all-the-icons.
      - In text mode it provides arrows for the NeoTree window.
      - In Graphics mode, provides icons for NeoTree, dired, ibuffer and ivy when
        their respective pel-use- user options are activated.
    - Experimental support for vlang-mode: support for the emerging V
      programming language.
    - Experimental support for js2-mode: support for Javascript.
*** Improved behaviour:
    - pel-kbmacro-prompts user option is now off by default to mimic Emacs.
    - Visible bookmarks no longer deferred loaded: loaded on demand: first
      time a bound-key is typed.
    - In graphic mode, the extra keys for windmove are loaded after 1 second instead of 5.
*** Improved commands:
    - The keys to flip windows horizontally (<f11> w h) and vertically (<f11> w v)
      are now safer.  They now take into account the minibuffer and dedicated
      windows and only operate on the current frame.
    - The commands that provide access to the local copy of the reference PDF
      files can also open the Github-hosted PDF file in the system browser.
    - Temporarily set max-specpdl-size to 2000 while running benchmark-init
      commands to handle large set of packages.
*** Improved customization:
    - Regrouped the PEL customization groups.
    - Cleanup PEL customization group hierarchy. Modified key bindings to access
      customization groups to make it easier to remember.
    - New PEL user option for spell checker control: pel-spell-check-tool.  This
      replaces the old one that was used to define the spell checker program for
      several OS.  The new one is simpler to use.
    - It is now possible to identify the major modes that will automatically
      activate the superword-mode and subword-mode: the user options
      pel-modes-activating-superword-mode and
      pel-modes-activating-subword-mode identify the respective modes.
** User Manual changes and additions:
  - Fixed typos in the manual installation instructions: ‚Äú./emacs.d‚Äù is now
    ‚Äú/.emacs.d‚Äù
  - Re-organized the installation sections trying to highlight the commands to
    execute.
  - Added a fast-track section to the installation section, easier to follow
    than the complete sections with all the descriptions.
  - Added copies of several versions of init.el.  They correspond to what is
    needed by the installation steps and are also used in the new *fast track*
    installation instructions.  The files are stored the new example/init
    section of the repository.
  - The installation instructions for new users now recommends the use of
    pel-browse-pel to open the customize tree browser buffer to customize PEL
    the first time it is used.
  - A new section describes the Emacs user options that new users may want
    to set.
  - The repository now provides example of Bash alias commands to use a quick
    keys to launch emacs (see the "example/bin" directory).
** Reference PDF updates:
  - Added hyperlinks in all PDF files.  The See also and title icons are now all links.
  - The help and customize PDFs have a lot of links to the of them PDF pages.
  - Reduced the empty white space in several tables.
  - Added the ‚û¢PEL page that lists all PEL key maps.
  - Added a ùïªùî©‚±Æ- Lispy PDF with links to lispy quick sheet sections.
  - Added ‚±Æ AsciiDoc page.
  - The ‚ÖÄ Align page describe how to use M-RET to align text vertically
  - Updated the ‚ÖÄCustomize PDF and ‚ÖÄHelp PDF wit hall changes in customization
    and access to the reference PDF files.
  - Improved the ‚ÖÄWindows PDF with several new links and complete description of ace-window.
  - Completed the ‚ÖÄProjectile PDF.
  - Updated  ‚ÖÄInput-Completion PDF
  - Identified Esc C- and C-[ C- key sequence alternatives for the for C-M-
    bindings in several locations in the PDFs (but not all yet).
  - Fixed errors and cleaned up several PDFs
- *Code Changes*:
  - pel-autoload.el now uses a pel-autoload macro to provide a more regular,
    cleaner syntax code easier to maintain and possibly for future automatic
    code generation.
* Version 0.2.0
- Lots of updates since version 0.1.0, too many to describe here.
  PEL is still in what I consider an early development phase.
  Although most base features are stable, there's still several rough edges,
  lots of packages and programming languages I want to support are not
  properly supported.
  - I changed the instructions for installations on a new computer.
  - Added lots of cross-reference links between the PDF sheets.
  - Implemented a tempo skeleton generic file header block generation, and
    specialized ones for C, Erlang and reStructuredText files.
  - Support for Erlang and C is mostly complete, but there are several packages
    not supported yet.
  - Added support for sessions, projectile, hiding comments, hiding docstrings.
  - Added ability to automatically download and install packages from some
    non-Elpa compliant web sites (but path of Github) like EmacsAttic and
    EmacsMirror.
  - Support for generation of images using PlantUML and Graphviz Dot directly
    from within Emacs.
  - Support for several ways to deals with keys: Hydras, key-chord and key-seq,
    avy and ace-link.
  - Support for voice dictation under macOS and AppleScript.
  - Support for auto-completion using either auto-complete or company.
  - Support for input completion with Help, Ivy, Ivy/Counsel as well as Ido.
  - Support for bookmark management with bm.
  - Support for virtual-regexp
  - Key bindings to quickly access the customization buffer of several
    customization groups.
  - and more...
* Version: 0.1.1
** new features:
  - rst support: added commands for text emphasis (bold, italic, literal, interpreted).
  - modified keymap: draw is now ~<f11> D~.
  - added support and documentation for diff/ediff (with keymaps ~<f11> d~ and ~<f11> e~.
  - Added support for Magit and Monky and ~<f11> v~ keymap for (D)VCS.
  - Added *pel-end-of-line* which helps move before trailing spaces.
  - Documentation: documented autoave & backup
  - Documentation: described limitations in the dual-stage autoloading.
** fixes:
  - navigation: fixed autoloading
* First Version: 0.1.0
- This is the very first version of PEL, the Pragmatic Environment Library.

  - As described in [[https://github.com/pierre-rouleau/pel/blob/master/doc/pel-manual.rst#overview][PEL manual overview]] PEL is a hybrid package.
    It is:
    - a [[https://github.com/pierre-rouleau/pel/blob/master/doc/pel-manual.rst#pdf-document-tables][collection of PDF]] files that document Emacs key bindings that covers
      standard Emacs key-bindings but also the key bindings provided by PEL and
      the external packages PEL uses.
    - an Emacs key binding documentation project
      (see [[https://github.com/pierre-rouleau/pel/blob/master/doc/pel-manual.rst#pel-key-bindings][Key Bindings Documentation]]),
    - a collection of [[https://github.com/pierre-rouleau/pel/blob/master/doc/pel-manual.rst#id26][PEL convenience features]]  which:

      - are implemented in several mostly independent files,
      - have key bindings mostly using the function keys to provide
        key map trees that do not interfere with standard Emacs key bindings,
      - provide access to several other external Emacs packages (see [[https://github.com/pierre-rouleau/pel/blob/master/doc/pel-manual.rst#credits][Credits]])
        but via [[https://github.com/pierre-rouleau/pel/blob/master/doc/pel-manual.rst#pel-customization][PEL Customization]] to selectively configure, enable and activate
        these features.
        - This conforms to the [[https://github.com/pierre-rouleau/pel/blob/master/doc/pel-manual.rst#pel-customization][Emacs easy customization]] system and reduces your
          need to write custom Emacs Lisp configuration code.
  - PEL is distributed via the [[https://github.com/pierre-rouleau/pel][PEL Github repository]] and provides a Makefile to
    automate the compilation and a large part of the installation of PEL and its
    dependencies.
  - PEL is not yet distributed via sites like MELPA but
    [[https://github.com/pierre-rouleau/pel/blob/master/doc/pel-manual.rst#how-to-install-pel][PEL's installation instructions]] should alleviate this problem.

#  LocalWords:  Pygments speedbar gxref rtags ggtags RTags eopengrok
