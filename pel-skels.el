;;; pel-skels.el --- Base code skeleton utilities  -*- lexical-binding: t; -*-

;; Copyright (C) 2020  Pierre Rouleau

;; Author: Pierre Rouleau <prouleau001@gmail.com>

;; This file is part of the PEL package
;; This file is not part of GNU Emacs.

;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;; -----------------------------------------------------------------------------
;;; Commentary:
;;
;; This file defines a set of functions used to create code generation tempo
;; skeletons that may be used for several programming and markup languages.
;; These are used in other pel-skel files.

;; --
;; Basic formatting

(defun pel-skel-header (func)
  "Insert skeleton generated by FUNC at beginning of buffer and goto first mark."
  (goto-char (point-min))
  (save-excursion
    (funcall func))
  (funcall (symbol-function 'tempo-forward-mark)))

(defun pel-skel-skip-blank ()
  "Move back, skip all whitespace, insert nothing."
  (skip-chars-backward " \t")
  nil)

;; --
;; Tempo-compliant skeleton inclusion

(defun pel-skel-include (&rest forms)
  "Include a tempo template inside another one.
Used like this:
  (defvar fct-skel '(\"%%% Important function:\"
                     (pel-skel-include pel-skel-erlang-func)))

This returns what tempo expects: a list form with the symbol
'l as the first element and the FORMS specified expanded."
  (let (result)
    (dolist (form forms)
      (dolist (elem form)
        (setq result (cons elem result))))
    (cons 'l (nreverse result))))

;; --
;; Date and time

(defun pel-date (&optional utc)
  "Return a YYYY-MM-DD (ISO 8601 conforming) date.
Return a UTC Date Time if UTC is non-nil."
  (if utc
       (format-time-string "%F %T (UTC)" nil t)
     (format-time-string "%F")))

(defun pel-time-stamp (event &optional user-text utc)
  "Return a YYYY-MM-DD HH:MM:SS Emacs compliant time-stamp.
The EVENT is a string placed before the time stamp.
Use UTC format when UTC is non-nil.
This time stamp will be updated automatically by Emacs on file save
when `pel-update-time-stamp' is non-nil."
  (format "%s Time-stamp: <%s%s>"
          (capitalize event)
          (if utc
              (format-time-string "%F %T (UTC)" nil t)
            (format-time-string "%F %T"))
          (if user-text
              (format ", %s by %s"
                      user-text
                      (user-full-name))
            "")))

;; -----------------------------------------------------------------------------
(provide 'pel-skels)

;;; pel-skels.el ends here
