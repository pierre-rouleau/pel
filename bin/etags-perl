#!/bin/sh
# SH FILE: etags-perl
#
# Purpose   : Build Emacs Tags file for Perl source code files.
# Created   : Tuesday, October  8 2024.
# Author    : Pierre Rouleau <prouleau001@gmail.com>
# Time-stamp: <2025-04-30 13:42:19 EDT, updated by Pierre Rouleau>
# ----------------------------------------------------------------------------
# Module Description
# ------------------
#
# Build an Emacs Tags file for all Perl source code files in the
# sub-directory tree.
# This includes all files with  the following extensions:
#
# - Perl files: .plx, .pls, .pl, .pm, .xs, .t, .pod, .cgi, .psg, .psgi
#   and the extension-less perl script files.

# ----------------------------------------------------------------------------
# Dependencies
# ------------

# - Uses fd (also named fdfind in some Linux distros like Mint) if it is
#   available.  See URL:  https://github.com/sharkdp/fd .
# - if fd/fdfind is not available, use find instead.
#
# Using fd/fdfind is preferred because it supports ignoring files identified
# by .gitignore, .ignore, .fdignore files. The fd utility can also execute
# faster than find in several scenarios.
#
# - To force use of find, set the ETAGS_USE_FIND environment variable to 1.

# - Uses etags to process files unless ETAGS_USE_UCTAGS environment variable
#   is set to 1, in which case the ctags utility is found, assuming that it
#   is the Universal Ctags utility, not any other ctag command.
#   You can also set ETAGS_USE_UCTAGS to the absolute path of the
#   Universal Ctags executable file.

#  - Uses rg to search for string files that use a Perl shebang line
#    if it is available.  Use grep otherwise.

# ----------------------------------------------------------------------------
# Code
# ----

pgm_name="$(basename "$0")"
pgm_path="$(dirname "$(readlink "$0")")"
etags_flist_fname=.etags-perl-files.txt
etags_flist_envvar_fname="$ETAGS_PERL_FILE_LIST"

print_usage()
{
    printf -- "
%s: build a etags-compliant TAGS file in the current directory
            for all Perl source code files in the directory trees
            specified on the command line.  Search for the files with
            the following extensions:
            - .pl, .pm, : searched and parsed (both by etags an uctags)
            - All shell script files that use a Perl shebang line.
            - Also searched, listed, but not processed ⚠️ :
                .plx, .pls, .xs, .t, .pod, .cgi, .psg, .psgi

         CAUTION:⚠️  notice the list of file extensions that neither
                  etags not uctags process: they ignore those extensions.
                  One way to handle those is to create symlinks files
                  pointing those unrecognized files with the symlink using
                  a .pl or .pm file extension for the purpose of building
                  the TAGS file.
                  Use the generated %s for that.

 Usage: %s h|--help
  • Print this help information.

 Usage: %s [-u] [DIRPATH ...]
        %s [-u] [--list=FILENAME]

  • [Re]build an etags-compliant TAGS file in the current directory
    for the Perl source code files found:
    - in the DIRPATH directory tree(s) identified on the command line, or
      the current directory if none is specified, or
    - in the list provided in the FILENAME specified by the --list option, or
    - specified by the ETAGS_PERL_FILE_LIST environment variable.
  • Follows symbolic links both for directories and files.
  • Overwrites any TAGS file in the current directory.
  • Stores the names of inspected files in the file named
     %s in the current directory.
  • Identifies the Perl files using one of the following methods:
    • If ETAGS_PERL_FILE_LIST environment variable exists, it uses it as
      the name of a file that holds a list of Perl files to parse.
      The name of this file can be anything except %s
      and it must exists. It it does not %s exists with an error.
      Each line of the file must identify a Perl file to parse.
    • Searches the list of Perl source code files.
      • It uses 'fdfind' or 'fd' if available, 'find' otherwise.
        - The fd utility is from: https://github.com/sharkdp/fd
        - In some Linux distros, 'fd' is renamed 'fdfind'.
      • To force the use of 'find', set ETAGS_USE_FIND environment
        variable to 1.
      • ☝️  When using 'fdfind' or 'fd', the files identified
        by the .gitignore, .ignore or .fdignore files are ignored.
  • Stores the names of inspected files in the file named
    %s stored in the same directory as TAGS.
  • Uses etags to build the TAGS file by default, but
    • -u : force use Universal Ctags (ctags) instead of etags.
    • Set ETAGS_USE_UCTAGS to 1 or to the absolute path of Universal
      Ctags executable file to force using Universal Ctags instead.
      When setting it to 1, the ctags found in PATH is expected
      to be Universal Ctags.
  • Info printed on stderr:
   • The path of the find program used and when repository ignore files
     are skipped from the scan.
   • A count of found files, and the name of the file that holds them.
 • The only output on stdout is the list of files found.
    This allows this script to be used as the first in a pipe
    to do other processing with the list of files found.
" "${pgm_name}" "${etags_flist_fname}" "${pgm_name}" "${pgm_name}" "${pgm_name}" "${etags_flist_fname}" "${etags_flist_fname}" "${pgm_name}" "${etags_flist_fname}"
    if [ "$ETAGS_USE_FIND" = "1" ]; then
        printf -- "
⚠️   ETAGS_USE_FIND is currently set to 1, forcing the use of 'find'!
    • To prevent this, set it to 0 or remove that environment variable.
    • With USRHOME, you can use setenv and clrenv.
      See: https://github.com/pierre-rouleau/usrhome
"
    fi
}

# --
# run__etags__perl -- run etags or ctags on a set of files
# ---------------
#
# Use etags to parse the source code files unless ETAGS_USE_UCTAGS
# environment variable is set to 1.  In which case it uses ctags.
# Ideally that would be the latest version of Universal ctags
# from https://github.com/universal-ctags/ctags#readme as opposed to the
# old and currently un-maintained Exeburant ctags.
# When using Emacs, Emacs provides its own ctags that is essentially etags.
# Etags generates a tag file format a little different and better suited for Emacs.

run__etags__perl()
{
    # Expects no argument, but expects a list of files to parse on stdin.

    if [ -n "$ETAGS_USE_UCTAGS" ]; then
        if [ "$ETAGS_USE_UCTAGS" = "1" ]; then
            xargs ctags --output-format=etags
            printf "Note: ETAGS_USE_UCTAGS forced using %s to process files.\n" "$(which ctags)" 1>&2
        elif [ -x "$ETAGS_USE_UCTAGS" ]; then
            xargs "$ETAGS_USE_UCTAGS" --output-format=etags
            printf "Note: ETAGS_USE_UCTAGS forced using %s to process files.\n"  "$ETAGS_USE_UCTAGS" 1>&2
        else
            printf -- "*** ERROR: %s: invalid ETAGS_USE_UCTAGS value\n" "${pgm_name}" 1>&2
            printf -- "***  ETAGS_USE_UCTAGS : %s\n" "$ETAGS_USE_UCTAGS" 1>&2
            printf -- "***  This is not 1 nor a valid executable file name.\n" 1>&2
            exit 4
        fi
    else
        # use etags
        etags -
    fi
}

# --
# Check validity of arguments

if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    print_usage
    if [ "$#" = "1" ]; then
        exit 0
    else
        exit  1
    fi
fi

# Check -u option to force use of universal ctags
if [ "$1" = "-u" ]; then
    if [ -z "$ETAGS_USE_UCTAGS" ]; then
        printf -- "%s: -u option requests use of Universal Ctags.\n" "${pgm_name}" 1>&2
        ETAGS_USE_UCTAGS=1
    else
        printf -- "%s: -u option not necessary (but does no harm).\n" "${pgm_name}" 1>&2
        printf -- " ETAGS_USE_UCTAGS is already set to: %s\n" "$ETAGS_USE_UCTAGS" 1>&2
    fi
    shift
fi

# --
#  Check --list option to extract list of Perl files.

case "$1" in
    --list=*)
    # extract the file name from the --list= option
        fname="$(echo "$1" | sed 's/--list=//g')"
        if [ ! -f "${fname}" ]; then
            printf -- "\
*** ERROR: %s: specified list file does not exist: %s
" "${pgm_name}" "${fname}" 1>&2
            exit 1
        else
            ETAGS_PERL_FILE_LIST="${fname}"
            shift
        fi
        ;;
esac

# ----------------------------------------------------------------------------
# Define a function that searches into 1 directory
# and accumulates the list of found files into the
# file '.etags-go-files.txt'.

# Identify options
case $(uname) in
    Darwin)
        find_path_option='-f'
        ;;
    Linux)
        find_path_option=
        ;;
    *)
        printf -- "*** ERROR: %s:  Error Operating System, %s, is not supported!\n" "${pgm_name}"  "$(uname)" 1>&2
        exit 1
        ;;
esac

search_with_find()
{
    # Arg: dirname : name of directory tree to search

    find -L ${find_path_option} "$dirname" \
         \(  -name "*.p[lm]"               \
         -or -name "*.pl[sx]"              \
         -or -name "*.xs"                  \
         -or -name "*.t"                   \
         -or -name "*.pod"                 \
         -or -name "*.cgi"                 \
         -or -name "*.psg"                 \
         -or -name "*.psgi"                \
         \)  -print | tee -a "${etags_flist_fname}"
}

search_with_fd()
{
    # Arg: dirname : name of directory tree to search
    # Arg: fd_pgm  : fd or fdfind

    ${fd_pgm} -L --type f       \
              -e .pl            \
              -e .pm            \
              -e .pls           \
              -e .plx           \
              -e .xs            \
              -e .t             \
              -e .pod           \
              -e .cgi           \
              -e .psg           \
              -e .psgi          \
              '' "$dirname" | tee -a "${etags_flist_fname}"
}

search()
{
    # Arg: dirname : name of directory tree to search
    # Arg: search_with : find or fd
    case "$search_with" in
        find)
            search_with_find
            ;;

        fd)
            search_with_fd
            ;;
    esac
}


search_script()
{
    # Arg: dirname : name of directory tree to search
    # add shell scripts that use Perl.
    "${pgm_path}/find-script-perl"  "$dirname" | tee -a "${etags_flist_fname}"
}

# --
# Proceed

if [ -n "${etags_flist_envvar_fname}" ]; then
    if [ "${etags_flist_envvar_fname}" = "${etags_flist_fname}" ]; then
        printf -- "*** ERROR: %s: Do NOT set ETAGS_PERL_FILE_LIST to %s\n" "${pgm_name}" "${etags_flist_fname}"1>&2
        exit 1
    fi
    printf -- "Using the file list identified by ETAGS_PERL_FILE_LIST: %s\n" "${etags_flist_envvar_fname}" 1>&2
    cp "${etags_flist_envvar_fname}" "${etags_flist_fname}"
    run__etags__perl < "${etags_flist_envvar_fname}"
else
    # Use the directory names provided on command line.
    # Check their validity.
    # Ensure that each directory specified on the command line
    # exists.  Also ensure that a directory name is not specified more
    # than once.  Use the realpath of that directory name when comparing.
    # Exit on the first error detected.
    dpaths=
    for dname in "$@"; do
        if [ ! -d "${dname}" ]; then
            printf -- "Specified directory does not exists: %s\n" "${dname}" 1>&2
            exit 2
        fi
        dpath="$(realpath "${dname}")"
        for dp in ${dpaths}; do
            if [ "$dp" = "$dpath" ]; then
                printf -- "Multiple entry of directory: %s\n" "${dname}" 1>&2
                #exit 3
            fi
            # check if new entry is a sub-directory of an exiting entry
            case "${dpath}" in
                "${dp}/"*)
                    printf -- "%s is a sub-dir of already specified %s\n" "${dname}" "${dp}" 1>&2
                    #exit 3
                    ;;
            esac
            # check if new entry is a parent directory of an existing entry
            case "${dp}" in
                "${dpath}/"*)
                    printf -- "%s is a parent dir of already specified %s\n" "${dname}" "${dp}" 1>&2
                    #exit 3
                    ;;
            esac

        done
        dpaths="${dpaths} ${dpath}"
    done

    printf --  "No list of files identified by ETAGS_PERL_FILE_LIST.\n" 1>&2
    printf --  "- Building the list of source files.\n" 1>&2

    # --
    # First prepare environment
    # Select the method to search for files.
    # - Try to use fd or fdfind if they exist,
    #   otherwise use find.
    # - Echo the actual program used to find files (on stderr).
    if [ "$ETAGS_USE_FIND" = "1" ]; then
        search_with='find'
        echo "- ETAGS_USE_FIND forces the use of find!" 1>&2
        echo "-> Using" "$(which find)"                 1>&2
    else
        if [ -x "$(command -v fdfind)" ]; then
            search_with='fd'
            fd_pgm=fdfind
            echo "-> Using" "$(which fdfind)"  1>&2
            echo "-> ☝️ Ignoring files identified in .gitignore, .ignore or .fdignore" 1>&2

        elif [ -x "$(command -v fd)" ]; then
            search_with='fd'
            fd_pgm=fd
            echo "-> Using" "$(which fd)" 1>&2
            echo "-> ☝️ Ignoring files identified in .gitignore, .ignore or .fdignore" 1>&2
        else
            search_with='find'
            echo "-> Using" "$(which find)" 1>&2
        fi
    fi


    # -- proceed
    # Rename the old list of files if it exists
    if [ -e "${etags_flist_fname}" ]; then
        mv "${etags_flist_fname}" "${etags_flist_fname}.backup"
    fi

    printf -- "Files found printed in found order (not necessarily in sorted order)\n" 1>&2
    if [ -z "$1" ]; then
        dirname="."
        search
        search_script
    else
        for dirname in "$@"; do
            search
            search_script
        done
    fi

    # Then run etags on these files, and sort them in the etags file
    sort < "${etags_flist_fname}" | uniq >  "${etags_flist_fname}.new"
    rm -f "${etags_flist_fname}"
    mv "${etags_flist_fname}.new" "${etags_flist_fname}"
    run__etags__perl < "${etags_flist_fname}"
fi

file_count="$(wc -l "${etags_flist_fname}" | awk '{print $1}')"
if [ "$file_count" = "0" ]; then
    # restore the old list of files.
    rm -rf "${etags_flist_fname}"
    if [ -e "${etags_flist_fname}.backup" ]; then
        mv "${etags_flist_fname}.backup"  "${etags_flist_fname}"
    fi
    printf -- "No files found. %s and TAGS files untouched.\n" "${etags_flist_fname}"  1>&2
    exit 1
else
  rm -rf "${etags_flist_fname}.backup"
  printf "\
  %s - %s files found and processed.
             Created: %s/TAGS
             Scanned file list stored in: %s/%s\n" "${pgm_name}" "${file_count}" "$(pwd)" "$(pwd)" "${etags_flist_fname}" 1>&2
fi

# ----------------------------------------------------------------------------
# Local Variables:
# sh-shell: sh
# End:
