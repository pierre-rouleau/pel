#!/bin/sh
#  SH FILE: etags-autotools
#
#  Purpose   : Build Emacs Tags file for GNU Autotools source code files.
#  Created   : Thursday, June 6, 2024
#  Author    : Pierre Rouleau <prouleau001@gmail.com>
#  Time-stamp: <2025-04-24 17:45:05 EDT, updated by Pierre Rouleau>
# ----------------------------------------------------------------------------
#  Module Description
#  ------------------
#
# Build an Emacs Tags file for all GNU autotools source code files in the
# sub-directory tree.  This includes:
# - the GNU makefiles: Makefile, makefile, GNUMakefile, Makefile.in
#                      and makefile.am and all .mk and .mak files.
# - the M4 files, including aclocal.m4, but also all other .m4 files.
# - configure.ac, config.h.in, config.h
#
# Usage:
#  - cd where you want to store the TAGS file
#  - etags-autotools [DIRPATH ...]
#

# ----------------------------------------------------------------------------
#  Dependencies
#  ------------

#
# - Uses fd (also named fdfind in some Linux distros like Mint) if it is
#   available.  See URL:  https://github.com/sharkdp/fd .
# - if fd/fdfind is not available, use find instead.
#
# Using fd/fdfind is preferred because it supports ignoring files identified
# by .gitignore, .ignore, .fdignore files. The fd utility can also execute
# faster than find in several scenarios.
#
# - To force use of find, set the ETAGS_USE_FIND environment variable to 1.

# - Uses (and requires) the Universal Ctags utility, not any
#   other ctags command.

# ----------------------------------------------------------------------------
#  Code
#  ----

pgm_name="$(basename "$0")"

print_usage()
{
    printf -- "
%s: build an etags-compliant TAGS in the current directory
                 for all GNU Autotool and GNU Make source code files in
                 the specified directory tree(s).

 Usage: %s -h|--help

  • Print this help information.

 Usage: %s [DIRPATH ...]

  • [Re]build an etags-compliant TAGS file in current directory
    for the GNU Autotool and GNU Make source code files found:
    - in the DIRPATH directory tree(s) identified on the command line, or
      the current directory if none is specified.
  • Follows symbolic links both for directories and files.
  • Uses Universal Ctags to build the TAGS file by default.
    Emacs etags does not support M4, autoconf and automake.
    • ctags is expected to be Universal Ctags executable file.
  • Overwrites any TAGS file in the current directory.
  • Inspects content of the Makefile, makefile, GNUMakefile,
     Makefile.in, makefile.am and .mk and .mak files.
     It also inspects the .m4, the configure.ac, config.h.in
     and config.h files.
  • Stores the names of inspected files in the file named
    .etags-autotools-files.txt in the current directory.
  • Uses fast 'fdfind' or 'fd' if available, 'find' otherwise.
    - The 'fd' utility is from: https://github.com/sharkdp/fd
    - In some Linux distros, 'fd' is renamed 'fdfind'.
  • To force the use of 'find', set ETAGS_USE_FIND environment
    variable to 1.
  • ☝️  When 'fdfind' or 'fd' is used, the content of files identified
    by the .gitignore, .ignore or .fdignore files are ignored.
  • Info printed on stderr:
   • The path of the find program used and when repository ignore files
     are skipped from the scan.
   • A count of found files, and the name of the file that holds them.
 • The only output on stdout is the list of files found.
    This allows this script to be used as the first in a pipe
    to do other processing with the list of files found.
" "$pgm_name" "$pgm_name" "$pgm_name"
    if [ "$ETAGS_USE_FIND" = "1" ]; then
        printf -- "
⚠️   ETAGS_USE_FIND is currently set to 1, forcing the use of 'find'!
    • To prevent this, set it to 0 or remove that environment variable.
    • With USRHOME, you can use setenv and clrenv.
      See: https://github.com/pierre-rouleau/usrhome
"
    fi
}

# --

run__etags__make()
{
    # Expects no argument, but expects a list of files to parse on stdin.
    xargs ctags --output-format=etags
}

# --
# Check validity of arguments

if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    print_usage
    if [ "$#" = "1" ]; then
        exit 0
    else
        exit  1
    fi
fi

# --
# Check if ctags is the Universal Ctags program: that's the only one
# that support the parsing of M4 and automake and autoconf files.

if ! which ctags > /dev/null; then
    printf -- "\
*** ERROR: %s requires Universal Ctags.
***        There's no ctags accessible in PATH.
" "$pgm_name"
    exit 1
elif ! ctags --version | grep -q "Universal Ctags"; then
    printf -- "\
*** ERROR: %s requires Universal Ctags.
***        The ctags in PATH is not Universal Ctags.
" "$pgm_name"
    exit 1
fi

# --
# Check the validity of directory names specified as arguments.
# Ensure that each directory specified on the command line
# exists.  Also ensure that a directory name is not specified more
# than once.  Use the realpath of that directory name when comparing.

dpaths=
for dname in "$@"; do
    if [ ! -d "${dname}" ]; then
        printf -- "Specified directory does not exists: %s\n" "${dname}"
        exit 2
    fi
    dpath="$(realpath "${dname}")"
    for dp in ${dpaths}; do
        if [ "$dp" = "$dpath" ]; then
            printf -- "Multiple entry of directory: %s\n" "${dname}"
            exit 3
        fi
        # check if new entry is a sub-directory of an exiting entry
        case "${dpath}" in
            "${dp}/"*)
                printf -- "%s is a sub-dir of already specified %s\n" "${dname}" "${dp}"
                exit 3
                ;;
        esac
        # check if new entry is a parent directory of an existing entry
        case "${dp}" in
            "${dpath}/"*)
                printf -- "%s is a parent dir of already specified %s\n" "${dname}" "${dp}"
                exit 3
                ;;
        esac

    done
    dpaths="${dpaths} ${dpath}"
done


# Define a function that searches into 1 directory
# and accumulates the list of found files into the
# file '.etags-autotools-files.txt'.

search_with_find()
{
    # Arg: dirname : name of directory tree to search

    # Search for make files
    # and for the M4, autoconf and automake files
    find -L -f "$dirname" \( \
             -name "Makefile" \
         -or -name "makefile" \
         -or -name "GNUMakefile" \
         -or -name "Makefile.in" \
         -or -name "Makefile.am" \
         -or -name "*\.mk" \
         -or -name "*\.mak" \
         -or -name "*\.m4" \
         -or -name "configure.ac" \
         -or -name "config.h.in" \
         -or -name "config.h" \
         \) -print | tee -a .etags-autotools-files.txt
}

search_with_fd()
{
    # Arg: dirname : name of directory tree to search
    # Arg: fd_pgm  : fd or fdfind

    # Search for make files
    # and for the M4, autoconf and automake files
    ${fd_pgm} -L --type f '((makefile)|((GNU)?Makefile(.((in)|(am)))?))$' \
              "$dirname" | tee -a .etags-autotools-files.txt
    ${fd_pgm} -L --type f -e .m4 -e .mk -e .mak\
              "$dirname" | tee -a .etags-autotools-files.txt
    ${fd_pgm} -L --type f '((configure.ac)|(config.h.in)|(config.h))$' \
              "$dirname" | tee -a .etags-autotools-files.txt
}

search()
{
    # Arg: dirname : name of directory tree to search
    # Arg: search_with : find or fd
    case "$search_with" in
        find)
            search_with_find
            ;;

        fd)
            search_with_fd
            ;;
    esac
}

# --
# First prepare environment
rm -f .etags-autotools-files.txt

# Select the method to search for files.
# - Try to use fd or fdfind if they exist,
#   otherwise use find.
# - Echo the actual program used to find files (on stderr).
if [ "$ETAGS_USE_FIND" = "1" ]; then
    search_with='find'
    echo "- ETAGS_USE_FIND forces the use of find!" 1>&2
    echo "-> Using" "$(which find)"                 1>&2
    # first find and create tags for GNU Makefile

else
    if [ -x "$(command -v fdfind)" ]; then
        search_with='fd'
        fd_pgm=fdfind
        echo "-> Using" "$(which fdfind)"    1>&2
        echo "-> ☝️ Ignoring files identified in .gitignore, .ignore or .fdignore" 1>&2

    elif [ -x "$(command -v fd)" ]; then
        search_with='fd'
        fd_pgm=fd
        echo "-> Using" "$(which fd)" 1>&2
        echo "-> ☝️ Ignoring files identified in .gitignore, .ignore or .fdignore" 1>&2
    else
        search_with='find'
        echo "-> Using" "$(which find)" 1>&2
    fi
fi

# -- proceed

# Search in all specified directory to build the list of
# files in the file '.etags-autotools-files.txt'.

printf -- "%s - Processing %s/ ...\n" "${pgm_name}" "$(pwd)" 1>&2

if [ -z "$1" ]; then
    dirname="."
    search
else
    for dirname in "$@"; do
        search
    done
fi


# Then run etags on these files, and sort them in the etags file
sort < .etags-autotools-files.txt | uniq >  .etags-autotools-files.1.txt
rm -f .etags-autotools-files.txt
mv .etags-autotools-files.1.txt .etags-autotools-files.txt
run__etags__make < .etags-autotools-files.txt

file_count="$(wc -l .etags-autotools-files.txt | awk '{print $1}')"
printf "\
%s - %s files found and processed.
           Created: %s/TAGS
           Scanned file list stored in: %s/.etags-autotools-files.txt
" "${pgm_name}" "${file_count}" "$(pwd)" "$(pwd)" 1>&2

# -----------------------------------------------------------------------------
# Local Variables:
# sh-shell: sh
# End:
