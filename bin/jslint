#!/bin/sh
# SH FILE: jslint
#
# Purpose   : Run jslint - Lint Javascript file.
# Created   : Thursday, October 30 2025.
# Author    : Pierre Rouleau <prouleau001@gmail.com>
# Time-stamp: <2025-10-30 19:07:00 EDT, updated by Pierre Rouleau>
# ----------------------------------------------------------------------------

# Module Description
# ------------------
#
# A Javascript linter using JSLint.
# A front end script allowing execution from the command line using jslint as
# the program name.

# ----------------------------------------------------------------------------
# Dependencies
# ------------
#
# - printf, which, ln
# - node
# - python : Python 3

# ----------------------------------------------------------------------------
# Code
# ----
#
#

pgm_name="$(basename "$0")"

print_usage()
{
    printf -- "
%s: Lint Javascript code file.

 Usage: %s -h|--help

  • Print this help information.

 Usage: %s FILE [FILE..]

  • Analyze Javascript FILE specified on command line with
    the JSLint Javascript Linter.

" "$pgm_name" "$pgm_name" "$pgm_name"
}

# --
# Check validity of arguments

if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    print_usage
    if [ "$#" = "1" ]; then
        # help requested explicitly with right amount of args: no error.
        exit 0
    else
        exit  1
    fi
fi

if [ -z "$1" ]; then
    print_usage
    exit 1
fi

# -- Validate environment
if ! which node > /dev/null ; then
    printf -- "***ERROR: %s requires node on PATH. It's not. Is it installed?" "$pgm_name"
    exit 1
fi

# --
# proceed
# Node need to get a RELATIVE path to the $HOME/bin/javascript/jslint.mjs file!

curdir="$(pwd)"
file_path="$HOME/bin/javascript/jslint.mjs"

# Use an inline Python script to compute the relative path.
# Later version of realpath command have an option to do it, but
# it is not available everywhere.
#
rel_jslint=$(python -c "import os.path; print(os.path.relpath('$file_path', '$curdir'))")

if [ ! -e "${rel_jslint}" ]; then
    printf -- "***ERROR: jslint.mjs file is missing at %s\n" "${rel_jslint}"
    exit 1
fi

# Loop in a POSIX compatible way.

while [ "$#" -gt 0 ]; do
  fn="$1"
  shift
  if [ ! -e "${fn}" ]; then
    printf -- "***ERROR: does not exist: %s\n" "${fn}"
    exit 1
  else
      # echo "node ${rel_jslint}" "${fn}"
      node "${rel_jslint}" "${fn}"
  fi
done

# ----------------------------------------------------------------------------
