#!/bin/sh
#  SH FILE: etags-el
#
#  Purpose   : Build Emacs Tags file for Emacs Lisp and C source code files.
#  Created   : Thursday, October 15 2020.
#  Author    : Pierre Rouleau <prouleau001@gmail.com>
#  Time-stamp: <2025-04-30 19:25:31 EDT, updated by Pierre Rouleau>
# ----------------------------------------------------------------------------
#  Module Description
#  ------------------
#
# Build an Emacs Tags file for all Emacs Lisp source code files in the
# sub-directory tree.  This includes the Emacs Lisp files (the .el files)
# as well as the C files.
#

# ----------------------------------------------------------------------------
#  Dependencies
#  ------------
#
# - Uses fd (also named fdfind in some Linux distros like Mint) if it is
#   available.  See URL:  https://github.com/sharkdp/fd .
# - if fd/fdfind is not available, use find instead.
#
# Using fd/fdfind is preferred because it supports ignoring files identified
# by .gitignore, .ignore, .fdignore files. The fd utility can also execute
# faster than find in several scenarios.
#
# - To force use of find, set the ETAGS_USE_FIND environment variable to 1.

# - Uses etags to process files unless ETAGS_USE_UCTAGS environment variable
#   is set to 1, in which case the ctags utility is found, assuming that it
#   is the Universal Ctags utility, not any other ctag command.

# ----------------------------------------------------------------------------
#  Code
#  ----

pgm_name="$(basename "$0")"
etags_flist_fname=.etags-el-files.txt
etags_flist_envvar_fname="$ETAGS_FILE_LIST_FOR_ELISP"

print_usage()
{
    printf -- "
%s: build an etags-compliant TAGS in the current directory
          for all Emacs Lisp and C source code files in the specified
          directory tree(s).

 Usage: %s -h|--help

  • Print this help information.

 Usage: %s [--in=TARGET-DIRPATH] [DIRPATH ...]
        %s [--in=TARGET-DIRPATH] [--list=FILENAME]

  • [Re]build an etags-compliant TAGS file in specified
    TARGET-DIRPATH or current directory for the Emacs Lisp,
    C code & header files found:
    - in the DIRPATH directory tree(s) identified on the command line, or
      the current directory if none is specified, or
    - in the list provided in the FILENAME specified by the --list option, or
    - specified by the ETAGS_FILE_LIST_FOR_ELISP environment variable.
  • All operations are done with the current directory being
    the TARGET-DIRPATH if specified, otherwise it's the current one.
    This means that when specifying TARGET-DIRPATH, all other
    DIRPATH are relative to that directory (if relative).
    You can also use absolute directories.
  • Follows symbolic links both for directories and files.
  • If a DIRPATH has a name that starts with a '-', put '--'
    after the options before the first DIRPATH.
  • Processes the Emacs Lisp and C files inside gz files.
  • Overwrites any TAGS file in the current directory.
  • Inspects content of .el, .c, .h and their gz compressed files.
  • Stores the names of inspected files in the file named
    .etags-el-files.txt in the current directory.
  • Uses etags to build the TAGS file by default.
    ETAGS_USE_UCTAGS is ignored because Ctags does not handle .gz files.
  • Uses fast 'fdfind' or 'fd' if available, 'find' otherwise.
    - The 'fd' utility is from: https://github.com/sharkdp/fd
    - In some Linux distros, 'fd' is renamed 'fdfind'.
  • To force the use of 'find', set ETAGS_USE_FIND environment
    variable to 1.
  • ☝️  When 'fdfind' or 'fd' is used, the content of files identified
    by the .gitignore, .ignore or .fdignore files are ignored.
  • Info printed on stderr:
   • The path of the find program used and when repository ignore files
     are skipped from the scan.
   • A count of found files, and the name of the file that holds them.
 • The only output on stdout is the list of files found.
    This allows this script to be used as the first in a pipe
    to do other processing with the list of files found.
" "$pgm_name" "$pgm_name" "$pgm_name" "$pgm_name"
    if [ "$ETAGS_USE_FIND" = "1" ]; then
        printf -- "
⚠️   ETAGS_USE_FIND is currently set to 1, forcing the use of 'find'!
    • To prevent this, set it to 0 or remove that environment variable.
    • With USRHOME, you can use setenv and clrenv.
      See: https://github.com/pierre-rouleau/usrhome
"
    fi
}

# --
# run__etags__el -- run etags on a set of files
# --------------
#
# Use etags to parse the source code files.
# Etags generates a tag file format a little different and better suited for Emacs.

run__etags__el()
{
    # Expects no argument, but expects a list of files to parse on stdin.

    etags -
    if [ "$ETAGS_USE_UCTAGS" = "1" ]; then
        printf "Using etags despite ETAGS_USE_CTAGS since ctags can't handle compressed file\n" 1>&2
    fi
}

# --
# Check validity of arguments

if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    print_usage
    if [ "$#" = "1" ]; then
        # help requested explicitly with right amount of args: no error.
        exit 0
    else
        exit  1
    fi
fi

# Check other options
options=2
while [ "$options" -ge 1 ]; do
    case "$1" in
        --in=*)
            targetdir="$(echo "$1" | cut -c 6- | sed "s:~:$HOME:g")"
            targetdir=$(realpath "${targetdir}")
            if [ -d "${targetdir}" ]; then
                cd "${targetdir}" || exit 1
                shift
            else
                printf -- "\
*** ERROR: %s: invalid TARGET-DIRPATH: %s\n" "${pgm_name}" "${targetdir}" 1>&2
                exit 1
            fi
            ;;

        --list=*)
            # extract the file name from the --list= option
            fname="$(echo "$1" | sed 's/--list=//g')"
            if [ ! -f "${fname}" ]; then
                printf -- "\
*** ERROR: %s: specified list file does not exist: %s
" "${pgm_name}" "${fname}" 1>&2
                exit 1
            else
                etags_flist_envvar_fname="${fname}"
                shift
            fi
            ;;

        --)
            shift
            continue
            ;;

        -*)
            printf -- "\
*** ERROR: %s: invalid options: %s\n" "${pgm_name}" "$1" 1>&2
            exit 1
            ;;

        *)
            break
            ;;
    esac
    options=$(( options - 1 ))
done

# ----------------------------------------------------------------------------
# Define a function that searches into 1 directory
# and accumulates the list of found files into the
# file '.etags-el-files.txt'.

# Identify options
case $(uname) in
    Darwin)
        find_path_option='-f'
        ;;
    Linux)
        find_path_option=
        ;;
    *)
        printf -- "*** ERROR: %s:  Error Operating System, %s, is not supported!\n" "${pgm_name}"  "$(uname)" 1>&2
        exit 1
        ;;
esac

search_with_find()
{
    # Arg: dirname : name of directory tree to search
    find -L ${find_path_option}  "$dirname" \( -name "*.el" \
         -or -name "*.el.gz" \
         -or -name "*.[ch]"  \
         -or -name "*.[ch].gz" \
         \)  -print | tee -a "${etags_flist_fname}"
}

search_with_fd()
{
    # Arg: dirname : name of directory tree to search
    # Arg: fd_pgm  : fd or fdfind

    ${fd_pgm} -L --type f -e .el -e .el.gz \
              -e .c -e .c.gz \
              -e .h -e .h.gz \
              '' "$dirname" | tee -a "${etags_flist_fname}"
}

search()
{
    # Arg: dirname : name of directory tree to search
    # Arg: search_with : find or fd
    case "$search_with" in
        find)
            search_with_find
            ;;

        fd)
            search_with_fd
            ;;
    esac
}

# --
# Proceed

if [ -n "${etags_flist_envvar_fname}" ]; then
    if [ "${etags_flist_envvar_fname}" = "${etags_flist_fname}" ]; then
        printf -- "*** ERROR: %s: Do NOT set ETAGS_FILE_LIST_FOR_ELISP to %s\n" "${pgm_name}" "${etags_flist_fname}"1>&2
        exit 1
    fi
    printf -- "Using the file list identified by ETAGS_FILE_LIST_FOR_ELISP: %s\n" "${etags_flist_envvar_fname}" 1>&2
    cp "${etags_flist_envvar_fname}" "${etags_flist_fname}"
    printf -- "Generating TAGS ...\n" 1>&2
    run__etags__el < "${etags_flist_envvar_fname}"
else
    # Check the validity of directory names specified as arguments.
    # Ensure that each directory specified on the command line
    # exists.  Also ensure that a directory name is not specified more
    # than once.  Use the realpath of that directory name when comparing.
    # Exit on the first error detected.
    dpaths=
    for dname in "$@"; do
        if [ ! -d "${dname}" ]; then
            printf -- "Specified directory does not exists: %s\n" "${dname}" 1>&2
            exit 2
        fi
        dpath="$(realpath "${dname}")"
        for dp in ${dpaths}; do
            if [ "$dp" = "$dpath" ]; then
                printf -- "Multiple entry of directory: %s\n" "${dname}" 1>&2
                exit 3
            fi
            # check if new entry is a sub-directory of an exiting entry
            case "${dpath}" in
                "${dp}/"*)
                    printf -- "%s is a sub-dir of already specified %s\n" "${dname}" "${dp}" 1>&2
                    exit 3
                    ;;
            esac
            # check if new entry is a parent directory of an existing entry
            case "${dp}" in
                "${dpath}/"*)
                    printf -- "%s is a parent dir of already specified %s\n" "${dname}" "${dp}" 1>&2
                    exit 3
                    ;;
            esac
        done
        dpaths="${dpaths} ${dpath}"
    done

    # --
    # First prepare environment
    # Select the method to search for files.
    # - Try to use fd or fdfind if they exist,
    #   otherwise use find.
    # - Echo the actual program used to find files (on stderr).
    if [ "$ETAGS_USE_FIND" = "1" ]; then
        search_with='find'
        echo "- ETAGS_USE_FIND forces the use of find!" 1>&2
        echo "-> Using" "$(which find)"                 1>&2
    else
        if [ -x "$(command -v fdfind)" ]; then
            search_with='fd'
            fd_pgm=fdfind
            echo "-> Using" "$(which fdfind)" 1>&2
            echo "-> ☝️ Ignoring files identified in .gitignore, .ignore or .fdignore" 1>&2
        elif [ -x "$(command -v fd)" ]; then
            search_with='fd'
            fd_pgm=fd
            echo "-> Using" "$(which fd)" 1>&2
            echo "-> ☝️ Ignoring files identified in .gitignore, .ignore or .fdignore" 1>&2
        else
            search_with='find'
            echo "-> Using" "$(which find)" 1>&2
        fi
    fi

    printf -- "No list of files identified by ETAGS_FILE_LIST_FOR_ELISP.\n" 1>&2
    printf -- "Files found printed in found order (not necessarily in sorted order)\n" 1>&2

    # -- proceed
    # Rename the old list of files if it exists
    if [ -e "${etags_flist_fname}" ]; then
        mv "${etags_flist_fname}" "${etags_flist_fname}.backup"
    fi

    # Search in all specified directory to build the list of
    # files in the file '.etags-el-files.txt'.
    if [ -z "$1" ]; then
        dirname="."
        search
    else
        for dirname in "$@"; do
            search
        done
    fi

    # Then run etags on these files, and sort them in the etags file
    sort < "${etags_flist_fname}" | uniq >  "${etags_flist_fname}.new"
    rm -f "${etags_flist_fname}"
    mv "${etags_flist_fname}.new" "${etags_flist_fname}"
    printf -- "Generating TAGS ...\n" 1>&2
    run__etags__el < "${etags_flist_fname}"
fi

file_count="$(wc -l "${etags_flist_fname}" | awk '{print $1}')"
if [ "$file_count" = "0" ]; then
    # restore the old list of files.
    rm -rf "${etags_flist_fname}"
    if [ -e "${etags_flist_fname}.backup" ]; then
        mv "${etags_flist_fname}.backup"  "${etags_flist_fname}"
    fi
    printf -- "No files found. %s and TAGS files untouched.\n" "${etags_flist_fname}"  1>&2
    exit 1
else
  rm -rf "${etags_flist_fname}.backup"
  printf "\
  %s - %s files found and processed.
             Created: %s/TAGS
             Scanned file list stored in: %s/%s\n" "${pgm_name}" "${file_count}" "$(pwd)" "$(pwd)" "${etags_flist_fname}" 1>&2
fi

# ----------------------------------------------------------------------------
# Local Variables:
# sh-shell: sh
# End:
