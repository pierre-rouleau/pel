#!/bin/sh
#  SH FILE: etags-py
#
#  Purpose   : Build Emacs Tags file for Python source code files.
#  Created   : Monday, November  9 2020.
#  Author    : Pierre Rouleau <prouleau001@gmail.com>
#  Time-stamp: <2020-11-10 14:08:22, updated by Pierre Rouleau>
# ----------------------------------------------------------------------------
#  Module Description
#  ------------------
#
# Build an Emacs Tags file for all Python source code files in the
# sub-directory tree.  This includes the .py and .pyw files.
#
# Usage:
#  - cd where you want to store the TAGS file
#  - etags-py path [path ...]
#

# ----------------------------------------------------------------------------
#  Dependencies
#  ------------

#
# - Uses fd (also named fdfind in some Linux distros like Mint) if it is
#   available.  See URL:  https://github.com/sharkdp/fd .
# - if fd/fdfind is not available, use find instead.
#
# Using fd/fdfind is preferred because it supports ignoring files identified
# by .gitignore, .ignore, .fdignore files. The fd utility can also execute
# faster than find in several scenarios.
#
# - To force use of find, set the ETAGS_USE_FIND environment variable to 1.

# - Uses etags to process files unless ETAGS_USE_UCTAGS environment variable
#   is set to 1, in which case the ctags utility is found, assuming that it
#   is the Universal Ctags utility, not any other ctag command.

# TODO: eliminate code duplication while keeping capability to stay
#       compatible with various shells (sh, bash, etc...)
# TODO: detect invalid directory names as find does not flag them.

# ----------------------------------------------------------------------------
#  Code
#  ----

show_usage() {
    printf "Usage: etags-py\n"
    printf "       etags-py -h\n"
    printf "       etags-py --help\n"
    printf "• Print this help information, exit with 1.\n\n"
    printf "Usage: etags-py [-u] path [path ...] \n"
    printf " -u : use Universal Ctags (ctags)\n"
    printf "• [Re]build an etags-compliant TAGS file in current directory\n"
    printf "  for the Python source code files in the directory\n"
    printf "  trees identified on the command line.\n"
    printf "• Stores the TAGS file in the current directory, over-writing\n"
    printf "  previous one!\n"
    printf "• Inspects content of .py and .pyw files.\n"
    printf "• Stores the names of inspected files in the file named\n"
    printf "  .etags-py-files.txt stored in the same directory as TAGS.\n"
    printf "• Uses etags to build the TAGS file by default.\n"
    printf "  Set ETAGS_USE_UCTAGS to 1 to force using Universal Ctags instead.\n"
    printf "☝️  For Python, Universal Ctags generates more information\n"
    printf "   than etags.\n"
    printf "• Uses fast fdfind or fd if available, uses find otherwise.\n"
    printf "  - The fd utility is from: https://github.com/sharkdp/fd\n"
    printf "  - In some Linux distros, fd is renamed fdfind.\n"
    printf "• To force the use of find, set ETAGS_USE_FIND environment\n"
    printf "  variable to 1.\n"
    printf "• ☝️  When fdfind or fd is used, the content of files identified\n"
    printf "  by the .gitignore, .ignore or .fdignore files are ignored.\n"
    printf "  Also invalid directory names specified are rejected.\n"
    printf "  These 2 features alone make using fd/fdfind worthwhile!\n"
    printf "  ⚠️  When using find, invalid directory names are just ignored!\n"
    printf "• Echoes the path of the find program used and echoes when\n"
    printf "  repository ignore files are used.\n"
    if [[ "$ETAGS_USE_FIND" == "1" ]]; then
        printf "⚠️  Currently: ETAGS_USE_FIND forces the use of find!\n"
        printf "   To prevent this, set it to 0 or remove that\n"
        printf "   environment variable.\n"
        printf "  ⚠️  Ensure validity of directory names manually!\n"
        printf "  When using find, invalid directory names are just ignored!\n"
    fi
    return 1
}

# --

run__etags__py() {
    if [[ "$ETAGS_USE_UCTAGS" == "1" ]]; then
        xargs ctags --output-format=etags
        printf "Note: ETAGS_USE_UCTAGS forced using %s to process files.\n" `which ctags`
    else
        etags --language=python -
    fi
    printf "%s files found and processed. List stored in: %s\n" `wc -l .etags-py-files.txt`
}

# --

if [[ "$#" = 1 && "$1" = "-h" || "$1" = "--help" ]]; then
    show_usage
elif [[ "$#" = 0 ]]; then
    show_usage
else
    if [[ "$1" = "-u" ]]; then
        echo "etags-py: -u option requests use of Universal CTags."
        ETAGS_USE_UCTAGS=1
        shift
    fi
    # Find the files, pass their names to etags which creates the TAGS file.
    # To find the files, try to use fd or fdfind if they exist,
    # otherwise use find.  Echo the actual program used to find files.
    if [[ "$ETAGS_USE_FIND" == "1" ]]; then
        echo "ETAGS_USE_FIND forces the use of find!"
        echo "Using " `which find`
        find -f $* \( \
             -name     "*.py" \
             -or -name "*.pyw" \
             \)  -print | tee .etags-py-files.txt | run__etags__py
    else
        if [[ -x "$(command -v fdfind)" ]]; then
            echo "Using " `which fdfind`
            echo "☝️ Ignoring files identified in .gitignore, .ignore or .fdignore"
            fdfind --type f -e .py -e .pyw \
                   . $* | tee .etags-py-files.txt | run__etags__py
        elif [[ -x "$(command -v fd)" ]]; then
            echo "Using " `which fd`
            echo "☝️ Ignoring files identified in .gitignore, .ignore or .fdignore"
            fd --type f -e .py -e .pyw \
               . $* | tee .etags-py-files.txt | run__etags__py
        else
            echo "Using " `which find`
            find -f $* \( \
                 -name "*py" \
                 -or -name "*.pyw" \
                 \) -print | tee .etags-py-files.txt | run__etags__py
        fi
    fi
fi
# -----------------------------------------------------------------------------
