#!/bin/sh
#  SH FILE: etags-cpp
#
#  Purpose   : Build Emacs Tags file for C/C++ source code files.
#  Created   : Monday, November  9 2020.
#  Author    : Pierre Rouleau <prouleau001@gmail.com>
#  Time-stamp: <2020-11-10 12:00:45, updated by Pierre Rouleau>
# ----------------------------------------------------------------------------
#  Module Description
#  ------------------
#
# Build an Emacs Tags file for all C++ source code files in the sub-directory
# tree.  This includes the files with the following extensions:
#  - C++ files: .C .c++ .cc .cpp .cxx .H .h++ .hh .hpp .hxx .M .pdb
#  - C files:   .c, .h
#  - and their .gz compressed files.
#
# Usage:
#  - cd where you want to store the TAGS file
#  - etags-cpp path [path ...]
#
#

# ----------------------------------------------------------------------------
#  Dependencies
#  ------------

# - Uses fd (also named fdfind in some Linux distros like Mint) if it is
#   available.  See URL:  https://github.com/sharkdp/fd .
# - if fd/fdfind is not available, use find instead.
#
# Using fd/fdfind is preferred because it supports ignoring files identified
# by .gitignore, .ignore, .fdignore files. The fd utility can also execute
# faster than find in several scenarios.
#
# - To force use of find, set the ETAGS_USE_FIND environment variable to 1.

# - Uses etags to process files unless ETAGS_USE_UCTAGS environment variable
#   is set to 1, in which case the ctags utility is found, assuming that it
#   is the Universal Ctags utility, not any other ctag command.

# TODO: find a way to include C++ standard library files that have no file
#       extensions.
# TODO: eliminate code duplication while keeping capability to stay
#       compatible with various shells (sh, bash, etc...)
# TODO: detect invalid directory names as find does not flag them.

# ----------------------------------------------------------------------------
#  Code
#  ----

show_usage() {
    printf "Usage: etags-cpp\n"
    printf "       etags-cpp -h\n"
    printf "       etags-cpp --help\n"
    printf "• Print this help information, exit with 1.\n\n"
    printf "Usage: etags-cpp path [path ...] \n"
    printf "• [Re]build an etags-compliant TAGS file in current directory\n"
    printf "  for the C++ and C code & header files in the directory trees\n"
    printf "  identified on the command line.\n"
    printf "• Stores the TAGS file in the current directory, over-writing\n"
    printf "  previous one!\n"
    printf "• Inspects content of C and C++ source, header and inline files\n"
    printf "  as well as their .gz compressed files.\n"
    printf "• Stores the names of inspected files in the file named\n"
    printf "  .etags-cpp-files.txt stored in the same directory as TAGS."
    printf "• Uses etags to build the TAGS file by default.\n"
    printf "  Set ETAGS_USE_UCTAGS to 1 to force using Universal Ctags instead.\n"
    printf "• Uses fast fdfind or fd if available, uses find otherwise.\n"
    printf "  - The fd utility is from: https://github.com/sharkdp/fd\n"
    printf "  - In some Linux distros, fd is renamed fdfind.\n"
    printf "• To force the use of find, set ETAGS-USE_FIND environment\n"
    printf "  variable to 1.\n"
    printf "• ☝️  When fdfind or fd is used, the content of files identified\n"
    printf "  by the .gitignore, .ignore or .fdignore files are ignored.\n"
    printf "  Also invalid directory names specified are rejected.\n"
    printf "  These 2 features alone make using fd/fdfind worthwhile!\n"
    printf "  ⚠️  When using find, invalid directory names are just ignored!\n"
    printf "• Echoes the path of the find program used and echoes when\n"
    printf "  repository ignore files are used.\n"
    if [[ "$ETAGS_USE_FIND" == "1" ]]; then
        printf "⚠️  Currently: ETAGS_USE_FIND forces the use of find!\n"
        printf "   To prevent this, set it to 0 or remove that\n"
        printf "   environment variable.\n"
        printf "  ⚠️  Ensure validity of directory names manually!\n"
        printf "  When using find, invalid directory names are just ignored!\n"
    fi
    return 1
}

# --

run__etags__cpp() {
    if [[ "$ETAGS_USE_UCTAGS" == "1" ]]; then
        xargs ctags --output-format=etags
        printf "Note: ETAGS_USE_UCTAGS forced using %s to process files.\n" `which ctags`
    else
        etags --class-qualify -
    fi
    printf "%s files found and processed. List stored in: %s\n" `wc -l .etags-cpp-files.txt`
}

# --

if [[ "$#" = 1 && "$1" = "-h" || "$1" = "--help" ]]; then
    show_usage
elif [[ "$#" = 0 ]]; then
    show_usage
else
    # Find the files, pass their names to etags which creates the TAGS file.
    # To find the files, try to use fd or fdfind if they exist,
    # otherwise use find.  Echo the actual program used to find files.
    if [[ "$ETAGS_USE_FIND" == "1" ]]; then
        echo "ETAGS_USE_FIND forces the use of find!"
        echo "Using " `which find`
        find -f $* \
             \(  -name "*.[ch]" \
             -or -name "*.[ch].gz" \
             -or -name "*.[ch].in" \
             -or -name "*.[ch].in.gz" \
             -or -name "*.[ch]++" \
             -or -name "*.[ch]++.gz" \
             -or -name "*.[ch]++.in" \
             -or -name "*.[ch]++.in.gz" \
             -or -name "*.[ch]pp" \
             -or -name "*.[ch]pp.gz" \
             -or -name "*.[ch]pp.in" \
             -or -name "*.[ch]pp.in.gz" \
             -or -name "*.[ch]xx" \
             -or -name "*.[ch]xx.gz" \
             -or -name "*.[ch]xx.in" \
             -or -name "*.[ch]xx.in.gz" \
             -or -name "*.[CH]" \
             -or -name "*.[CH].gz" \
             -or -name "*.[CH].in" \
             -or -name "*.[CH].in.gz" \
             -or -name "*.cc" \
             -or -name "*.cc.gz" \
             -or -name "*.cc.in" \
             -or -name "*.cc.in.gz" \
             -or -name "*.hh" \
             -or -name "*.hh.gz" \
             -or -name "*.hh.in" \
             -or -name "*.hh.in.gz" \
             -or -name "*.inl" \
             -or -name "*.inl.gz" \
             -or -name "*.M" \
             -or -name "*.M.gz" \
             -or -name "*.pdb" \
             -or -name "*.pdb.gz" \
             \)  -print | tee .etags-cpp-files.txt | run__etags__cpp
    else
        if [[ -x "$(command -v fdfind)" ]]; then
            echo "Using " `which fdfind`
            echo "☝️ Ignoring files identified in .gitignore, .ignore or .fdignore"
            fdfind --type f -e .c      -e .c.gz \
                            -e .c.in   -e .c.in.gz \
                            -e .h      -e .h.gz \
                            -e .h.in   -e .h.in.gz \
                            -e .c++    -e .c++.gz \
                            -e .c++.in -e .c++.in.gz \
                            -e .h++    -e .h++.gz \
                            -e .h++.in -e .h++.in.gz \
                            -e .cpp    -e .cpp.gz \
                            -e .cpp.in -e .cpp.in.gz \
                            -e .hpp    -e .hpp.gz \
                            -e .hpp.in -e .hpp.in.gz \
                            -e .cxx    -e .cxx.gz \
                            -e .cxx.in -e .cxx.in.gz \
                            -e .hxx    -e .hxx.gz \
                            -e .hxx.in -e .hxx.in.gz \
                            -e .C      -e .C.gz \
                            -e .C.in   -e .C.in.gz \
                            -e .H      -e .H.gz \
                            -e .H.in   -e .H.in.gz \
                            -e .cc     -e .cc.gz \
                            -e .cc.in  -e .cc.in.gz \
                            -e .hh     -e .hh.gz \
                            -e .hh.in  -e .hh.in.gz \
                            -e .inl    -e .inl.gz \
                            -e .M      -e .M.gz \
                            -e .pdb    -e .pdb.gz \
                            . $* | tee .etags-cpp-files.txt | run__etags__cpp
        elif [[ -x "$(command -v fd)" ]]; then
            echo "Using " `which fd`
            echo "☝️ Ignoring files identified in .gitignore, .ignore or .fdignore"
            fd --type f -e .c      -e .c.gz \
                        -e .c.in   -e .c.in.gz \
                        -e .h      -e .h.gz \
                        -e .h.in   -e .h.in.gz \
                        -e .c++    -e .c++.gz \
                        -e .c++.in -e .c++.in.gz \
                        -e .h++    -e .h++.gz \
                        -e .h++.in -e .h++.in.gz \
                        -e .cpp    -e .cpp.gz \
                        -e .cpp.in -e .cpp.in.gz \
                        -e .hpp    -e .hpp.gz \
                        -e .hpp.in -e .hpp.in.gz \
                        -e .cxx    -e .cxx.gz \
                        -e .cxx.in -e .cxx.in.gz \
                        -e .hxx    -e .hxx.gz \
                        -e .hxx.in -e .hxx.in.gz \
                        -e .C      -e .C.gz \
                        -e .C.in   -e .C.in.gz \
                        -e .H      -e .H.gz \
                        -e .H.in   -e .H.in.gz \
                        -e .cc     -e .cc.gz \
                        -e .cc.in  -e .cc.in.gz \
                        -e .hh     -e .hh.gz \
                        -e .hh.in  -e .hh.in.gz \
                        -e .inl    -e .inl.gz \
                        -e .M      -e .M.gz \
                        -e .pdb    -e .pdb.gz \
                        . $* | tee .etags-cpp-files.txt | run__etags__cpp
        else
            echo "Using " `which find`
            find -f $* \
                 \(  -name "*.[ch]" \
                 -or -name "*.[ch].gz" \
                 -or -name "*.[ch].in" \
                 -or -name "*.[ch].in.gz" \
                 -or -name "*.[ch]++" \
                 -or -name "*.[ch]++.gz" \
                 -or -name "*.[ch]++.in" \
                 -or -name "*.[ch]++.in.gz" \
                 -or -name "*.[ch]pp" \
                 -or -name "*.[ch]pp.gz" \
                 -or -name "*.[ch]pp.in" \
                 -or -name "*.[ch]pp.in.gz" \
                 -or -name "*.[ch]xx" \
                 -or -name "*.[ch]xx.gz" \
                 -or -name "*.[ch]xx.in" \
                 -or -name "*.[ch]xx.in.gz" \
                 -or -name "*.[CH]" \
                 -or -name "*.[CH].gz" \
                 -or -name "*.[CH].in" \
                 -or -name "*.[CH].in.gz" \
                 -or -name "*.cc" \
                 -or -name "*.cc.gz" \
                 -or -name "*.cc.in" \
                 -or -name "*.cc.in.gz" \
                 -or -name "*.hh" \
                 -or -name "*.hh.gz" \
                 -or -name "*.hh.in" \
                 -or -name "*.hh.in.gz" \
                 -or -name "*.inl" \
                 -or -name "*.inl.gz" \
                 -or -name "*.M" \
                 -or -name "*.M.gz" \
                 -or -name "*.pdb" \
                 -or -name "*.pdb.gz" \
                 \)  -print | tee .etags-cpp-files.txt | run__etags__cpp
        fi
    fi
fi


# ----------------------------------------------------------------------------
