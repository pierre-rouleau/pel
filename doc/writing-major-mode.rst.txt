================================
How to write an Emacs major mode
================================

:Home URL: https://github.com/pierre-rouleau/pel
:Project: `PEL -- Pragmatic Emacs Library`_:
:Created:  Tuesday, April  1 2025.
:Author:  Pierre Rouleau <prouleau001@gmail.com>
:Modified: 2025-04-03 14:46:26 EDT, updated by Pierre Rouleau.
:Copyright: Â© 2025, Pierre Rouleau

.. warning:: ðŸš§ This is an early draft of the document  ðŸš§

.. contents::  **Table of Contents**
.. sectnum::

.. ---------------------------------------------------------------------------

References
==========

:Ref: `Emacs Major Modes`_
:Ref: `Emacs Syntax Tables`_
:Ref: `Emacs Lisp Sequences, Arrays and Vectors`_
:Ref: `Emacs Sequences`_
:Ref: `Emacs Vectors`_
:Ref: `Emacs Arrays`_ and `Functions that Operate on Arrays`_ : ``arrayp``,
      ``aref`` and ``fillarray``.
:Ref: `Emacs Vectors`_  and `Vector Type`_. Vectors are `Arrays`_. Which are `Sequences`_.
:Ref: `Emacs Char-Tables`_

General Conventions
===================

**Useful commands**

- To view documentation of current major-mode:  ``describe-mode`` bound to
  ``C-h m``.

**Keys for major-modes**

- ``TAB`` is often used for indentation
- ``C-c`` is used as prefix for major-modes.

Comment Definition
------------------

:Ref: `Options Controlling Comments`_

============================ ======================================================================
Variable                     Description
============================ ======================================================================
``comment-start``            String to insert to start a new comment, or nil if no comment syntax.

``comment-continue``         Continuation string to insert for multiline comments.

``comment-end``              String to insert to end a new comment.
                             Should be an empty string if comments are terminated by
                             end-of-line.

``comment-padding``          Padding string that ``comment-region`` puts between comment chars and text.
                             Can also be an integer which will be automatically turned into a string
                             of the corresponding number of spaces.

``comment-column``           Column to indent right-margin comments to.

``comment-fill-column``      Column to use for ``comment-indent``.  If nil, use ``fill-column`` instead.

``comment-multi-line``       Non-nil means ``comment-indent-new-line`` continues comments.
                             That is, it inserts no new terminator or starter.
                             This affects ``auto-fill-mode``, which is the main reason to
                             customize this variable.

``comment-start-skip``       Regexp to match the start of a comment plus everything up to its body.
                             If there are any \(...\) pairs and ``comment-use-syntax`` is nil,
                             the comment delimiter text is held to begin at the place matched
                             by the close of the first pair.

``comment-indent-function``  Function to compute desired indentation for a comment.
                             It should return the column in which the comment ought to start.
                             This function is called with no args with point at the beginning
                             of the comment``s starting delimiter and should return either the
                             desired column indentation, a range of acceptable
                             indentation (MIN . MAX), or nil.
                             If nil is returned, indentation is delegated to ``indent-according-to-mode``.

                             Emacs also tries to align comments on adjacent lines.
                             To override this, the function may return a cons of two
                             (possibly equal) integers to indicate an acceptable range of indentation.
============================ ======================================================================

**Programming Modes**

:Ref: `Major Modes`_
:Ref: `Major Mode Conventions`_
:Ref: `Derived Modes`_
:Ref: `Basic Major Modes`_
:Ref: `Defining Derived Modes`_
:Ref: `How Emacs Chooses a Major Mode`_

- Each major mode must have one command associated with  the major mode.

  - The name of that command must end with ``-mode``.  Such as ``pascal-mode`` or ``seed7-mode``.
  - The recommended way to define new major mode is to derive from one existing mode
    using the ``define-derived-mode`` macro.

Base major modes are listed and described here:

===================== ===============================================================
Major Mode            Description
===================== ===============================================================
``fundamental-mode``  A major-mode not specialized for anything.
                      Text is shown without and font-locking,
                      there is no specified key map.

``special-mode``      A major mode that should only be used for *special* major
                      modes, intended to view specially formatted data rather
                      than files.  These modes are forced into read-only
                      buffers.

                      For example, the ``dired-mode`` inherit from the
                      ``special-mode``.  The ``dired-mode`` buffers are
                      read-only.  The ``wdired-mode`` which activates the
                      ability change file names and  file attributes also
                      inherits from the ``special-mode``.


``text-mode``         A major mode for editing text, as opposed to source code.
                      In this mode paragraphs are delimited by blank lines or
                      lines that only contain white space characters.  It
                      supports adaptive filling.

``prog-mode``         A major mode for editing programming language source code.
                      Major modes for programming modes are usually derived from
                      ``prog-mode``.
===================== ===============================================================



**Key map**

The major mode must have a key map named after the mode.
For example,

- the ``c-mode`` has a ``c-mode-map`` and a ``c-mode-base-map`` shared by all CC modes.
- the ``pascal-mode`` has a ``pascal-mode-map`` and a ``python-base-mode-map``.
- the ``python-mode`` has a ``python-mode-map``,

**Syntax Table**


**Major-mode hook**


Control the Selection of the major mode
---------------------------------------

:Ref: `How Emacs Chooses a Major Mode`_

The following variables are used to control the automatic selection of the
major mode.  These can be set in the code of the major mode.

**auto-mode-alist**

An `alist`_ of file name patter regexp and corresponding major mode in the
form of ``(regexp . mode-function)``.

Identify the rules to select the major mode.
It can be based on the name of the file, such as extensions.

The following code example uses the ``add-to-list`` function to add several
entries to ``auto-mode-alist``:

.. code:: elisp

  (add-to-list 'auto-mode-alist '("\\.d[i]?\\'" . d-mode))
  (add-to-list 'auto-mode-alist '("\\.go\\'" . go-mode))
  (add-to-list 'auto-mode-alist '(".ssh/authorized_keys2?\\'" . ssh-authorized-keys-mode))
  (add-to-list 'auto-mode-alist '(".ssh/known_hosts\\'"       . ssh-known-hosts-mode))
  (add-to-list 'auto-mode-alist '("ssh_known_hosts\\'"        . ssh-known-hosts-mode))

**interpreter-mode-alist**

For the major modes that can be used in extension-less script files that use a
`shebang line`_, the association of the shebang line to the major mode can be
identified by the by the ``interpreter-mode-alist`` variable that holds an
`alist`_ of ``(regexp . mode-function)`` forms.  The regexp identifies the
interpreter.

For example:

.. code:: elisp

    ("\\(mini\\)?perl5?" . cperl-mode)
    ("python[0-9.]*" . python-mode)
    ("s7" . seed7-mode)

**magic-mode-alist**

An `alist`_ of ``(regexp . function)`` forms.

If the text at the beginning of the file matches the regexp the
``set-auto-mode`` calls the function if it is non-nil.  This is used for modes
like ``archive-mode`` or ``yaml-mode`` where the content of the file text
identifies the type of file.

Example:

.. code:: elisp

     (("^%YAML\\s-+[0-9]+\\.[0-9]+\\(\\s-+#\\|\\s-*$\\)" . yaml-mode))



imenu Support
-------------


Speedbar Support
----------------

- With PEL: use ``pel-add-speedbar-extension``
- Without PEL:

  For a given extension string, or list of strings:

  .. code:: elisp

    (require 'speedbar)
    (declare-function speedbar-add-supported-extension "speedbar")
    (speedbar-add-supported-extension extension)


Defining Regular Expressions
----------------------------

:Ref: `Emacs Regexp Syntax @ PEL â…€ Search/Replace PDF`_
:Ref: `re-builder @ PEL â…€ Search/Replace PDF`_
:Ref: `The rx macro`_
:Ref: `The rx Structured Regexp Notation`_

Emacs Lisp has several convenient macros that can help writing and testing the
Emacs Lisp regular expression syntax.

- The ``rx`` Lisp macro translates a simple language into
  efficient Emacs Lisp regular expression string.
- The ``re-builder`` command allows you to build and test regexp interactively
  using various regexp syntax supported by Emacs, including the ``rx`` syntax.

Faces for a Major Mode
----------------------

:Ref: `Defining Faces`_

There are some already available font lock face variables defined in the Emacs
font-lock.el file, listed below.

===================================== ================================================
Variable name                         Description
===================================== ================================================
``font-lock-builtin-face``            Face name to use for builtins.
``font-lock-comment-delimiter-face``  Face name to use for comment delimiters.
``font-lock-comment-face``            Face name to use for comments.
``font-lock-constant-face``           Face name to use for constant and label names.
``font-lock-doc-face``                Face name to use for documentation.
``font-lock-doc-markup-face``         Face name to use for documentation mark-up.
``font-lock-function-name-face``      Face name to use for function names.
``font-lock-keyword-face``            Face name to use for keywords.
``font-lock-negation-char-face``      Face name to use for easy to overlook negation. This can be an '!' or the 'n' in ifndef.
``font-lock-preprocessor-face``       Face name to use for preprocessor directives.
``font-lock-string-face``             Face name to use for strings.
``font-lock-type-face``               Face name to use for type and class names.
``font-lock-variable-name-face``      Face name to use for variable names.
``font-lock-warning-face``            Face name to use for things that should stand out.
===================================== ================================================

Each mode can define more customizable faces with the Emacs lisp ``defface``
Lisp macro.  Several of them are defined in the Emacs lisp library files.
The progmodes files define several. Look at these definitions for example on
how to create customizable faces.

.. ---------------------------------------------------------------------------


Examples of Major Mode Implementations
======================================

strace-mode -- a simple major mode
----------------------------------

:Ref: `strace-mode @ Github`_

The ``strace-mode`` is a very simple implementation of a major mode that
derives from ``fundamental-mode``.  It only defines regular expressions for several
faces to colorize the strace output.


.. ---------------------------------------------------------------------------
.. links:

.. _PEL -- Pragmatic Emacs Library:                 https://github.com/pierre-rouleau/pel#readme
.. _Emacs Major Modes:                              https://www.gnu.org/software/emacs/manual/html_node/emacs/Major-Modes.html
.. _Options Controlling Comments:                   https://www.gnu.org/software/emacs/manual/html_node/emacs/Options-for-Comments.html
.. _Derived Modes:                                  https://www.gnu.org/software/emacs/manual/html_node/elisp/Derived-Modes.html#Derived-Modes
.. _Basic Major Modes:                              https://www.gnu.org/software/emacs/manual/html_node/elisp/Basic-Major-Modes.html
.. _Defining Derived Modes:                         https://www.gnu.org/software/emacs/manual/html_node/elisp/Derived-Modes.html#Derived-Modes
.. _Major Modes:                                    https://www.gnu.org/software/emacs/manual/html_node/elisp/Major-Modes.html
.. _Major Mode Conventions:                         https://www.gnu.org/software/emacs/manual/html_node/elisp/Major-Mode-Conventions.html
.. _How Emacs Chooses a Major Mode:                 https://www.gnu.org/software/emacs/manual/html_node/elisp/Auto-Major-Mode.html
.. _alist:                                          https://www.gnu.org/software/emacs/manual/html_node/elisp/Association-Lists.html
.. _shebang line:                                   https://en.wikipedia.org/wiki/Shebang_(Unix)
.. _strace-mode @ Github:                           https://github.com/pierre-rouleau/strace-mode/blob/master/strace-mode.el
.. _Defining Faces:                                 https://www.gnu.org/software/emacs/manual/html_node/elisp/Defining-Faces.html
.. _The rx Structured Regexp Notation:              https://www.gnu.org/software/emacs/manual/html_node/elisp/Rx-Notation.html
.. _The rx macro:                                   https://www.gnu.org/software/emacs/manual/html_node/elisp/Rx-Functions.html
.. _Emacs Regexp Syntax @ PEL â…€ Search/Replace PDF: https://raw.githubusercontent.com/pierre-rouleau/pel/master/doc/pdf/search-replace.pdf#page=9
.. _re-builder @ PEL â…€ Search/Replace PDF:          https://raw.githubusercontent.com/pierre-rouleau/pel/master/doc/pdf/search-replace.pdf#page=10
.. _Emacs Syntax Tables:                            https://www.gnu.org/software/emacs/manual/html_node/elisp/Syntax-Tables.html
.. _Emacs Char-Tables:                              https://www.gnu.org/software/emacs/manual/html_node/elisp/Char_002dTables.html
.. _Emacs Lisp Sequences, Arrays and Vectors:       https://www.gnu.org/software/emacs/manual/html_node/elisp/Sequences-Arrays-Vectors.html
.. _Emacs Vectors:                                  https://www.gnu.org/software/emacs/manual/html_node/elisp/Vectors.html
.. _Emacs Arrays:                                   https://www.gnu.org/software/emacs/manual/html_node/elisp/Arrays.html
.. _Vector Type:                                    https://www.gnu.org/software/emacs/manual/html_node/elisp/Vector-Type.html
.. _Arrays:
.. _Functions that Operate on Arrays:               https://www.gnu.org/software/emacs/manual/html_node/elisp/Array-Functions.html
.. _Sequences:
.. _Emacs Sequences:                                https://www.gnu.org/software/emacs/manual/html_node/elisp/Sequence-Functions.html
.. _Emacs Vectors:                                  https://www.gnu.org/software/emacs/manual/html_node/elisp/Vectors.html

.. ---------------------------------------------------------------------------

..
       Local Variables:
       time-stamp-line-limit: 10
       time-stamp-start: "^:Modified:[ \t]+\\\\?"
       time-stamp-end:   "\\.$"
       End:
