====================================
Using tree-sitter with Emacs and PEL
====================================

:Home URL: https://github.com/pierre-rouleau/pel
:Project: `PEL -- Pragmatic Emacs Library`_
:Ref: `PEL How-to Tips`_
:Created:  Tuesday, March  4 2025.
:Author:  Pierre Rouleau <prouleau001@gmail.com>
:Modified: 2025-10-21 10:05:12 EDT, updated by Pierre Rouleau.
:Copyright: Â© 2025, Pierre Rouleau


.. contents::  **Table of Contents**
.. sectnum::

.. ---------------------------------------------------------------------------

Requirements for using Tree-Sitter with Emacs and PEL
=====================================================

:Ref: `How to Get Started with Tree-Sitter`_, by Mickey Petersen
:Ref: `What's new in Emacs 30.1?`_, by Mickey Petersen

**Use Emacs 30.1 or later!**

- Because there were `breaking code change in Emacs 30`_ in the support of
  tree-sitter, if you plan to use tree-sitter modes, then **you should use
  Emacs 30.1 or later**.

  - **PEL tree-sitter support logic is written for Emacs 30.1 and later**.
    This simplifies the logic but it is also better since Emacs has better
    tree-sitter support starting with Emacs 30.1.

Emacs Tree-Sitter Language Grammar Files
========================================

:Ref: `Tree-Sitter Language Grammar`_, Emacs Manual

**- The Dynamic Library Language File:**

The name of the dynamic libraries for language grammar files used by Emacs
follows the following naming convention:

   libtree-sitter-\ *lang.ext*

where:

- *lang* : is the name of the language.  Like python or c.
- *ext* : is the file extension for dynamic libraries:

  - ``so`` for Linux,
  - ``dylib`` for macOS,
  - ``dll`` for Windows.

**- The function provided by the Dynamic Library Language File:**

By convention, the function provided by that library is named
``tree_sitter_``\ *lang*

where *lang* is the name of the language, like python or c.


**- The treesit-load-name-override-list variable:**

If a file does not follow this convention, Emacs provides the
``treesit-load-name-override-list`` variable that can be used to provide
translation rules to override unconventional tree-sitter libraries.

This is a list with entries that have the following format:

    (LANG LIBRARY-BASE-NAME FUNCTION-NAME)

where LANG is the language, LIBRARY-BASE-NAME is the filename of the dynamic
library without the file-name extension, and FUNCTION-NAME is the
function provided by the library.

For example, the Javascript language grammar file base name is
``libtree-sitter-javascript`` and the entry point function name
is ``tree_sitter_javascript``.  Unfortunately the name of mode that supports
it is ``js-mode`` and it expects the language to be identified by the name
``js``.

The entry required in the ``treesit-load-name-override-list`` variable is::

  (js "libtree-sitter-javascript" "tree_sitter_javascript")

The code required to add it in the list is:

.. code:: elisp

    ;; the javascript language grammar is used for js-ts-mode
    (add-to-list 'treesit-load-name-override-list
                 '(js "libtree-sitter-javascript" "tree_sitter_javascript"))

**- Use symlink for unconventional named files:**

Currently, PEL does not have a corresponding customizable user option that
would be used to set the value of the ``treesit-load-name-override-list``
variable.  If you use a language grammar file that has the proper function
name but the wrong file name (and that is often the case because the
tree-sitter language grammar files are used by several other editors), create
symbolic links that have the conventional name to the implementation file.


Setting up Emacs Tree-Sitter Environment for PEL
================================================

:Ref: `How to Get Started with Tree-Sitter`_, by Mickey Petersen
:Ref: `What's new in Emacs 30.1?`_, by Mickey Petersen
:Ref: See also: `How to recompile all Emacs Lisp files after updating Emacs to a different version`_
:Ref: `ðŸš¦Tree-sitter PDF`_

#. Set the ``pel-use-tree-sitter`` user-option to t.

   - Save.
   - Exit Emacs.
   - Restart Emacs.

   PEL will automatically install the tree-sitter grammar files from the
   `tree-sitter-langs`_ package.

   This installs inside a directory
   ``~/.emacs.d/elpa/tree-sitter-langs-20YYMMDD.VV``, where ``YYMMDD`` is the date
   and ``VV`` the version.  The dynamic library files are stored inside the
   ``bin`` sub-directory.

#. Create (or update) the ``~/.emacs.d/tree-sitter-langs-bin`` symbolic link.

   - It must point to the bin sub-directory of the
     ``~/.emacs.d/elpa/tree-sitter-langs-20YYMMDD.VV``
     directory that was installed by the `tree-sitter-langs`_ package.

     For example, you would create it with::

       cd ~/.emacs.d
       ln -s ~/.emacs.d/elpa/tree-sitter-langs-20250511.737/bin tree-sitter-langs-bin

   - Later, when you will update the `tree-sitter-langs`_ package and get a
     new directory with a different data and version, just update the symbolic
     link to the new one.

#. Create the ``~/.emacs.d/libtree-sitter`` directory if it does not exists.

   - Inside this directory create one symbolic link with the libtree-sitter-\*lang.ext*
     conventional name to point to each of the language grammar dynamic library
     file installed by the `tree-sitter-langs`_ package.
   - Instead of using the real name of the directory installed by the
     `tree-sitter-langs`_ package, as the target, use
     ``~/.emacs.d/tree-sitter-langs-bin`` as the directory path.

     - This will allow the symbolic links created inside
       ``~/.emacs.d/libtree-sitter`` directory
       to remain valid when you will update the `tree-sitter-langs`_ package
       later.

   For example::

     cd ~/.emacs.d/libtree-sitter
     ln -s ~/.emacs.d/tree-sitter-langs-bin/ada.dylib libtree-sitter-ada.dylib

#. Create the ``~/.emacs.d/libtree-sitter-extra`` directory.

   Inside this directory store symbolic links to other language grammar
   dynamic library files supporting other languages or newer versions of the
   language supported by the `tree-sitter-langs`_ package.

   - Remember that the file name expected by Emacs is:
     libtree-sitter-\ *lang.ext* .
     Each of the symlinks inside the directory should have a name that match
     this convention.

#. Set the ``pel-treesit-load-path`` user-option.

   - Add the following directories to the list:

     - ``~/.emacs.d/libtree-sitter-extra``
     - ``~/.emacs.d/libtree-sitter``

   - Save.
   - Exit Emacs.

At this point you should be able to start Emacs and use tree-sitter
facilities for the languages that have Tree-Sitter grammars provided by the
`tree-sitter-langs`_ package.

Note that symlinks present in ``~/.emacs.d/libtree-sitter`` shadow symlinks
with same name in ``~/.emacs.d/tree-sitter-langs-bin``.  You can use this to
use a language grammar different from what is provided by the
`tree-sitter-langs`_ package or not provided by that package.

**Using Other Language Grammars**

The `ðŸš¦Tree-sitter PDF`_ has links to the Tree-Sitter language grammar packages
for the programming languages supported by PEL.

To use them, clone their repository on your computer and build them.
Most of them have a Makefile.  Just issue the ``make`` command in the
repo directory and then add a symlink located inside
``~/.emacs.d/libtree-sitter-extra``
that points to the generated libtree-sitter-LANG.EXT file.

In some cases the generated file has version numbers in the file.
Do not modify the file name, just point the symlink to that file.


Testing Tree-Sitter Language Grammar Support
============================================

Inside emacs you can evaluate the following functions to check whether the
language grammar for a specific major mode is available:

- ``treesit-ready-p``
- ``treesit-language-abi-version``

For example, to test for the availability of Tree-Sitter language grammar
for Go, evaluate the following:

.. code:: elisp

           (treesit-ready-p 'go)
           (treesit-language-abi-version 'go)


The first will return t if it is available, nil, otherwise.
The second will return the API version of the language grammar if it is
available, nil otherwise.

Controlling Automatic Invocation of the Tree-Sitter Modes
=========================================================

Emacs 30 NEWS file located inside the etc directory of the Emacs Git repo
has a `section on Tree-Sitter`_
nicely describes what needs to be done. The following
is a copy of the relevant information from that file.

Loading a Tree-Sitter mode (such as by using ``M-x load-library`` or
``M-x load-file``) causes the corresponding non-Tree-Sitter
mode be remapped to the Tree-Sitter mode by default.

- This remapping affects visiting files for which ``auto-mode-alist`` specifies
  a non-Tree-Sitter mode, and also affects mode-specification cookies on the
  first line of a file and mode specifications in file-local and directory-local
  variables.
- To revert to using a non-Tree-Sitter mode, reload the
  corresponding mode file anew.
- To prevent file loading from turning on Tree-Sitter mode when
  ``auto-mode-alist`` or the file/directory-local variables specify a
  non-Tree-Sitter mode, customize the user option **major-mode-remap-alist** to
  specify that a non-Tree-Sitter mode is "remapped" to itself.

For example:

.. code:: elisp

    (add-to-list 'major-mode-remap-alist '(c-mode))

specifies that C Mode should not be remapped to **c-ts-mode** even if and
when **c-ts-mode** is loaded.  Conversely,

.. code:: elisp

    (add-to-list 'major-mode-remap-alist '(c-mode . c-ts-mode))

tells Emacs to always invoke **c-ts-mode** whenever **c-mode** is
requested, either by ``auto-mode-alist`` or by file/directory-local
variables.

We recommend using ``major-mode-remap-alist`` to express your preferences
for using Tree-Sitter or non-Tree-Sitter modes for files for which both
variants of major modes are available, because that variable overrides
the remapping Emacs might decide to perform as result of loading Lisp
files and features.

Allowing execution of classic and tree-sitter based major modes
===============================================================

Although Emacs has a mechanism for being able to use tree-sitter based major
modes, there are still limitations that are important to remember:

- As `mentioned in the Emacs 30 Notes`_ the tree-sitter major modes dot **not**
  inherit from the classic modes.  Therefore Hooks for the classic and the tree-sitter
  major modes are different.
- Unless something is done in the handling of classic and tree-sitter based
  major modes, as soon as you execute the major mode command for a type of
  file, Emacs will always use the tree-sitter mode for these buffer types in
  the remaining of the Emacs session.

For major modes that have classic and tree-sitter major modes supported by
PEL, these two problems are resolved.  For those types, PEL implements startup
logic that

- associate the hooks to the classic and the tree-sitter major mode for a file
  type,
- associates a major mode selector with the file type in ``auto-mode-alist``:
  the mode selector command checks the ``pel-use-MODE`` customizable
  user-option for the specific MODE and runs the selected major mode (either
  an appropriate classic mode or a tree-sitter based mode),
- schedules the execution of a *fixer* function when the file implementing a
  major mode loads.  The fixer function for several tree-sitter major mode
  remove the insertion of a rule from `auto-mode-alist` that associates the
  file type with the tree-sitter major mode, ensuring that the PEL major mode
  selector function is used instead.  This way you can always control whether
  you want to use the classic or the tree-sitter major mode.

  - As of Oct 13, 2025, PEL has logic that deals with Go and Rust classic and
    tree-sitter major modes.

.. ---------------------------------------------------------------------------
.. links:

.. _PEL -- Pragmatic Emacs Library: https://github.com/pierre-rouleau/pel#readme
.. _PEL How-to Tips: https://raw.githubusercontent.com/pierre-rouleau/pel/master/doc/pdf/-howto.pdf
.. _How to Get Started with Tree-Sitter:  https://www.masteringemacs.org/article/how-to-get-started-tree-sitter
.. _What's new in Emacs 30.1?: https://www.masteringemacs.org/article/whats-new-in-emacs-301
.. _How to recompile all Emacs Lisp files after updating Emacs to a different version: upgrading-emacs.rst.txt
.. _breaking code change in Emacs 30: https://cgit.git.savannah.gnu.org/cgit/emacs.git/tree/etc/NEWS?h=emacs-30#n111
.. _section on Tree-Sitter: https://cgit.git.savannah.gnu.org/cgit/emacs.git/tree/etc/NEWS?h=emacs-30#n120
.. _mentioned in the Emacs 30 Notes: https://cgit.git.savannah.gnu.org/cgit/emacs.git/tree/etc/NEWS?h=emacs-30#n120
.. _Tree-Sitter Language Grammar: https://www.gnu.org/software/emacs/manual/html_node/elisp/Language-Grammar.html
.. _tree-sitter-langs: https://github.com/emacs-tree-sitter/tree-sitter-langs
.. _ðŸš¦Tree-sitter PDF: https://raw.githubusercontent.com/pierre-rouleau/pel/master/doc/pdf/tree-sitter-parsers.pdf



.. ---------------------------------------------------------------------------

..
       Local Variables:
       time-stamp-line-limit: 10
       time-stamp-start: "^:Modified:[ \t]+\\\\?"
       time-stamp-end:   "\\.$"
       End:
