PEL is a collection of utility commands along with a set of key-bindings
similar to one would typically find inside an init.el file. Most key bindings
are bound to keys that use function keys as prefixes, attempting to leave
standard Emacs key bindings and the popular prefixes used by other packages
untouched.  Large portions of PEL are optionally activated via cutomization
variables, that have names starting with the ``pel-use-`` prefix.

PEL currently depends and takes advantage of `use-package' to provide
automated installation of the optional packages when activated by the
``pel-use-`` customize variables.  When first installed, all external
dependencies that can be installed via the customization are disabled.  The
key binding for the corresponding commands are not applied. To activate a
package use ``M-x -customize``, select "pel$" then "Pel Package Use" group and
select the feature or package you want to use.

PEL attempts to reduce emacs initial load time, not to load everything at
start and run as a deamon.  It was initialily written as a replacement and
evolution of an init.el file, allowing byte-compilation of the code it used
and providing the ability to integrate various package inside an overall Emacs
environment that strats quickly and can be customized easily.

PEL is currently (2020) in its early development stages.  Be aware that it's
the first Emacs Lisp package that I have written, so it's evolution might
include a couple of "revolutions" in short term if I discover better ways to
do things. And, BTW, don't hesitate to comment.

Eventually I hope to integrate the use of sebveral packages for various
programming languages, including Algol descendents like C, C++, Java but also
Rust, Erlang, Elixir, Haskell, OCaml, LFE, Clojerl, etc...  My goal is to
provide the ability to integrate existing tools inside an environment that
loads quickly and is somewhat consistent and (relatively) easy to pick-up and
remember.
